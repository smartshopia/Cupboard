{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeleteTransform = exports.FieldTransform = exports.FieldValue = exports.VectorValue = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst serializer_1 = require(\"./serializer\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * Represent a vector type in Firestore documents.\n * Create an instance with {@link FieldValue.vector}.\n *\n * @class VectorValue\n */\nclass VectorValue {\n  /**\n   * @private\n   * @internal\n   */\n  constructor(values) {\n    // Making a copy of the parameter.\n    this._values = (values || []).map(n => n);\n  }\n  /**\n   * Returns a copy of the raw number array form of the vector.\n   */\n  toArray() {\n    return this._values.map(n => n);\n  }\n  /**\n   * @private\n   * @internal\n   */\n  _toProto(serializer) {\n    return serializer.encodeVector(this._values);\n  }\n  /**\n   * @private\n   * @internal\n   */\n  static _fromProto(valueArray) {\n    var _a, _b;\n    const values = (_b = (_a = valueArray.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(v => {\n      return v.doubleValue;\n    });\n    return new VectorValue(values);\n  }\n  /**\n   * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\n   */\n  isEqual(other) {\n    return (0, util_1.isPrimitiveArrayEqual)(this._values, other._values);\n  }\n}\nexports.VectorValue = VectorValue;\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\nclass FieldValue {\n  /** @private */\n  constructor() {}\n  /**\n   * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\n   *\n   * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\n   *\n   * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\n   */\n  static vector(values) {\n    return new VectorValue(values);\n  }\n  /**\n   * Returns a sentinel for use with update() or set() with {merge:true} to mark\n   * a field for deletion.\n   *\n   * @returns {FieldValue} The sentinel value to use in your objects.\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('col/doc');\n   * let data = { a: 'b', c: 'd' };\n   *\n   * documentRef.set(data).then(() => {\n   *   return documentRef.update({a: Firestore.FieldValue.delete()});\n   * }).then(() => {\n   *   // Document now only contains { c: 'd' }\n   * });\n   * ```\n   */\n  static delete() {\n    return DeleteTransform.DELETE_SENTINEL;\n  }\n  /**\n   * Returns a sentinel used with set(), create() or update() to include a\n   * server-generated timestamp in the written data.\n   *\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({\n   *   time: Firestore.FieldValue.serverTimestamp()\n   * }).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   console.log(`Server time set to ${doc.get('time')}`);\n   * });\n   * ```\n   */\n  static serverTimestamp() {\n    return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to increment the the field's current value by the\n   * given value.\n   *\n   * If either current field value or the operand uses floating point\n   * precision, both values will be interpreted as floating point numbers and\n   * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n   * precision is kept and the result is capped between -2^63 and 2^63-1.\n   *\n   * If the current field value is not of type 'number', or if the field does\n   * not yet exist, the transformation will set the field to the given value.\n   *\n   * @param {number} n The value to increment by.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'counter', Firestore.FieldValue.increment(1)\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('counter') was incremented\n   * });\n   * ```\n   */\n  static increment(n) {\n    // eslint-disable-next-line prefer-rest-params\n    (0, validate_1.validateMinNumberOfArguments)('FieldValue.increment', arguments, 1);\n    return new NumericIncrementTransform(n);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to union the given elements with any array value that\n   * already exists on the server. Each specified element that doesn't already\n   * exist in the array will be added to the end. If the field being modified is\n   * not already an array it will be overwritten with an array containing\n   * exactly the specified elements.\n   *\n   * @param {...*} elements The elements to union into the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayUnion('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') contains field 'foo'\n   * });\n   * ```\n   */\n  static arrayUnion(...elements) {\n    (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayUnion', elements, 1);\n    return new ArrayUnionTransform(elements);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to remove the given elements from any array value\n   * that already exists on the server. All instances of each element specified\n   * will be removed from the array. If the field being modified is not already\n   * an array it will be overwritten with an empty array.\n   *\n   * @param {...*} elements The elements to remove from the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * ```\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayRemove('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') no longer contains field 'foo'\n   * });\n   * ```\n   */\n  static arrayRemove(...elements) {\n    (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayRemove', elements, 1);\n    return new ArrayRemoveTransform(elements);\n  }\n  /**\n   * Returns true if this `FieldValue` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `FieldValue` is equal to the provided value.\n   *\n   * @example\n   * ```\n   * let fieldValues = [\n   *   Firestore.FieldValue.increment(-1.0),\n   *   Firestore.FieldValue.increment(-1),\n   *   Firestore.FieldValue.increment(-0.0),\n   *   Firestore.FieldValue.increment(-0),\n   *   Firestore.FieldValue.increment(0),\n   *   Firestore.FieldValue.increment(0.0),\n   *   Firestore.FieldValue.increment(1),\n   *   Firestore.FieldValue.increment(1.0)\n   * ];\n   *\n   * let equal = 0;\n   * for (let i = 0; i < fieldValues.length; ++i) {\n   *   for (let j = i + 1; j < fieldValues.length; ++j) {\n   *     if (fieldValues[i].isEqual(fieldValues[j])) {\n   *       ++equal;\n   *     }\n   *   }\n   * }\n   * console.log(`Found ${equal} equalities.`);\n   * ```\n   */\n  isEqual(other) {\n    return this === other;\n  }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @internal\n * @abstract\n */\nclass FieldTransform extends FieldValue {}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n * @internal\n */\nclass DeleteTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Deletes are included in document masks.\n   * @private\n   * @internal\n   */\n  get includeInDocumentMask() {\n    return true;\n  }\n  /**\n   * Deletes are are omitted from document transforms.\n   * @private\n   * @internal\n   */\n  get includeInDocumentTransform() {\n    return false;\n  }\n  get methodName() {\n    return 'FieldValue.delete';\n  }\n  validate() {}\n  toProto() {\n    throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n  }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n * @internal\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n * @internal\n */\nclass ServerTimestampTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Server timestamps are omitted from document masks.\n   *\n   * @private\n   * @internal\n   */\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Server timestamps are included in document transforms.\n   *\n   * @private\n   * @internal\n   */\n  get includeInDocumentTransform() {\n    return true;\n  }\n  get methodName() {\n    return 'FieldValue.serverTimestamp';\n  }\n  validate() {}\n  toProto(serializer, fieldPath) {\n    return {\n      fieldPath: fieldPath.formattedName,\n      setToServerValue: 'REQUEST_TIME'\n    };\n  }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n * @internal\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n * @internal\n */\nclass NumericIncrementTransform extends FieldTransform {\n  constructor(operand) {\n    super();\n    this.operand = operand;\n  }\n  /**\n   * Numeric transforms are omitted from document masks.\n   *\n   * @private\n   * @internal\n   */\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Numeric transforms are included in document transforms.\n   *\n   * @private\n   * @internal\n   */\n  get includeInDocumentTransform() {\n    return true;\n  }\n  get methodName() {\n    return 'FieldValue.increment';\n  }\n  validate() {\n    (0, validate_1.validateNumber)('FieldValue.increment()', this.operand);\n  }\n  toProto(serializer, fieldPath) {\n    const encodedOperand = serializer.encodeValue(this.operand);\n    return {\n      fieldPath: fieldPath.formattedName,\n      increment: encodedOperand\n    };\n  }\n  isEqual(other) {\n    return this === other || other instanceof NumericIncrementTransform && this.operand === other.operand;\n  }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n * @internal\n */\nclass ArrayUnionTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   * @internal\n   */\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   * @internal\n   */\n  get includeInDocumentTransform() {\n    return true;\n  }\n  get methodName() {\n    return 'FieldValue.arrayUnion';\n  }\n  validate(allowUndefined) {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i], allowUndefined);\n    }\n  }\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      appendMissingElements: encodedElements\n    };\n  }\n  isEqual(other) {\n    return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements);\n  }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n * @internal\n */\nclass ArrayRemoveTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   * @internal\n   */\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   * @internal\n   */\n  get includeInDocumentTransform() {\n    return true;\n  }\n  get methodName() {\n    return 'FieldValue.arrayRemove';\n  }\n  validate(allowUndefined) {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i], allowUndefined);\n    }\n  }\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      removeAllFromArray: encodedElements\n    };\n  }\n  isEqual(other) {\n    return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements);\n  }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n  if (Array.isArray(value)) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'array element')} Nested arrays are not supported.`);\n  }\n  (0, serializer_1.validateUserInput)(arg, value, 'array element', /*path=*/{\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined\n  }, /*path=*/undefined, /*level=*/0, /*inArray=*/true);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","DeleteTransform","FieldTransform","FieldValue","VectorValue","deepEqual","require","serializer_1","util_1","validate_1","constructor","values","_values","map","n","toArray","_toProto","serializer","encodeVector","_fromProto","valueArray","_a","_b","arrayValue","v","doubleValue","isEqual","other","isPrimitiveArrayEqual","vector","delete","DELETE_SENTINEL","serverTimestamp","ServerTimestampTransform","SERVER_TIMESTAMP_SENTINEL","increment","validateMinNumberOfArguments","arguments","NumericIncrementTransform","arrayUnion","elements","ArrayUnionTransform","arrayRemove","ArrayRemoveTransform","includeInDocumentMask","includeInDocumentTransform","methodName","validate","toProto","Error","fieldPath","formattedName","setToServerValue","operand","validateNumber","encodedOperand","encodeValue","allowUndefined","i","length","validateArrayElement","encodedElements","appendMissingElements","removeAllFromArray","arg","Array","isArray","invalidArgumentMessage","validateUserInput","allowDeletes","allowTransforms","undefined"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/field-value.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteTransform = exports.FieldTransform = exports.FieldValue = exports.VectorValue = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst serializer_1 = require(\"./serializer\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * Represent a vector type in Firestore documents.\n * Create an instance with {@link FieldValue.vector}.\n *\n * @class VectorValue\n */\nclass VectorValue {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(values) {\n        // Making a copy of the parameter.\n        this._values = (values || []).map(n => n);\n    }\n    /**\n     * Returns a copy of the raw number array form of the vector.\n     */\n    toArray() {\n        return this._values.map(n => n);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    _toProto(serializer) {\n        return serializer.encodeVector(this._values);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(valueArray) {\n        var _a, _b;\n        const values = (_b = (_a = valueArray.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(v => {\n            return v.doubleValue;\n        });\n        return new VectorValue(values);\n    }\n    /**\n     * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\n     */\n    isEqual(other) {\n        return (0, util_1.isPrimitiveArrayEqual)(this._values, other._values);\n    }\n}\nexports.VectorValue = VectorValue;\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\nclass FieldValue {\n    /** @private */\n    constructor() { }\n    /**\n     * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\n     *\n     * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\n     *\n     * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\n     */\n    static vector(values) {\n        return new VectorValue(values);\n    }\n    /**\n     * Returns a sentinel for use with update() or set() with {merge:true} to mark\n     * a field for deletion.\n     *\n     * @returns {FieldValue} The sentinel value to use in your objects.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let data = { a: 'b', c: 'd' };\n     *\n     * documentRef.set(data).then(() => {\n     *   return documentRef.update({a: Firestore.FieldValue.delete()});\n     * }).then(() => {\n     *   // Document now only contains { c: 'd' }\n     * });\n     * ```\n     */\n    static delete() {\n        return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     * ```\n     */\n    static serverTimestamp() {\n        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     * ```\n     */\n    static increment(n) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.increment', arguments, 1);\n        return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayUnion(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayUnion', elements, 1);\n        return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayRemove(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayRemove', elements, 1);\n        return new ArrayRemoveTransform(elements);\n    }\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * ```\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     * ```\n     */\n    isEqual(other) {\n        return this === other;\n    }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @internal\n * @abstract\n */\nclass FieldTransform extends FieldValue {\n}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n * @internal\n */\nclass DeleteTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Deletes are included in document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return false;\n    }\n    get methodName() {\n        return 'FieldValue.delete';\n    }\n    validate() { }\n    toProto() {\n        throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n * @internal\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n * @internal\n */\nclass ServerTimestampTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Server timestamps are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.serverTimestamp';\n    }\n    validate() { }\n    toProto(serializer, fieldPath) {\n        return {\n            fieldPath: fieldPath.formattedName,\n            setToServerValue: 'REQUEST_TIME',\n        };\n    }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n * @internal\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n * @internal\n */\nclass NumericIncrementTransform extends FieldTransform {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n    /**\n     * Numeric transforms are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.increment';\n    }\n    validate() {\n        (0, validate_1.validateNumber)('FieldValue.increment()', this.operand);\n    }\n    toProto(serializer, fieldPath) {\n        const encodedOperand = serializer.encodeValue(this.operand);\n        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof NumericIncrementTransform &&\n                this.operand === other.operand));\n    }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n * @internal\n */\nclass ArrayUnionTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayUnion';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            appendMissingElements: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayUnionTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n * @internal\n */\nclass ArrayRemoveTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayRemove';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            removeAllFromArray: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayRemoveTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n    if (Array.isArray(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'array element')} Nested arrays are not supported.`);\n    }\n    (0, serializer_1.validateUserInput)(arg, value, 'array element', \n    /*path=*/ { allowDeletes: 'none', allowTransforms: false, allowUndefined }, \n    /*path=*/ undefined, \n    /*level=*/ 0, \n    /*inArray=*/ true);\n}\n//# sourceMappingURL=field-value.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,UAAU,GAAGJ,OAAO,CAACK,WAAW,GAAG,KAAK,CAAC;AACpG,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,WAAW,CAAC;EACd;AACJ;AACA;AACA;EACIM,WAAWA,CAACC,MAAM,EAAE;IAChB;IACA,IAAI,CAACC,OAAO,GAAG,CAACD,MAAM,IAAI,EAAE,EAAEE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC;EAC7C;EACA;AACJ;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACH,OAAO,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC;EACnC;EACA;AACJ;AACA;AACA;EACIE,QAAQA,CAACC,UAAU,EAAE;IACjB,OAAOA,UAAU,CAACC,YAAY,CAAC,IAAI,CAACN,OAAO,CAAC;EAChD;EACA;AACJ;AACA;AACA;EACI,OAAOO,UAAUA,CAACC,UAAU,EAAE;IAC1B,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMX,MAAM,GAAG,CAACW,EAAE,GAAG,CAACD,EAAE,GAAGD,UAAU,CAACG,UAAU,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACV,MAAM,MAAM,IAAI,IAAIW,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACT,GAAG,CAACW,CAAC,IAAI;MAC/I,OAAOA,CAAC,CAACC,WAAW;IACxB,CAAC,CAAC;IACF,OAAO,IAAIrB,WAAW,CAACO,MAAM,CAAC;EAClC;EACA;AACJ;AACA;EACIe,OAAOA,CAACC,KAAK,EAAE;IACX,OAAO,CAAC,CAAC,EAAEnB,MAAM,CAACoB,qBAAqB,EAAE,IAAI,CAAChB,OAAO,EAAEe,KAAK,CAACf,OAAO,CAAC;EACzE;AACJ;AACAb,OAAO,CAACK,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,UAAU,CAAC;EACb;EACAO,WAAWA,CAAA,EAAG,CAAE;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOmB,MAAMA,CAAClB,MAAM,EAAE;IAClB,OAAO,IAAIP,WAAW,CAACO,MAAM,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOmB,MAAMA,CAAA,EAAG;IACZ,OAAO7B,eAAe,CAAC8B,eAAe;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,eAAeA,CAAA,EAAG;IACrB,OAAOC,wBAAwB,CAACC,yBAAyB;EAC7D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,SAASA,CAACrB,CAAC,EAAE;IAChB;IACA,CAAC,CAAC,EAAEL,UAAU,CAAC2B,4BAA4B,EAAE,sBAAsB,EAAEC,SAAS,EAAE,CAAC,CAAC;IAClF,OAAO,IAAIC,yBAAyB,CAACxB,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = require(\"abort-controller\");\nconst stream_1 = require(\"stream\");\nconst fallbackRest_1 = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nclass StreamArrayParser extends stream_1.Transform {\n  /**\n   * StreamArrayParser processes array of valid JSON objects in random chunks\n   * through readable stream, and produces a stream of plain Javascript objects\n   * where it converted from the corresponding protobuf message instance.\n   *\n   * The default JSON parser decodes the input stream under the\n   * following rules:\n   *  1. The stream represents a valid JSON array (must start with a \"[\" and\n   * close with the corresponding \"]\"). Each element of this array is assumed to\n   * be either an array or an object, and will be decoded as a JS object and\n   *    delivered.\n   *  2. All JSON elements in the buffer will be decoded and delivered in a\n   * stream.\n   *\n   * @private\n   * @constructor\n   * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n   * @param {Object} options - the options pass to Transform Stream. See more\n   * details\n   * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n   */\n  constructor(rpc, options) {\n    super(Object.assign({}, options, {\n      readableObjectMode: true\n    }));\n    this._done = false;\n    this._prevBlock = Buffer.from('');\n    this._isInString = false;\n    this._isSkipped = false;\n    this._level = 0;\n    this.rpc = rpc;\n    this.cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();\n    this.cancelSignal = this.cancelController.signal;\n    this.cancelRequested = false;\n  }\n  _transform(chunk, _, callback) {\n    let objectStart = 0;\n    let curIndex = 0;\n    if (this._level === 0 && curIndex === 0) {\n      if (String.fromCharCode(chunk[0]) !== '[') {\n        this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n      }\n      curIndex++;\n      this._level++;\n    }\n    while (curIndex < chunk.length) {\n      const curValue = String.fromCharCode(chunk[curIndex]);\n      if (!this._isSkipped) {\n        switch (curValue) {\n          case '{':\n            // Check if it's in string, we ignore the curly brace in string.\n            // Otherwise the object level++.\n            if (!this._isInString) {\n              this._level++;\n            }\n            if (!this._isInString && this._level === 2) {\n              objectStart = curIndex;\n            }\n            break;\n          case '\"':\n            // Flip the string status\n            this._isInString = !this._isInString;\n            break;\n          case '}':\n            // check if it's in string\n            // if true, do nothing\n            // if false and level = 0, push data\n            if (!this._isInString) {\n              this._level--;\n            }\n            if (!this._isInString && this._level === 1) {\n              // find a object\n              const objBuff = Buffer.concat([this._prevBlock, chunk.slice(objectStart, curIndex + 1)]);\n              try {\n                // HTTP response.ok is true.\n                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\n                this.push(msgObj);\n              } catch (err) {\n                this.emit('error', err);\n              }\n              objectStart = curIndex + 1;\n              this._prevBlock = Buffer.from('');\n            }\n            break;\n          case ']':\n            if (!this._isInString && this._level === 1) {\n              this._done = true;\n              this.push(null);\n            }\n            break;\n          case '\\\\':\n            // Escaping escape character.\n            this._isSkipped = true;\n            break;\n          default:\n            break;\n        }\n      } else {\n        this._isSkipped = false;\n      }\n      curIndex++;\n    }\n    if (this._level > 1) {\n      this._prevBlock = Buffer.concat([this._prevBlock, chunk.slice(objectStart, curIndex)]);\n    }\n    callback();\n  }\n  _flush(callback) {\n    callback();\n  }\n  cancel() {\n    this._done = true;\n    this.cancelRequested = true;\n    this.cancelController.abort();\n    this.end();\n  }\n}\nexports.StreamArrayParser = StreamArrayParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamArrayParser","abort_controller_1","require","stream_1","fallbackRest_1","featureDetection_1","Transform","constructor","rpc","options","assign","readableObjectMode","_done","_prevBlock","Buffer","from","_isInString","_isSkipped","_level","cancelController","hasAbortController","AbortController","cancelSignal","signal","cancelRequested","_transform","chunk","_","callback","objectStart","curIndex","String","fromCharCode","emit","Error","length","curValue","objBuff","concat","slice","msgObj","decodeResponse","push","err","_flush","cancel","abort","end"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/streamArrayParser.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = require(\"abort-controller\");\nconst stream_1 = require(\"stream\");\nconst fallbackRest_1 = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nclass StreamArrayParser extends stream_1.Transform {\n    /**\n     * StreamArrayParser processes array of valid JSON objects in random chunks\n     * through readable stream, and produces a stream of plain Javascript objects\n     * where it converted from the corresponding protobuf message instance.\n     *\n     * The default JSON parser decodes the input stream under the\n     * following rules:\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\n     * close with the corresponding \"]\"). Each element of this array is assumed to\n     * be either an array or an object, and will be decoded as a JS object and\n     *    delivered.\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\n     * stream.\n     *\n     * @private\n     * @constructor\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n     * @param {Object} options - the options pass to Transform Stream. See more\n     * details\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n     */\n    constructor(rpc, options) {\n        super(Object.assign({}, options, { readableObjectMode: true }));\n        this._done = false;\n        this._prevBlock = Buffer.from('');\n        this._isInString = false;\n        this._isSkipped = false;\n        this._level = 0;\n        this.rpc = rpc;\n        this.cancelController = (0, featureDetection_1.hasAbortController)()\n            ? new AbortController()\n            : new abort_controller_1.AbortController();\n        this.cancelSignal = this.cancelController.signal;\n        this.cancelRequested = false;\n    }\n    _transform(chunk, _, callback) {\n        let objectStart = 0;\n        let curIndex = 0;\n        if (this._level === 0 && curIndex === 0) {\n            if (String.fromCharCode(chunk[0]) !== '[') {\n                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n            }\n            curIndex++;\n            this._level++;\n        }\n        while (curIndex < chunk.length) {\n            const curValue = String.fromCharCode(chunk[curIndex]);\n            if (!this._isSkipped) {\n                switch (curValue) {\n                    case '{':\n                        // Check if it's in string, we ignore the curly brace in string.\n                        // Otherwise the object level++.\n                        if (!this._isInString) {\n                            this._level++;\n                        }\n                        if (!this._isInString && this._level === 2) {\n                            objectStart = curIndex;\n                        }\n                        break;\n                    case '\"':\n                        // Flip the string status\n                        this._isInString = !this._isInString;\n                        break;\n                    case '}':\n                        // check if it's in string\n                        // if true, do nothing\n                        // if false and level = 0, push data\n                        if (!this._isInString) {\n                            this._level--;\n                        }\n                        if (!this._isInString && this._level === 1) {\n                            // find a object\n                            const objBuff = Buffer.concat([\n                                this._prevBlock,\n                                chunk.slice(objectStart, curIndex + 1),\n                            ]);\n                            try {\n                                // HTTP response.ok is true.\n                                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\n                                this.push(msgObj);\n                            }\n                            catch (err) {\n                                this.emit('error', err);\n                            }\n                            objectStart = curIndex + 1;\n                            this._prevBlock = Buffer.from('');\n                        }\n                        break;\n                    case ']':\n                        if (!this._isInString && this._level === 1) {\n                            this._done = true;\n                            this.push(null);\n                        }\n                        break;\n                    case '\\\\':\n                        // Escaping escape character.\n                        this._isSkipped = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                this._isSkipped = false;\n            }\n            curIndex++;\n        }\n        if (this._level > 1) {\n            this._prevBlock = Buffer.concat([\n                this._prevBlock,\n                chunk.slice(objectStart, curIndex),\n            ]);\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback();\n    }\n    cancel() {\n        this._done = true;\n        this.cancelRequested = true;\n        this.cancelController.abort();\n        this.end();\n    }\n}\nexports.StreamArrayParser = StreamArrayParser;\n//# sourceMappingURL=streamArrayParser.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
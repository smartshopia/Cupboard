{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nexports.parseGetAllArguments = parseGetAllArguments;\nconst backoff_1 = require(\"./backoff\");\nconst index_1 = require(\"./index\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst aggregate_query_1 = require(\"./reference/aggregate-query\");\nconst document_reference_1 = require(\"./reference/document-reference\");\nconst query_1 = require(\"./reference/query\");\nconst helpers_1 = require(\"./reference/helpers\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst document_reader_1 = require(\"./document-reader\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\nconst READ_ONLY_WRITE_ERROR_MSG = 'Firestore read-only transactions cannot execute writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\nclass Transaction {\n  /**\n   * @private\n   *\n   * @param firestore The Firestore Database client.\n   * @param requestTag A unique client-assigned identifier for the scope of\n   * this transaction.\n   * @param transactionOptions The user-defined options for this transaction.\n   */\n  constructor(firestore, requestTag, transactionOptions) {\n    this._maxAttempts = index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n    this._firestore = firestore;\n    this._requestTag = requestTag;\n    if (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.readOnly) {\n      // Avoid initialising write batch and backoff unnecessarily for read-only transactions\n      this._maxAttempts = 1;\n      this._readOnlyReadTime = transactionOptions.readTime;\n    } else {\n      this._maxAttempts = (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.maxAttempts) || index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n      this._writeBatch = firestore.batch();\n      this._backoff = new backoff_1.ExponentialBackoff();\n    }\n  }\n  /**\n   * Retrieve a document or a query result from the database. Holds a\n   * pessimistic lock on all returned documents.\n   *\n   * @param {DocumentReference|Query} refOrQuery The document or query to\n   * return.\n   * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n   * QuerySnapshot for the returned documents.\n   *\n   * @example\n   * ```\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   * ```\n   */\n  get(refOrQuery) {\n    if (this._writeBatch && !this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n    if (refOrQuery instanceof document_reference_1.DocumentReference) {\n      return this.withLazyStartedTransaction(refOrQuery, this.getSingleFn);\n    }\n    if (refOrQuery instanceof query_1.Query || refOrQuery instanceof aggregate_query_1.AggregateQuery) {\n      return this.withLazyStartedTransaction(refOrQuery, this.getQueryFn);\n    }\n    throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference, Query, or AggregateQuery.');\n  }\n  /**\n   * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n   * all returned documents.\n   *\n   * The first argument is required and must be of type `DocumentReference`\n   * followed by any additional `DocumentReference` documents. If used, the\n   * optional `ReadOptions` must be the last argument.\n   *\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n   * `DocumentReferences` to receive, followed by an optional field mask.\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n   * contains an array with the resulting document snapshots.\n   *\n   * @example\n   * ```\n   * let firstDoc = firestore.doc('col/doc1');\n   * let secondDoc = firestore.doc('col/doc2');\n   * let resultDoc = firestore.doc('col/doc3');\n   *\n   * firestore.runTransaction(transaction => {\n   *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n   *     transaction.set(resultDoc, {\n   *       sum: docs[0].get('count') + docs[1].get('count')\n   *     });\n   *   });\n   * });\n   * ```\n   */\n  getAll(...documentRefsOrReadOptions) {\n    if (this._writeBatch && !this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n    (0, validate_1.validateMinNumberOfArguments)('Transaction.getAll', documentRefsOrReadOptions, 1);\n    return this.withLazyStartedTransaction(parseGetAllArguments(documentRefsOrReadOptions), this.getBatchFn);\n  }\n  /**\n   * Create the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The operation will\n   * fail the transaction if a document exists at the specified location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {DocumentData} data The object data to serialize as the document.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * ```\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (!doc.exists) {\n   *       transaction.create(documentRef, { foo: 'bar' });\n   *     }\n   *   });\n   * });\n   * ```\n   */\n  create(documentRef, data) {\n    if (!this._writeBatch) {\n      throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n    }\n    this._writeBatch.create(documentRef, data);\n    return this;\n  }\n  /**\n   * Writes to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document\n   * does not exist yet, it will be created. If you pass\n   * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n   * existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {T|Partial<T>} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call remain\n   * untouched. If your input sets any field to an empty map, all nested fields\n   * are overwritten.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n   * set() only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched. If your input sets any field to\n   * an empty map, all nested fields are overwritten.\n   * @throws {Error} If the provided input is not a valid Firestore document.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * ```\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.set(documentRef, { foo: 'bar' });\n   *   return Promise.resolve();\n   * });\n   * ```\n   */\n  set(documentRef, data, options) {\n    if (!this._writeBatch) {\n      throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n    }\n    if (options) {\n      this._writeBatch.set(documentRef, data, options);\n    } else {\n      this._writeBatch.set(documentRef, data);\n    }\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The update will\n   * fail if applied to a document that does not exist.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object\n   * containing the fields and values with which to update the document\n   * or the path of the first field to update.\n   * @param {\n   * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n   * An alternating list of field paths and values to update or a Precondition\n   * to to enforce on this update.\n   * @throws {Error} If the provided input is not valid Firestore data.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * ```\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   * ```\n   */\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    if (!this._writeBatch) {\n      throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n    }\n    // eslint-disable-next-line prefer-rest-params\n    (0, validate_1.validateMinNumberOfArguments)('Transaction.update', arguments, 2);\n    this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided [DocumentReference]\n   * {@link DocumentReference}.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the transaction if the\n   * document doesn't exist or was last updated at a different time.\n   * @param {boolean=} precondition.exists If set, enforces that the target\n   * document must or must not exist.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * ```\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.delete(documentRef);\n   *   return Promise.resolve();\n   * });\n   * ```\n   */\n  delete(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  documentRef, precondition) {\n    if (!this._writeBatch) {\n      throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n    }\n    this._writeBatch.delete(documentRef, precondition);\n    return this;\n  }\n  /**\n   * Commits all queued-up changes in this transaction and releases all locks.\n   *\n   * @private\n   * @internal\n   */\n  async commit() {\n    if (!this._writeBatch) {\n      throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n    }\n    // If we have not performed any reads in this particular attempt\n    // then the writes will be atomically committed without a transaction ID\n    let transactionId;\n    if (this._transactionIdPromise) {\n      transactionId = await this._transactionIdPromise;\n    } else if (this._writeBatch.isEmpty) {\n      // If we have not started a transaction (no reads) and we have no writes\n      // then the commit is a no-op (success)\n      return;\n    }\n    await this._writeBatch._commit({\n      transactionId,\n      requestTag: this._requestTag\n    });\n    this._transactionIdPromise = undefined;\n    this._prevTransactionId = transactionId;\n  }\n  /**\n   * Releases all locks and rolls back this transaction. The rollback process\n   * is completed asynchronously and this function resolves before the operation\n   * is completed.\n   *\n   * @private\n   * @internal\n   */\n  async rollback() {\n    // No need to roll back if we have not lazily started the transaction\n    // or if we are read only\n    if (!this._transactionIdPromise || !this._writeBatch) {\n      return;\n    }\n    let transactionId;\n    try {\n      transactionId = await this._transactionIdPromise;\n    } catch (_a) {\n      // This means the initial read operation rejected\n      // and we do not have a transaction ID to roll back\n      this._transactionIdPromise = undefined;\n      return;\n    }\n    const request = {\n      database: this._firestore.formattedName,\n      transaction: transactionId\n    };\n    this._transactionIdPromise = undefined;\n    this._prevTransactionId = transactionId;\n    // We don't need to wait for rollback to completed before continuing.\n    // If there are any locks held, then rollback will eventually release them.\n    // Rollback can be done concurrently thereby reducing latency caused by\n    // otherwise blocking.\n    this._firestore.request('rollback', request, this._requestTag).catch(err => {\n      (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Best effort to rollback failed with error:', err);\n    });\n  }\n  /**\n   * Executes `updateFunction()` and commits the transaction with retry.\n   *\n   * @private\n   * @internal\n   * @param updateFunction The user function to execute within the transaction\n   * context.\n   */\n  async runTransaction(updateFunction) {\n    // No backoff is set for readonly transactions (i.e. attempts == 1)\n    if (!this._writeBatch) {\n      return this.runTransactionOnce(updateFunction);\n    }\n    let lastError = undefined;\n    for (let attempt = 0; attempt < this._maxAttempts; ++attempt) {\n      try {\n        if (lastError) {\n          (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n        }\n        this._writeBatch._reset();\n        await maybeBackoff(this._backoff, lastError);\n        return await this.runTransactionOnce(updateFunction);\n      } catch (err) {\n        lastError = err;\n        if (!isRetryableTransactionError(err)) {\n          break;\n        }\n      }\n    }\n    (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n    return Promise.reject(lastError);\n  }\n  /**\n   * Make single attempt to execute `updateFunction()` and commit the\n   * transaction. Will rollback upon error.\n   *\n   * @private\n   * @internal\n   * @param updateFunction The user function to execute within the transaction\n   * context.\n   */\n  async runTransactionOnce(updateFunction) {\n    try {\n      const promise = updateFunction(this);\n      if (!(promise instanceof Promise)) {\n        throw new Error('You must return a Promise in your transaction()-callback.');\n      }\n      const result = await promise;\n      if (this._writeBatch) {\n        await this.commit();\n      }\n      return result;\n    } catch (err) {\n      (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n      await this.rollback();\n      return Promise.reject(err);\n    }\n  }\n  /**\n   * Given a function that performs a read operation, ensures that the first one\n   * is provided with new transaction options and all subsequent ones are queued\n   * upon the resulting transaction ID.\n   */\n  withLazyStartedTransaction(param, resultFn) {\n    if (this._transactionIdPromise) {\n      // Simply queue this subsequent read operation after the first read\n      // operation has resolved and we don't expect a transaction ID in the\n      // response because we are not starting a new transaction\n      return this._transactionIdPromise.then(opts => resultFn.call(this, param, opts)).then(r => r.result);\n    } else {\n      if (this._readOnlyReadTime) {\n        // We do not start a transaction for read-only transactions\n        // do not set _prevTransactionId\n        return resultFn.call(this, param, this._readOnlyReadTime).then(r => r.result);\n      } else {\n        // This is the first read of the transaction so we create the appropriate\n        // options for lazily starting the transaction inside this first read op\n        const opts = {};\n        if (this._writeBatch) {\n          opts.readWrite = this._prevTransactionId ? {\n            retryTransaction: this._prevTransactionId\n          } : {};\n        } else {\n          opts.readOnly = {};\n        }\n        const resultPromise = resultFn.call(this, param, opts);\n        // Ensure the _transactionIdPromise is set synchronously so that\n        // subsequent operations will not race to start another transaction\n        this._transactionIdPromise = resultPromise.then(r => {\n          if (!r.transaction) {\n            // Illegal state\n            // The read operation was provided with new transaction options but did not return a transaction ID\n            // Rejecting here will cause all queued reads to reject\n            throw new Error('Transaction ID was missing from server response');\n          }\n          return r.transaction;\n        });\n        return resultPromise.then(r => r.result);\n      }\n    }\n  }\n  async getSingleFn(document, opts) {\n    const documentReader = new document_reader_1.DocumentReader(this._firestore, [document], undefined, opts);\n    const {\n      transaction,\n      result: [result]\n    } = await documentReader._get(this._requestTag);\n    return {\n      transaction,\n      result\n    };\n  }\n  async getBatchFn({\n    documents,\n    fieldMask\n  }, opts) {\n    const documentReader = new document_reader_1.DocumentReader(this._firestore, documents, fieldMask, opts);\n    return documentReader._get(this._requestTag);\n  }\n  async getQueryFn(query, opts) {\n    return query._get(opts);\n  }\n}\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @internal\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n  let documents;\n  let readOptions = undefined;\n  if (Array.isArray(documentRefsOrReadOptions[0])) {\n    throw new Error('getAll() no longer accepts an array as its first argument. ' + 'Please unpack your array and call getAll() with individual arguments.');\n  }\n  if (documentRefsOrReadOptions.length > 0 && (0, util_1.isPlainObject)(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n    readOptions = documentRefsOrReadOptions.pop();\n    documents = documentRefsOrReadOptions;\n  } else {\n    documents = documentRefsOrReadOptions;\n  }\n  for (let i = 0; i < documents.length; ++i) {\n    (0, helpers_1.validateDocumentReference)(i, documents[i]);\n  }\n  validateReadOptions('options', readOptions, {\n    optional: true\n  });\n  const fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath)) : undefined;\n  return {\n    fieldMask,\n    documents\n  };\n}\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\nfunction validateReadOptions(arg, value, options) {\n  if (!(0, validate_1.validateOptional)(value, options)) {\n    if (!(0, util_1.isObject)(value)) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} Input is not an object.'`);\n    }\n    const options = value;\n    if (options.fieldMask !== undefined) {\n      if (!Array.isArray(options.fieldMask)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not an array.`);\n      }\n      for (let i = 0; i < options.fieldMask.length; ++i) {\n        try {\n          (0, path_1.validateFieldPath)(i, options.fieldMask[i]);\n        } catch (err) {\n          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n        }\n      }\n    }\n  }\n}\nfunction isRetryableTransactionError(error) {\n  if (error.code !== undefined) {\n    // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n    switch (error.code) {\n      case 10 /* StatusCode.ABORTED */:\n      case 1 /* StatusCode.CANCELLED */:\n      case 2 /* StatusCode.UNKNOWN */:\n      case 4 /* StatusCode.DEADLINE_EXCEEDED */:\n      case 13 /* StatusCode.INTERNAL */:\n      case 14 /* StatusCode.UNAVAILABLE */:\n      case 16 /* StatusCode.UNAUTHENTICATED */:\n      case 8 /* StatusCode.RESOURCE_EXHAUSTED */:\n        return true;\n      case 3 /* StatusCode.INVALID_ARGUMENT */:\n        // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n        // IDs that have expired. While INVALID_ARGUMENT is generally not\n        // retryable, we retry this specific case.\n        return !!error.message.match(/transaction has expired/);\n      default:\n        return false;\n    }\n  }\n  return false;\n}\n/**\n * Delays further operations based on the provided error.\n *\n * @private\n * @internal\n * @return A Promise that resolves after the delay expired.\n */\nasync function maybeBackoff(backoff, error) {\n  if ((error === null || error === void 0 ? void 0 : error.code) === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n    backoff.resetToMax();\n  }\n  await backoff.backoffAndWait();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Transaction","parseGetAllArguments","backoff_1","require","index_1","logger_1","path_1","aggregate_query_1","document_reference_1","query_1","helpers_1","util_1","validate_1","document_reader_1","READ_AFTER_WRITE_ERROR_MSG","READ_ONLY_WRITE_ERROR_MSG","constructor","firestore","requestTag","transactionOptions","_maxAttempts","DEFAULT_MAX_TRANSACTION_ATTEMPTS","_firestore","_requestTag","readOnly","_readOnlyReadTime","readTime","maxAttempts","_writeBatch","batch","_backoff","ExponentialBackoff","get","refOrQuery","isEmpty","Error","DocumentReference","withLazyStartedTransaction","getSingleFn","Query","AggregateQuery","getQueryFn","getAll","documentRefsOrReadOptions","validateMinNumberOfArguments","getBatchFn","create","documentRef","data","set","options","update","dataOrField","preconditionOrValues","arguments","delete","precondition","commit","transactionId","_transactionIdPromise","_commit","undefined","_prevTransactionId","rollback","_a","request","database","formattedName","transaction","catch","err","logger","runTransaction","updateFunction","runTransactionOnce","lastError","attempt","_reset","maybeBackoff","isRetryableTransactionError","Promise","reject","promise","result","param","resultFn","then","opts","call","r","readWrite","retryTransaction","resultPromise","document","documentReader","DocumentReader","_get","documents","fieldMask","query","readOptions","Array","isArray","length","isPlainObject","pop","i","validateDocumentReference","validateReadOptions","optional","map","fieldPath","FieldPath","fromArgument","arg","validateOptional","isObject","invalidArgumentMessage","validateFieldPath","message","error","code","match","backoff","resetToMax","backoffAndWait"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/transaction.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nexports.parseGetAllArguments = parseGetAllArguments;\nconst backoff_1 = require(\"./backoff\");\nconst index_1 = require(\"./index\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst aggregate_query_1 = require(\"./reference/aggregate-query\");\nconst document_reference_1 = require(\"./reference/document-reference\");\nconst query_1 = require(\"./reference/query\");\nconst helpers_1 = require(\"./reference/helpers\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst document_reader_1 = require(\"./document-reader\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\nconst READ_ONLY_WRITE_ERROR_MSG = 'Firestore read-only transactions cannot execute writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\nclass Transaction {\n    /**\n     * @private\n     *\n     * @param firestore The Firestore Database client.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     * @param transactionOptions The user-defined options for this transaction.\n     */\n    constructor(firestore, requestTag, transactionOptions) {\n        this._maxAttempts = index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n        this._firestore = firestore;\n        this._requestTag = requestTag;\n        if (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.readOnly) {\n            // Avoid initialising write batch and backoff unnecessarily for read-only transactions\n            this._maxAttempts = 1;\n            this._readOnlyReadTime = transactionOptions.readTime;\n        }\n        else {\n            this._maxAttempts =\n                (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.maxAttempts) || index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n            this._writeBatch = firestore.batch();\n            this._backoff = new backoff_1.ExponentialBackoff();\n        }\n    }\n    /**\n     * Retrieve a document or a query result from the database. Holds a\n     * pessimistic lock on all returned documents.\n     *\n     * @param {DocumentReference|Query} refOrQuery The document or query to\n     * return.\n     * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n     * QuerySnapshot for the returned documents.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    get(refOrQuery) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        if (refOrQuery instanceof document_reference_1.DocumentReference) {\n            return this.withLazyStartedTransaction(refOrQuery, this.getSingleFn);\n        }\n        if (refOrQuery instanceof query_1.Query || refOrQuery instanceof aggregate_query_1.AggregateQuery) {\n            return this.withLazyStartedTransaction(refOrQuery, this.getQueryFn);\n        }\n        throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference, Query, or AggregateQuery.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[0].get('count') + docs[1].get('count')\n     *     });\n     *   });\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.getAll', documentRefsOrReadOptions, 1);\n        return this.withLazyStartedTransaction(parseGetAllArguments(documentRefsOrReadOptions), this.getBatchFn);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.create(documentRef, data);\n        return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        if (options) {\n            this._writeBatch.set(documentRef, data, options);\n        }\n        else {\n            this._writeBatch.set(documentRef, data);\n        }\n        return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.update', arguments, 2);\n        this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n        return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    delete(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, precondition) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.delete(documentRef, precondition);\n        return this;\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     * @internal\n     */\n    async commit() {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        // If we have not performed any reads in this particular attempt\n        // then the writes will be atomically committed without a transaction ID\n        let transactionId;\n        if (this._transactionIdPromise) {\n            transactionId = await this._transactionIdPromise;\n        }\n        else if (this._writeBatch.isEmpty) {\n            // If we have not started a transaction (no reads) and we have no writes\n            // then the commit is a no-op (success)\n            return;\n        }\n        await this._writeBatch._commit({\n            transactionId,\n            requestTag: this._requestTag,\n        });\n        this._transactionIdPromise = undefined;\n        this._prevTransactionId = transactionId;\n    }\n    /**\n     * Releases all locks and rolls back this transaction. The rollback process\n     * is completed asynchronously and this function resolves before the operation\n     * is completed.\n     *\n     * @private\n     * @internal\n     */\n    async rollback() {\n        // No need to roll back if we have not lazily started the transaction\n        // or if we are read only\n        if (!this._transactionIdPromise || !this._writeBatch) {\n            return;\n        }\n        let transactionId;\n        try {\n            transactionId = await this._transactionIdPromise;\n        }\n        catch (_a) {\n            // This means the initial read operation rejected\n            // and we do not have a transaction ID to roll back\n            this._transactionIdPromise = undefined;\n            return;\n        }\n        const request = {\n            database: this._firestore.formattedName,\n            transaction: transactionId,\n        };\n        this._transactionIdPromise = undefined;\n        this._prevTransactionId = transactionId;\n        // We don't need to wait for rollback to completed before continuing.\n        // If there are any locks held, then rollback will eventually release them.\n        // Rollback can be done concurrently thereby reducing latency caused by\n        // otherwise blocking.\n        this._firestore\n            .request('rollback', request, this._requestTag)\n            .catch(err => {\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Best effort to rollback failed with error:', err);\n        });\n    }\n    /**\n     * Executes `updateFunction()` and commits the transaction with retry.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransaction(updateFunction) {\n        // No backoff is set for readonly transactions (i.e. attempts == 1)\n        if (!this._writeBatch) {\n            return this.runTransactionOnce(updateFunction);\n        }\n        let lastError = undefined;\n        for (let attempt = 0; attempt < this._maxAttempts; ++attempt) {\n            try {\n                if (lastError) {\n                    (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n                }\n                this._writeBatch._reset();\n                await maybeBackoff(this._backoff, lastError);\n                return await this.runTransactionOnce(updateFunction);\n            }\n            catch (err) {\n                lastError = err;\n                if (!isRetryableTransactionError(err)) {\n                    break;\n                }\n            }\n        }\n        (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Make single attempt to execute `updateFunction()` and commit the\n     * transaction. Will rollback upon error.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransactionOnce(updateFunction) {\n        try {\n            const promise = updateFunction(this);\n            if (!(promise instanceof Promise)) {\n                throw new Error('You must return a Promise in your transaction()-callback.');\n            }\n            const result = await promise;\n            if (this._writeBatch) {\n                await this.commit();\n            }\n            return result;\n        }\n        catch (err) {\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n            await this.rollback();\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Given a function that performs a read operation, ensures that the first one\n     * is provided with new transaction options and all subsequent ones are queued\n     * upon the resulting transaction ID.\n     */\n    withLazyStartedTransaction(param, resultFn) {\n        if (this._transactionIdPromise) {\n            // Simply queue this subsequent read operation after the first read\n            // operation has resolved and we don't expect a transaction ID in the\n            // response because we are not starting a new transaction\n            return this._transactionIdPromise\n                .then(opts => resultFn.call(this, param, opts))\n                .then(r => r.result);\n        }\n        else {\n            if (this._readOnlyReadTime) {\n                // We do not start a transaction for read-only transactions\n                // do not set _prevTransactionId\n                return resultFn\n                    .call(this, param, this._readOnlyReadTime)\n                    .then(r => r.result);\n            }\n            else {\n                // This is the first read of the transaction so we create the appropriate\n                // options for lazily starting the transaction inside this first read op\n                const opts = {};\n                if (this._writeBatch) {\n                    opts.readWrite = this._prevTransactionId\n                        ? { retryTransaction: this._prevTransactionId }\n                        : {};\n                }\n                else {\n                    opts.readOnly = {};\n                }\n                const resultPromise = resultFn.call(this, param, opts);\n                // Ensure the _transactionIdPromise is set synchronously so that\n                // subsequent operations will not race to start another transaction\n                this._transactionIdPromise = resultPromise.then(r => {\n                    if (!r.transaction) {\n                        // Illegal state\n                        // The read operation was provided with new transaction options but did not return a transaction ID\n                        // Rejecting here will cause all queued reads to reject\n                        throw new Error('Transaction ID was missing from server response');\n                    }\n                    return r.transaction;\n                });\n                return resultPromise.then(r => r.result);\n            }\n        }\n    }\n    async getSingleFn(document, opts) {\n        const documentReader = new document_reader_1.DocumentReader(this._firestore, [document], undefined, opts);\n        const { transaction, result: [result], } = await documentReader._get(this._requestTag);\n        return { transaction, result };\n    }\n    async getBatchFn({ documents, fieldMask, }, opts) {\n        const documentReader = new document_reader_1.DocumentReader(this._firestore, documents, fieldMask, opts);\n        return documentReader._get(this._requestTag);\n    }\n    async getQueryFn(query, opts) {\n        return query._get(opts);\n    }\n}\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @internal\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n    let documents;\n    let readOptions = undefined;\n    if (Array.isArray(documentRefsOrReadOptions[0])) {\n        throw new Error('getAll() no longer accepts an array as its first argument. ' +\n            'Please unpack your array and call getAll() with individual arguments.');\n    }\n    if (documentRefsOrReadOptions.length > 0 &&\n        (0, util_1.isPlainObject)(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n        readOptions = documentRefsOrReadOptions.pop();\n        documents = documentRefsOrReadOptions;\n    }\n    else {\n        documents = documentRefsOrReadOptions;\n    }\n    for (let i = 0; i < documents.length; ++i) {\n        (0, helpers_1.validateDocumentReference)(i, documents[i]);\n    }\n    validateReadOptions('options', readOptions, { optional: true });\n    const fieldMask = readOptions && readOptions.fieldMask\n        ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath))\n        : undefined;\n    return { fieldMask, documents };\n}\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\nfunction validateReadOptions(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} Input is not an object.'`);\n        }\n        const options = value;\n        if (options.fieldMask !== undefined) {\n            if (!Array.isArray(options.fieldMask)) {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not an array.`);\n            }\n            for (let i = 0; i < options.fieldMask.length; ++i) {\n                try {\n                    (0, path_1.validateFieldPath)(i, options.fieldMask[i]);\n                }\n                catch (err) {\n                    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n                }\n            }\n        }\n    }\n}\nfunction isRetryableTransactionError(error) {\n    if (error.code !== undefined) {\n        // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n        switch (error.code) {\n            case 10 /* StatusCode.ABORTED */:\n            case 1 /* StatusCode.CANCELLED */:\n            case 2 /* StatusCode.UNKNOWN */:\n            case 4 /* StatusCode.DEADLINE_EXCEEDED */:\n            case 13 /* StatusCode.INTERNAL */:\n            case 14 /* StatusCode.UNAVAILABLE */:\n            case 16 /* StatusCode.UNAUTHENTICATED */:\n            case 8 /* StatusCode.RESOURCE_EXHAUSTED */:\n                return true;\n            case 3 /* StatusCode.INVALID_ARGUMENT */:\n                // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n                // IDs that have expired. While INVALID_ARGUMENT is generally not\n                // retryable, we retry this specific case.\n                return !!error.message.match(/transaction has expired/);\n            default:\n                return false;\n        }\n    }\n    return false;\n}\n/**\n * Delays further operations based on the provided error.\n *\n * @private\n * @internal\n * @return A Promise that resolves after the delay expired.\n */\nasync function maybeBackoff(backoff, error) {\n    if ((error === null || error === void 0 ? void 0 : error.code) === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n        backoff.resetToMax();\n    }\n    await backoff.backoffAndWait();\n}\n//# sourceMappingURL=transaction.js.map"],"mappings":"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K,CAACrB,0BAA0B,CAAC;IAC/C;IACA,CAAC,CAAC,EAAEF,UAAU,CAACgC,4BAA4B,EAAE,oBAAoB,EAAED,yBAAyB,EAAE,CAAC,CAAC;IAChG,OAAO,IAAI,CAACN,0BAA0B,CAACpC,oBAAoB,CAAC0C,yBAAyB,CAAC,EAAE,IAAI,CAACE,UAAU,CAAC;EAC5G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACC,WAAW,EAAEC,IAAI,EAAE;IACtB,IAAI,CAAC,IAAI,CAACpB,WAAW,EAAE;MACnB,MAAM,IAAIO,KAAK,CAACpB,yBAAyB,CAAC;IAC9C;IACA,IAAI,CAACa,WAAW,CAACkB,MAAM,CAACC,WAAW,EAAEC,IAAI,CAAC;IAC1C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACF,WAAW,EAAEC,IAAI,EAAEE,OAAO,EAAE;IAC5B,IAAI,CAAC,IAAI,CAACtB,WAAW,EAAE;MACnB,MAAM,IAAIO,KAAK,CAACpB,yBAAyB,CAAC;IAC9C;IACA,IAAImC,OAAO,EAAE;MACT,IAAI,CAACtB,WAAW,CAACqB,GAAG,CAACF,WAAW,EAAEC,IAAI,EAAEE,OAAO,CAAC;IACpD,CAAC,MACI;MACD,IAAI,CAACtB,WAAW,CAACqB,GAAG,CAACF,WAAW,EAAEC,IAAI,CAAC;IAC3C;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
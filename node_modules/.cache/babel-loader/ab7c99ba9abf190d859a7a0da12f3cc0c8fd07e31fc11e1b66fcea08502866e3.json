{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\n/**\n * A `Filter` represents a restriction on one or more field values and can\n * be used to refine the results of a {@link Query}.\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new {@link Query} instance that also contains this `Filter`.\n */\nclass Filter {\n  /**\n   * Creates and returns a new [Filter]{@link Filter}, which can be\n   * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\n   * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\n   * it requires that documents must contain the specified field and that its value should\n   * satisfy the relation constraint provided.\n   *\n   * @param {string|FieldPath} fieldPath The name of a property value to compare.\n   * @param {string} opStr A comparison operation in the form of a string.\n   * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\n   * \"in\", \"not-in\", and \"array-contains-any\".\n   * @param {*} value The value to which to compare the field for inclusion in\n   * a query.\n   * @returns {Filter} The created Filter.\n   *\n   * @example\n   * ```\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   * ```\n   */\n  static where(fieldPath, opStr, value) {\n    return new UnaryFilter(fieldPath, opStr, value);\n  }\n  /**\n   * Creates and returns a new [Filter]{@link Filter} that is a\n   * disjunction of the given {@link Filter}s. A disjunction filter includes\n   * a document if it satisfies any of the given {@link Filter}s.\n   *\n   * The returned Filter can be applied to [Query.where()]{@link Query#where},\n   * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n   * applied to a [Query]{@link Query} it requires that documents must satisfy\n   * one of the provided {@link Filter}s.\n   *\n   * @param {...Filter} filters  Optional. The {@link Filter}s\n   * for OR operation. These must be created with calls to {@link Filter#where},\n   * {@link Filter#or}, or {@link Filter#and}.\n   * @returns {Filter} The created {@link Filter}.\n   *\n   * @example\n   * ```\n   * let collectionRef = firestore.collection('col');\n   *\n   * // doc.foo == 'bar' || doc.baz > 0\n   * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n   *\n   * collectionRef.where(orFilter).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   * ```\n   */\n  static or(...filters) {\n    return new CompositeFilter(filters, 'OR');\n  }\n  /**\n   * Creates and returns a new [Filter]{@link Filter} that is a\n   * conjunction of the given {@link Filter}s. A conjunction filter includes\n   * a document if it satisfies all of the given {@link Filter}s.\n   *\n   * The returned Filter can be applied to [Query.where()]{@link Query#where},\n   * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n   * applied to a [Query]{@link Query} it requires that documents must satisfy\n   * one of the provided {@link Filter}s.\n   *\n   * @param {...Filter} filters  Optional. The {@link Filter}s\n   * for AND operation. These must be created with calls to {@link Filter#where},\n   * {@link Filter#or}, or {@link Filter#and}.\n   * @returns {Filter} The created {@link Filter}.\n   *\n   * @example\n   * ```\n   * let collectionRef = firestore.collection('col');\n   *\n   * // doc.foo == 'bar' && doc.baz > 0\n   * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n   *\n   * collectionRef.where(andFilter).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   * ```\n   */\n  static and(...filters) {\n    return new CompositeFilter(filters, 'AND');\n  }\n}\nexports.Filter = Filter;\n/**\n * A `UnaryFilter` represents a restriction on one field value and can\n * be used to refine the results of a {@link Query}.\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\n * be passed to {@link Query#where} to create a new {@link Query} instance\n * that also contains this `UnaryFilter`.\n *\n * @private\n * @internal\n */\nclass UnaryFilter extends Filter {\n  /**\n   @private\n   @internal\n   */\n  constructor(field, operator, value) {\n    super();\n    this.field = field;\n    this.operator = operator;\n    this.value = value;\n  }\n  /**\n   @private\n   @internal\n   */\n  _getField() {\n    return this.field;\n  }\n  /**\n   @private\n   @internal\n   */\n  _getOperator() {\n    return this.operator;\n  }\n  /**\n   @private\n   @internal\n   */\n  _getValue() {\n    return this.value;\n  }\n}\nexports.UnaryFilter = UnaryFilter;\n/**\n * A `CompositeFilter` is used to narrow the set of documents returned\n * by a Firestore query by performing the logical OR or AND of multiple\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new query instance that also contains the `CompositeFilter`.\n *\n * @private\n * @internal\n */\nclass CompositeFilter extends Filter {\n  /**\n   @private\n   @internal\n   */\n  constructor(filters, operator) {\n    super();\n    this.filters = filters;\n    this.operator = operator;\n  }\n  /**\n   @private\n   @internal\n   */\n  _getFilters() {\n    return this.filters;\n  }\n  /**\n   @private\n   @internal\n   */\n  _getOperator() {\n    return this.operator;\n  }\n}\nexports.CompositeFilter = CompositeFilter;","map":{"version":3,"names":["Object","defineProperty","exports","value","CompositeFilter","UnaryFilter","Filter","where","fieldPath","opStr","or","filters","and","constructor","field","operator","_getField","_getOperator","_getValue","_getFilters"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/filter.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\n/**\n * A `Filter` represents a restriction on one or more field values and can\n * be used to refine the results of a {@link Query}.\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new {@link Query} instance that also contains this `Filter`.\n */\nclass Filter {\n    /**\n     * Creates and returns a new [Filter]{@link Filter}, which can be\n     * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\n     * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\n     * it requires that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string.\n     * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\n     * \"in\", \"not-in\", and \"array-contains-any\".\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Filter} The created Filter.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static where(fieldPath, opStr, value) {\n        return new UnaryFilter(fieldPath, opStr, value);\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * disjunction of the given {@link Filter}s. A disjunction filter includes\n     * a document if it satisfies any of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for OR operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' || doc.baz > 0\n     * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(orFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static or(...filters) {\n        return new CompositeFilter(filters, 'OR');\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * conjunction of the given {@link Filter}s. A conjunction filter includes\n     * a document if it satisfies all of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for AND operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' && doc.baz > 0\n     * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(andFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static and(...filters) {\n        return new CompositeFilter(filters, 'AND');\n    }\n}\nexports.Filter = Filter;\n/**\n * A `UnaryFilter` represents a restriction on one field value and can\n * be used to refine the results of a {@link Query}.\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\n * be passed to {@link Query#where} to create a new {@link Query} instance\n * that also contains this `UnaryFilter`.\n *\n * @private\n * @internal\n */\nclass UnaryFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(field, operator, value) {\n        super();\n        this.field = field;\n        this.operator = operator;\n        this.value = value;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getField() {\n        return this.field;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getValue() {\n        return this.value;\n    }\n}\nexports.UnaryFilter = UnaryFilter;\n/**\n * A `CompositeFilter` is used to narrow the set of documents returned\n * by a Firestore query by performing the logical OR or AND of multiple\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new query instance that also contains the `CompositeFilter`.\n *\n * @private\n * @internal\n */\nclass CompositeFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(filters, operator) {\n        super();\n        this.filters = filters;\n        this.operator = operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getFilters() {\n        return this.filters;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n}\nexports.CompositeFilter = CompositeFilter;\n//# sourceMappingURL=filter.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,WAAW,GAAGH,OAAO,CAACI,MAAM,GAAG,KAAK,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,CAAC;EACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,KAAKA,CAACC,SAAS,EAAEC,KAAK,EAAEN,KAAK,EAAE;IAClC,OAAO,IAAIE,WAAW,CAACG,SAAS,EAAEC,KAAK,EAAEN,KAAK,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOO,EAAEA,CAAC,GAAGC,OAAO,EAAE;IAClB,OAAO,IAAIP,eAAe,CAACO,OAAO,EAAE,IAAI,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,GAAGA,CAAC,GAAGD,OAAO,EAAE;IACnB,OAAO,IAAIP,eAAe,CAACO,OAAO,EAAE,KAAK,CAAC;EAC9C;AACJ;AACAT,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,WAAW,SAASC,MAAM,CAAC;EAC7B;AACJ;AACA;AACA;EACIO,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEZ,KAAK,EAAE;IAChC,KAAK,CAAC,CAAC;IACP,IAAI,CAACW,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACZ,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;EACIa,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACF,KAAK;EACrB;EACA;AACJ;AACA;AACA;EACIG,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,QAAQ;EACxB;EACA;AACJ;AACA;AACA;EACIG,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACf,KAAK;EACrB;AACJ;AACAD,OAAO,CAACG,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,eAAe,SAASE,MAAM,CAAC;EACjC;AACJ;AACA;AACA;EACIO,WAAWA,CAACF,OAAO,EAAEI,QAAQ,EAAE;IAC3B,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;EACII,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,OAAO;EACvB;EACA;AACJ;AACA;AACA;EACIM,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,QAAQ;EACxB;AACJ;AACAb,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
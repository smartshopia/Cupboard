{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateQueryOrder = validateQueryOrder;\nexports.validateQueryOperator = validateQueryOperator;\nexports.validateDocumentReference = validateDocumentReference;\nexports.validateQueryValue = validateQueryValue;\nexports.coalesce = coalesce;\nconst validate_1 = require(\"../validate\");\nconst serializer_1 = require(\"../serializer\");\nconst document_reference_1 = require(\"./document-reference\");\nconst constants_1 = require(\"./constants\");\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOrder(arg, op) {\n  // For backwards compatibility, we support both lower and uppercase values.\n  op = typeof op === 'string' ? op.toLowerCase() : op;\n  (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.directionOperators), {\n    optional: true\n  });\n  return op;\n}\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOperator(arg, op, fieldValue) {\n  // For backwards compatibility, we support both `=` and `==` for \"equals\".\n  if (op === '=') {\n    op = '==';\n  }\n  (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.comparisonOperators));\n  if (typeof fieldValue === 'number' && isNaN(fieldValue) && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n  }\n  if (fieldValue === null && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n  }\n  return op;\n}\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\nfunction validateDocumentReference(arg, value) {\n  if (!(value instanceof document_reference_1.DocumentReference)) {\n    throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentReference'));\n  }\n  return value;\n}\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateQueryValue(arg, value, allowUndefined) {\n  (0, serializer_1.validateUserInput)(arg, value, 'query constraint', {\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined\n  });\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\nfunction coalesce(...values) {\n  return values.find(value => value !== undefined);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","validateQueryOrder","validateQueryOperator","validateDocumentReference","validateQueryValue","coalesce","validate_1","require","serializer_1","document_reference_1","constants_1","arg","op","toLowerCase","validateEnumValue","keys","directionOperators","optional","fieldValue","comparisonOperators","isNaN","Error","DocumentReference","invalidArgumentMessage","allowUndefined","validateUserInput","allowDeletes","allowTransforms","values","find","undefined"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/reference/helpers.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateQueryOrder = validateQueryOrder;\nexports.validateQueryOperator = validateQueryOperator;\nexports.validateDocumentReference = validateDocumentReference;\nexports.validateQueryValue = validateQueryValue;\nexports.coalesce = coalesce;\nconst validate_1 = require(\"../validate\");\nconst serializer_1 = require(\"../serializer\");\nconst document_reference_1 = require(\"./document-reference\");\nconst constants_1 = require(\"./constants\");\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOrder(arg, op) {\n    // For backwards compatibility, we support both lower and uppercase values.\n    op = typeof op === 'string' ? op.toLowerCase() : op;\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.directionOperators), { optional: true });\n    return op;\n}\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOperator(arg, op, fieldValue) {\n    // For backwards compatibility, we support both `=` and `==` for \"equals\".\n    if (op === '=') {\n        op = '==';\n    }\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.comparisonOperators));\n    if (typeof fieldValue === 'number' &&\n        isNaN(fieldValue) &&\n        op !== '==' &&\n        op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n    }\n    if (fieldValue === null && op !== '==' && op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n    }\n    return op;\n}\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\nfunction validateDocumentReference(arg, value) {\n    if (!(value instanceof document_reference_1.DocumentReference)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentReference'));\n    }\n    return value;\n}\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateQueryValue(arg, value, allowUndefined) {\n    (0, serializer_1.validateUserInput)(arg, value, 'query constraint', {\n        allowDeletes: 'none',\n        allowTransforms: false,\n        allowUndefined,\n    });\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\nfunction coalesce(...values) {\n    return values.find(value => value !== undefined);\n}\n//# sourceMappingURL=helpers.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = require(\"./field\"),\n  Enum = require(\"./enum\"),\n  OneOf = require(\"./oneof\"),\n  util = require(\"./util\");\nvar Type,\n  // cyclic\n  parse,\n  // might be excluded\n  common; // \"\n\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n\n  /**\r\n   * Deferred extension fields.\r\n   * @type {Field[]}\r\n   */\n  this.deferred = [];\n\n  /**\r\n   * Resolved file names of loaded files.\r\n   * @type {string[]}\r\n   */\n  this.files = [];\n}\n\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\r\n * Fetch content from file path or url\r\n * This method exists so you can override it with your own logic.\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n\n  // Finishes loading by calling the callback (exactly once)\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    if (sync) throw err;\n    var cb = callback;\n    callback = null;\n    cb(err, root);\n  }\n\n  // Bundled definition existence checking\n  function getBundledFileName(filename) {\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) return altname;\n    }\n    return null;\n  }\n\n  // Processes a single file\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n          resolved,\n          i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n    if (!sync && !queued) finish(null, self); // only once anyway\n  }\n\n  // Fetches a single file\n  function fetch(filename, weak) {\n    filename = getBundledFileName(filename) || filename;\n\n    // Skip if already loaded / attempted\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename);\n\n    // Shortcut bundled definitions\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    }\n\n    // Otherwise fetch from disk or network\n    if (sync) {\n      var source;\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n      process(filename, source);\n    } else {\n      ++queued;\n      self.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n        if (!callback) return; // terminated meanwhile\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued)\n            // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n        process(filename, source);\n      });\n    }\n  }\n  var queued = 0;\n\n  // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n  if (util.isString(filename)) filename = [filename];\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n\n/**\r\n * @override\r\n */\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    //do not allow to extend same field twice to prevent the error\n    if (extendedType.get(sisterField.name)) {\n      return true;\n    }\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n  return false;\n}\n\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf)) /* everything else is a namespace */{\n      if (object instanceof Type)\n        // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n      for (var j = 0; j < /* initializes */object.nestedArray.length; ++j)\n      // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n  // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field */object.extend !== undefined) {\n      if ( /* already handled */object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i < /* initializes */object.nestedArray.length; ++i)\n    // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};","map":{"version":3,"names":["module","exports","Root","Namespace","require","prototype","Object","create","constructor","className","Field","Enum","OneOf","util","Type","parse","common","options","call","deferred","files","fromJSON","json","root","setOptions","addJSON","nested","resolvePath","path","resolve","fetch","SYNC","load","filename","callback","undefined","self","asPromise","sync","finish","err","cb","getBundledFileName","idx","lastIndexOf","altname","substring","process","source","isString","charAt","JSON","parsed","resolved","i","imports","length","weakImports","queued","weak","indexOf","push","setTimeout","fs","readFileSync","toString","loadSync","isNode","Error","resolveAll","map","field","extend","parent","fullName","join","exposeRe","tryHandleExtension","extendedType","lookup","sisterField","id","type","rule","get","name","declaringField","extensionField","add","_handleAdd","object","test","values","splice","j","nestedArray","_nestedArray","_handleRemove","remove","index","_configure","Type_","parse_","common_"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/protobufjs/src/root.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n/**\r\n * Fetch content from file path or url\r\n * This method exists so you can override it with your own logic.\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.fetch = util.fetch;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        if (sync)\r\n            throw err;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Bundled definition existence checking\r\n    function getBundledFileName(filename) {\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common) return altname;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n        filename = getBundledFileName(filename) || filename;\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            self.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        //do not allow to extend same field twice to prevent the error\r\n        if (extendedType.get(sisterField.name)) {\r\n            return true;\r\n        }\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
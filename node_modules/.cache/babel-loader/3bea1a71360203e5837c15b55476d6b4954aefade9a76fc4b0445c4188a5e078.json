{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeRequest = encodeRequest;\nexports.decodeResponse = decodeResponse;\n// proto-over-HTTP request encoding and decoding\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nconst googleError_1 = require(\"./googleError\");\nconst transcoding_1 = require(\"./transcoding\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message, {\n    numericEnums\n  });\n  if (!json) {\n    throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n  }\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n  }\n  const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n  if (!transcoded) {\n    throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n  }\n  // If numeric enums feature is requested, add extra parameter to the query string\n  if (numericEnums) {\n    transcoded.queryString = (transcoded.queryString ? `${transcoded.queryString}&` : '') + '$alt=json%3Benum-encoding=int';\n  }\n  // Converts httpMethod to method that permitted in standard Fetch API spec\n  // https://fetch.spec.whatwg.org/#methods\n  const method = transcoded.httpMethod.toUpperCase();\n  const body = JSON.stringify(transcoded.data);\n  const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line n/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n  if (!ok) {\n    const error = googleError_1.GoogleError.parseHttpError(json);\n    throw error;\n  }\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n  if (!message) {\n    throw new Error(`Received null response from RPC ${rpc.name}`);\n  }\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","encodeRequest","decodeResponse","serializer","require","fallback_1","googleError_1","transcoding_1","rpc","protocol","servicePath","servicePort","request","numericEnums","headers","message","resolvedRequestType","fromObject","json","toProto3JSON","Error","name","Array","isArray","transcoded","transcode","parsedOptions","JSON","stringify","queryString","method","httpMethod","toUpperCase","body","data","url","replace","ok","response","decodedString","TextDecoder","decode","parse","error","GoogleError","parseHttpError","fromProto3JSON","resolvedResponseType","toObject","defaultToObjectOptions"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/fallbackRest.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeRequest = encodeRequest;\nexports.decodeResponse = decodeResponse;\n// proto-over-HTTP request encoding and decoding\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nconst googleError_1 = require(\"./googleError\");\nconst transcoding_1 = require(\"./transcoding\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message, {\n        numericEnums,\n    });\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    // If numeric enums feature is requested, add extra parameter to the query string\n    if (numericEnums) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$alt=json%3Benum-encoding=int';\n    }\n    // Converts httpMethod to method that permitted in standard Fetch API spec\n    // https://fetch.spec.whatwg.org/#methods\n    const method = transcoded.httpMethod.toUpperCase();\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = googleError_1.GoogleError.parseHttpError(json);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n//# sourceMappingURL=fallbackRest.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrCF,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACpD,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMG,aAAa,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC9C,SAASH,aAAaA,CAACO,GAAG,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,WAAW,EAAEC,OAAO,EAAEC,YAAY,EAAE;EACnF,MAAMC,OAAO,GAAG;IACZ,cAAc,EAAE;EACpB,CAAC;EACD,MAAMC,OAAO,GAAGP,GAAG,CAACQ,mBAAmB,CAACC,UAAU,CAACL,OAAO,CAAC;EAC3D,MAAMM,IAAI,GAAGf,UAAU,CAACgB,YAAY,CAACJ,OAAO,EAAE;IAC1CF;EACJ,CAAC,CAAC;EACF,IAAI,CAACK,IAAI,EAAE;IACP,MAAM,IAAIE,KAAK,CAAC,mCAAmCZ,GAAG,CAACa,IAAI,GAAG,CAAC;EACnE;EACA,IAAI,OAAOH,IAAI,KAAK,QAAQ,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;IACjD,MAAM,IAAIE,KAAK,CAAC,kBAAkBZ,GAAG,CAACa,IAAI,qBAAqB,CAAC;EACpE;EACA,MAAMG,UAAU,GAAG,CAAC,CAAC,EAAEjB,aAAa,CAACkB,SAAS,EAAEP,IAAI,EAAEV,GAAG,CAACkB,aAAa,CAAC;EACxE,IAAI,CAACF,UAAU,EAAE;IACb,MAAM,IAAIJ,KAAK,CAAC,iCAAiCO,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,aAAaV,GAAG,CAACa,IAAI,EAAE,CAAC;EACjG;EACA;EACA,IAAIR,YAAY,EAAE;IACdW,UAAU,CAACK,WAAW,GAClB,CAACL,UAAU,CAACK,WAAW,GAAG,GAAGL,UAAU,CAACK,WAAW,GAAG,GAAG,EAAE,IACvD,+BAA+B;EAC3C;EACA;EACA;EACA,MAAMC,MAAM,GAAGN,UAAU,CAACO,UAAU,CAACC,WAAW,CAAC,CAAC;EAClD,MAAMC,IAAI,GAAGN,IAAI,CAACC,SAAS,CAACJ,UAAU,CAACU,IAAI,CAAC;EAC5C,MAAMC,GAAG,GAAG,GAAG1B,QAAQ,MAAMC,WAAW,IAAIC,WAAW,IAAIa,UAAU,CAACW,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAIZ,UAAU,CAACK,WAAW,EAAE;EACxH,OAAO;IACHC,MAAM;IACNK,GAAG;IACHrB,OAAO;IACPmB;EACJ,CAAC;AACL;AACA,SAAS/B,cAAcA,CAACM,GAAG,EAAE6B,EAAE,EAAEC,QAAQ,EAAE;EACvC;EACA,MAAMC,aAAa,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,QAAQ,CAAC;EACxD,MAAMpB,IAAI,GAAGS,IAAI,CAACe,KAAK,CAACH,aAAa,CAAC;EACtC,IAAI,CAACF,EAAE,EAAE;IACL,MAAMM,KAAK,GAAGrC,aAAa,CAACsC,WAAW,CAACC,cAAc,CAAC3B,IAAI,CAAC;IAC5D,MAAMyB,KAAK;EACf;EACA,MAAM5B,OAAO,GAAGZ,UAAU,CAAC2C,cAAc,CAACtC,GAAG,CAACuC,oBAAoB,EAAE7B,IAAI,CAAC;EACzE,IAAI,CAACH,OAAO,EAAE;IACV,MAAM,IAAIK,KAAK,CAAC,mCAAmCZ,GAAG,CAACa,IAAI,EAAE,CAAC;EAClE;EACA,OAAOb,GAAG,CAACuC,oBAAoB,CAACC,QAAQ,CAACjC,OAAO,EAAEV,UAAU,CAAC4C,sBAAsB,CAAC;AACxF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/*! firebase-admin v12.2.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseResourceName = exports.transformMillisecondsToSecondsString = exports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findServiceAccountEmail = exports.getExplicitServiceAccountEmail = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"./validator\");\nlet sdkVersion;\n// TODO: Move to firebase-admin/app as an internal member.\nfunction getSdkVersion() {\n  if (!sdkVersion) {\n    const {\n      version\n    } = require('../../package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n    sdkVersion = version;\n  }\n  return sdkVersion;\n}\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param obj - The object whose properties to rename.\n * @param keyMap - The mapping from old to new property names.\n */\nfunction renameProperties(obj, keyMap) {\n  Object.keys(keyMap).forEach(oldKey => {\n    if (oldKey in obj) {\n      const newKey = keyMap[oldKey];\n      // The old key's value takes precedence over the new key's value.\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n  });\n}\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param obj - The object on which to define the property.\n * @param prop - The name of the property to be defined or modified.\n * @param value - The value associated with the property.\n */\nfunction addReadonlyGetter(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    // Make this property read-only.\n    writable: false,\n    // Include this property during enumeration of obj's properties.\n    enumerable: true\n  });\n}\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction getExplicitProjectId(app) {\n  const options = app.options;\n  if (validator.isNonEmptyString(options.projectId)) {\n    return options.projectId;\n  }\n  const credential = app.options.credential;\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return credential.projectId;\n  }\n  const projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n  if (validator.isNonEmptyString(projectId)) {\n    return projectId;\n  }\n  return null;\n}\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction findProjectId(app) {\n  const projectId = getExplicitProjectId(app);\n  if (projectId) {\n    return Promise.resolve(projectId);\n  }\n  const credential = app.options.credential;\n  if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n    return credential.getProjectId();\n  }\n  return Promise.resolve(null);\n}\nexports.findProjectId = findProjectId;\n/**\n * Returns the service account email associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email string or null.\n */\nfunction getExplicitServiceAccountEmail(app) {\n  const options = app.options;\n  if (validator.isNonEmptyString(options.serviceAccountId)) {\n    return options.serviceAccountId;\n  }\n  const credential = app.options.credential;\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return credential.clientEmail;\n  }\n  return null;\n}\nexports.getExplicitServiceAccountEmail = getExplicitServiceAccountEmail;\n/**\n * Determines the service account email associated with a Firebase app. This method first\n * checks if a service account email is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit service account email is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the service account email from the local metadata service.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email ID string or null.\n */\nfunction findServiceAccountEmail(app) {\n  const accountId = getExplicitServiceAccountEmail(app);\n  if (accountId) {\n    return Promise.resolve(accountId);\n  }\n  const credential = app.options.credential;\n  if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n    return credential.getServiceAccountEmail();\n  }\n  return Promise.resolve(null);\n}\nexports.findServiceAccountEmail = findServiceAccountEmail;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param data - The raw data byte input.\n * @returns The base64-encoded result.\n */\nfunction toWebSafeBase64(data) {\n  return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param str - The original string where the param need to be\n *     replaced.\n * @param params - The optional parameters to replace in the\n *     string.\n * @returns The resulting formatted string.\n */\nfunction formatString(str, params) {\n  let formatted = str;\n  Object.keys(params || {}).forEach(key => {\n    formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n  });\n  return formatted;\n}\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj - The object to generate the update mask for.\n * @param terminalPaths - The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root - The path so far.\n * @returns The computed update mask list.\n */\nfunction generateUpdateMask(obj, terminalPaths = [], root = '') {\n  const updateMask = [];\n  if (!validator.isNonNullObject(obj)) {\n    return updateMask;\n  }\n  for (const key in obj) {\n    if (typeof obj[key] !== 'undefined') {\n      const nextPath = root ? `${root}.${key}` : key;\n      // We hit maximum path.\n      // Consider switching to Set<string> if the list grows too large.\n      if (terminalPaths.indexOf(nextPath) !== -1) {\n        // Add key and stop traversing this branch.\n        updateMask.push(key);\n      } else {\n        const maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n        if (maskList.length > 0) {\n          maskList.forEach(mask => {\n            updateMask.push(`${key}.${mask}`);\n          });\n        } else {\n          updateMask.push(key);\n        }\n      }\n    }\n  }\n  return updateMask;\n}\nexports.generateUpdateMask = generateUpdateMask;\n/**\n * Transforms milliseconds to a protobuf Duration type string.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3 seconds 0 nano seconds as 3s,\n * 3 seconds 1 nano seconds as 3.000000001s\".\n *\n * @param milliseconds - The duration in milliseconds.\n * @returns The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\nfunction transformMillisecondsToSecondsString(milliseconds) {\n  let duration;\n  const seconds = Math.floor(milliseconds / 1000);\n  const nanos = Math.floor((milliseconds - seconds * 1000) * 1000000);\n  if (nanos > 0) {\n    let nanoString = nanos.toString();\n    while (nanoString.length < 9) {\n      nanoString = '0' + nanoString;\n    }\n    duration = `${seconds}.${nanoString}s`;\n  } else {\n    duration = `${seconds}s`;\n  }\n  return duration;\n}\nexports.transformMillisecondsToSecondsString = transformMillisecondsToSecondsString;\n/**\n * Parses the top level resources of a given resource name.\n * Supports both full and partial resources names, example:\n * `locations/{location}/functions/{functionName}`,\n * `projects/{project}/locations/{location}/functions/{functionName}`, or {functionName}\n * Does not support deeply nested resource names.\n *\n * @param resourceName - The resource name string.\n * @param resourceIdKey - The key of the resource name to be parsed.\n * @returns A parsed resource name object.\n */\nfunction parseResourceName(resourceName, resourceIdKey) {\n  if (!resourceName.includes('/')) {\n    return {\n      resourceId: resourceName\n    };\n  }\n  const CHANNEL_NAME_REGEX = new RegExp(`^(projects/([^/]+)/)?locations/([^/]+)/${resourceIdKey}/([^/]+)$`);\n  const match = CHANNEL_NAME_REGEX.exec(resourceName);\n  if (match === null) {\n    throw new Error('Invalid resource name format.');\n  }\n  const projectId = match[2];\n  const locationId = match[3];\n  const resourceId = match[4];\n  return {\n    projectId,\n    locationId,\n    resourceId\n  };\n}\nexports.parseResourceName = parseResourceName;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseResourceName","transformMillisecondsToSecondsString","generateUpdateMask","formatString","toWebSafeBase64","findServiceAccountEmail","getExplicitServiceAccountEmail","findProjectId","getExplicitProjectId","addReadonlyGetter","renameProperties","getSdkVersion","credential_internal_1","require","validator","sdkVersion","version","obj","keyMap","keys","forEach","oldKey","newKey","prop","writable","enumerable","app","options","isNonEmptyString","projectId","credential","ServiceAccountCredential","process","env","GOOGLE_CLOUD_PROJECT","GCLOUD_PROJECT","Promise","resolve","ComputeEngineCredential","getProjectId","serviceAccountId","clientEmail","accountId","getServiceAccountEmail","data","toString","replace","str","params","formatted","key","RegExp","terminalPaths","root","updateMask","isNonNullObject","nextPath","indexOf","push","maskList","length","mask","milliseconds","duration","seconds","Math","floor","nanos","nanoString","resourceName","resourceIdKey","includes","resourceId","CHANNEL_NAME_REGEX","match","exec","Error","locationId"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/firebase-admin/lib/utils/index.js"],"sourcesContent":["/*! firebase-admin v12.2.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseResourceName = exports.transformMillisecondsToSecondsString = exports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findServiceAccountEmail = exports.getExplicitServiceAccountEmail = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"./validator\");\nlet sdkVersion;\n// TODO: Move to firebase-admin/app as an internal member.\nfunction getSdkVersion() {\n    if (!sdkVersion) {\n        const { version } = require('../../package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n        sdkVersion = version;\n    }\n    return sdkVersion;\n}\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param obj - The object whose properties to rename.\n * @param keyMap - The mapping from old to new property names.\n */\nfunction renameProperties(obj, keyMap) {\n    Object.keys(keyMap).forEach((oldKey) => {\n        if (oldKey in obj) {\n            const newKey = keyMap[oldKey];\n            // The old key's value takes precedence over the new key's value.\n            obj[newKey] = obj[oldKey];\n            delete obj[oldKey];\n        }\n    });\n}\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param obj - The object on which to define the property.\n * @param prop - The name of the property to be defined or modified.\n * @param value - The value associated with the property.\n */\nfunction addReadonlyGetter(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n        value,\n        // Make this property read-only.\n        writable: false,\n        // Include this property during enumeration of obj's properties.\n        enumerable: true,\n    });\n}\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction getExplicitProjectId(app) {\n    const options = app.options;\n    if (validator.isNonEmptyString(options.projectId)) {\n        return options.projectId;\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return credential.projectId;\n    }\n    const projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n    if (validator.isNonEmptyString(projectId)) {\n        return projectId;\n    }\n    return null;\n}\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction findProjectId(app) {\n    const projectId = getExplicitProjectId(app);\n    if (projectId) {\n        return Promise.resolve(projectId);\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n        return credential.getProjectId();\n    }\n    return Promise.resolve(null);\n}\nexports.findProjectId = findProjectId;\n/**\n * Returns the service account email associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email string or null.\n */\nfunction getExplicitServiceAccountEmail(app) {\n    const options = app.options;\n    if (validator.isNonEmptyString(options.serviceAccountId)) {\n        return options.serviceAccountId;\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return credential.clientEmail;\n    }\n    return null;\n}\nexports.getExplicitServiceAccountEmail = getExplicitServiceAccountEmail;\n/**\n * Determines the service account email associated with a Firebase app. This method first\n * checks if a service account email is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit service account email is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the service account email from the local metadata service.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email ID string or null.\n */\nfunction findServiceAccountEmail(app) {\n    const accountId = getExplicitServiceAccountEmail(app);\n    if (accountId) {\n        return Promise.resolve(accountId);\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n        return credential.getServiceAccountEmail();\n    }\n    return Promise.resolve(null);\n}\nexports.findServiceAccountEmail = findServiceAccountEmail;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param data - The raw data byte input.\n * @returns The base64-encoded result.\n */\nfunction toWebSafeBase64(data) {\n    return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param str - The original string where the param need to be\n *     replaced.\n * @param params - The optional parameters to replace in the\n *     string.\n * @returns The resulting formatted string.\n */\nfunction formatString(str, params) {\n    let formatted = str;\n    Object.keys(params || {}).forEach((key) => {\n        formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n    });\n    return formatted;\n}\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj - The object to generate the update mask for.\n * @param terminalPaths - The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root - The path so far.\n * @returns The computed update mask list.\n */\nfunction generateUpdateMask(obj, terminalPaths = [], root = '') {\n    const updateMask = [];\n    if (!validator.isNonNullObject(obj)) {\n        return updateMask;\n    }\n    for (const key in obj) {\n        if (typeof obj[key] !== 'undefined') {\n            const nextPath = root ? `${root}.${key}` : key;\n            // We hit maximum path.\n            // Consider switching to Set<string> if the list grows too large.\n            if (terminalPaths.indexOf(nextPath) !== -1) {\n                // Add key and stop traversing this branch.\n                updateMask.push(key);\n            }\n            else {\n                const maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n                if (maskList.length > 0) {\n                    maskList.forEach((mask) => {\n                        updateMask.push(`${key}.${mask}`);\n                    });\n                }\n                else {\n                    updateMask.push(key);\n                }\n            }\n        }\n    }\n    return updateMask;\n}\nexports.generateUpdateMask = generateUpdateMask;\n/**\n * Transforms milliseconds to a protobuf Duration type string.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3 seconds 0 nano seconds as 3s,\n * 3 seconds 1 nano seconds as 3.000000001s\".\n *\n * @param milliseconds - The duration in milliseconds.\n * @returns The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\nfunction transformMillisecondsToSecondsString(milliseconds) {\n    let duration;\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = Math.floor((milliseconds - seconds * 1000) * 1000000);\n    if (nanos > 0) {\n        let nanoString = nanos.toString();\n        while (nanoString.length < 9) {\n            nanoString = '0' + nanoString;\n        }\n        duration = `${seconds}.${nanoString}s`;\n    }\n    else {\n        duration = `${seconds}s`;\n    }\n    return duration;\n}\nexports.transformMillisecondsToSecondsString = transformMillisecondsToSecondsString;\n/**\n * Parses the top level resources of a given resource name.\n * Supports both full and partial resources names, example:\n * `locations/{location}/functions/{functionName}`,\n * `projects/{project}/locations/{location}/functions/{functionName}`, or {functionName}\n * Does not support deeply nested resource names.\n *\n * @param resourceName - The resource name string.\n * @param resourceIdKey - The key of the resource name to be parsed.\n * @returns A parsed resource name object.\n */\nfunction parseResourceName(resourceName, resourceIdKey) {\n    if (!resourceName.includes('/')) {\n        return { resourceId: resourceName };\n    }\n    const CHANNEL_NAME_REGEX = new RegExp(`^(projects/([^/]+)/)?locations/([^/]+)/${resourceIdKey}/([^/]+)$`);\n    const match = CHANNEL_NAME_REGEX.exec(resourceName);\n    if (match === null) {\n        throw new Error('Invalid resource name format.');\n    }\n    const projectId = match[2];\n    const locationId = match[3];\n    const resourceId = match[4];\n    return { projectId, locationId, resourceId };\n}\nexports.parseResourceName = parseResourceName;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
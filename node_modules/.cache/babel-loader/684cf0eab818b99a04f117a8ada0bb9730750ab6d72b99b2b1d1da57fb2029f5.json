{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.customObjectMessage = customObjectMessage;\nexports.validateFunction = validateFunction;\nexports.validateObject = validateObject;\nexports.validateString = validateString;\nexports.validateHost = validateHost;\nexports.validateBoolean = validateBoolean;\nexports.validateNumber = validateNumber;\nexports.validateInteger = validateInteger;\nexports.validateTimestamp = validateTimestamp;\nexports.invalidArgumentMessage = invalidArgumentMessage;\nexports.validateOptional = validateOptional;\nexports.validateMinNumberOfArguments = validateMinNumberOfArguments;\nexports.validateMaxNumberOfArguments = validateMaxNumberOfArguments;\nexports.validateEnumValue = validateEnumValue;\nconst url_1 = require(\"url\");\nconst util_1 = require(\"./util\");\nconst timestamp_1 = require(\"./timestamp\");\n/**\n * Generates an error message to use with custom objects that cannot be\n * serialized.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value that failed serialization.\n * @param path The field path that the object is assigned to.\n */\nfunction customObjectMessage(arg, value, path) {\n  const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n  if ((0, util_1.isObject)(value)) {\n    // We use the base class name as the type name as the sentinel classes\n    // returned by the public FieldValue API are subclasses of FieldValue. By\n    // using the base name, we reduce the number of special cases below.\n    const typeName = value.constructor.name;\n    switch (typeName) {\n      case 'DocumentReference':\n      case 'FieldPath':\n      case 'FieldValue':\n      case 'GeoPoint':\n      case 'Timestamp':\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Detected an object of type \"${typeName}\" that doesn't match the ` + `expected instance${fieldPathMessage}. Please ensure that the ` + 'Firestore types you are using are from the same NPM package.)';\n      case 'Object':\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Invalid use of type \"${typeof value}\" as a Firestore argument${fieldPathMessage}.`;\n      default:\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Couldn't serialize object of type \"${typeName}\"${fieldPathMessage}. Firestore doesn't support JavaScript ` + 'objects with custom prototypes (i.e. objects that were created ' + 'via the \"new\" operator).';\n    }\n  } else {\n    return `${invalidArgumentMessage(arg, 'Firestore document')} Input is not a plain JavaScript object${fieldPathMessage}.`;\n  }\n}\n/**\n * Validates that 'value' is a function.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the function can be omitted.\n */\nfunction validateFunction(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!(0, util_1.isFunction)(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'function'));\n    }\n  }\n}\n/**\n * Validates that 'value' is an object.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the object can be omitted.\n */\nfunction validateObject(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!(0, util_1.isObject)(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'object'));\n    }\n  }\n}\n/**\n * Validates that 'value' is a string.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the string can be omitted.\n */\nfunction validateString(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'string') {\n      throw new Error(invalidArgumentMessage(arg, 'string'));\n    }\n  }\n}\n/**\n * Validates that 'value' is a host.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the host can be omitted.\n */\nfunction validateHost(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    validateString(arg, value);\n    const urlString = `http://${value}/`;\n    let parsed;\n    try {\n      parsed = new url_1.URL(urlString);\n    } catch (e) {\n      throw new Error(invalidArgumentMessage(arg, 'host'));\n    }\n    if (parsed.search !== '' || parsed.pathname !== '/' || parsed.username !== '') {\n      throw new Error(invalidArgumentMessage(arg, 'host'));\n    }\n  }\n}\n/**\n * Validates that 'value' is a boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the boolean can be omitted.\n */\nfunction validateBoolean(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'boolean') {\n      throw new Error(invalidArgumentMessage(arg, 'boolean'));\n    }\n  }\n}\n/**\n * Validates that 'value' is a number.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the number can be omitted.\n */\nfunction validateNumber(arg, value, options) {\n  const min = options !== undefined && options.minValue !== undefined ? options.minValue : -Infinity;\n  const max = options !== undefined && options.maxValue !== undefined ? options.maxValue : Infinity;\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'number'));\n    } else if (value < min || value > max) {\n      throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n    }\n  }\n}\n/**\n * Validates that 'value' is a integer.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the integer can be omitted.\n */\nfunction validateInteger(arg, value, options) {\n  const min = options !== undefined && options.minValue !== undefined ? options.minValue : -Infinity;\n  const max = options !== undefined && options.maxValue !== undefined ? options.maxValue : Infinity;\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'number' || isNaN(value) || value % 1 !== 0) {\n      throw new Error(invalidArgumentMessage(arg, 'integer'));\n    } else if (value < min || value > max) {\n      throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n    }\n  }\n}\n/**\n * Validates that 'value' is a Timestamp.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the Timestamp can be omitted.\n */\nfunction validateTimestamp(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!(value instanceof timestamp_1.Timestamp)) {\n      throw new Error(invalidArgumentMessage(arg, 'Timestamp'));\n    }\n  }\n}\n/**\n * Generates an error message to use with invalid arguments.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param expectedType The expected input type.\n */\nfunction invalidArgumentMessage(arg, expectedType) {\n  return `${formatArgumentName(arg)} is not a valid ${expectedType}.`;\n}\n/**\n * Enforces the 'options.optional' constraint for 'value'.\n *\n * @private\n * @internal\n * @param value The input to validate.\n * @param options Whether the function can be omitted.\n * @return Whether the object is omitted and is allowed to be omitted.\n */\nfunction validateOptional(value, options) {\n  return value === undefined && options !== undefined && options.optional === true;\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n *\n * @private\n * @internal\n * @param num The number to use for formatting.\n * @param str The string to format.\n */\nfunction formatPlural(num, str) {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n/**\n * Creates a descriptive name for the provided argument name or index.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @return Either the argument name or its index description.\n */\nfunction formatArgumentName(arg) {\n  return typeof arg === 'string' ? `Value for argument \"${arg}\"` : `Element at index ${arg}`;\n}\n/**\n * Verifies that 'args' has at least 'minSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param minSize The minimum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMinNumberOfArguments(funcName, args, minSize) {\n  if (args.length < minSize) {\n    throw new Error(`Function \"${funcName}()\" requires at least ` + `${formatPlural(minSize, 'argument')}.`);\n  }\n}\n/**\n * Verifies that 'args' has at most 'maxSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param maxSize The maximum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMaxNumberOfArguments(funcName, args, maxSize) {\n  if (args.length > maxSize) {\n    throw new Error(`Function \"${funcName}()\" accepts at most ` + `${formatPlural(maxSize, 'argument')}.`);\n  }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n *\n * @param arg The argument name or argument index (for varargs methods).).\n * @param value The input to validate.\n * @param allowedValues A list of expected values.\n * @param options Whether the input can be omitted.\n * @private\n * @internal\n */\nfunction validateEnumValue(arg, value, allowedValues, options) {\n  if (!validateOptional(value, options)) {\n    const expectedDescription = [];\n    for (const allowed of allowedValues) {\n      if (allowed === value) {\n        return;\n      }\n      expectedDescription.push(allowed);\n    }\n    throw new Error(`${formatArgumentName(arg)} is invalid. Acceptable values are: ${expectedDescription.join(', ')}`);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","customObjectMessage","validateFunction","validateObject","validateString","validateHost","validateBoolean","validateNumber","validateInteger","validateTimestamp","invalidArgumentMessage","validateOptional","validateMinNumberOfArguments","validateMaxNumberOfArguments","validateEnumValue","url_1","require","util_1","timestamp_1","arg","path","fieldPathMessage","isObject","typeName","constructor","name","options","isFunction","Error","urlString","parsed","URL","e","search","pathname","username","min","undefined","minValue","Infinity","max","maxValue","isNaN","formatArgumentName","Timestamp","expectedType","optional","formatPlural","num","str","funcName","args","minSize","length","maxSize","allowedValues","expectedDescription","allowed","push","join"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/validate.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customObjectMessage = customObjectMessage;\nexports.validateFunction = validateFunction;\nexports.validateObject = validateObject;\nexports.validateString = validateString;\nexports.validateHost = validateHost;\nexports.validateBoolean = validateBoolean;\nexports.validateNumber = validateNumber;\nexports.validateInteger = validateInteger;\nexports.validateTimestamp = validateTimestamp;\nexports.invalidArgumentMessage = invalidArgumentMessage;\nexports.validateOptional = validateOptional;\nexports.validateMinNumberOfArguments = validateMinNumberOfArguments;\nexports.validateMaxNumberOfArguments = validateMaxNumberOfArguments;\nexports.validateEnumValue = validateEnumValue;\nconst url_1 = require(\"url\");\nconst util_1 = require(\"./util\");\nconst timestamp_1 = require(\"./timestamp\");\n/**\n * Generates an error message to use with custom objects that cannot be\n * serialized.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value that failed serialization.\n * @param path The field path that the object is assigned to.\n */\nfunction customObjectMessage(arg, value, path) {\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if ((0, util_1.isObject)(value)) {\n        // We use the base class name as the type name as the sentinel classes\n        // returned by the public FieldValue API are subclasses of FieldValue. By\n        // using the base name, we reduce the number of special cases below.\n        const typeName = value.constructor.name;\n        switch (typeName) {\n            case 'DocumentReference':\n            case 'FieldPath':\n            case 'FieldValue':\n            case 'GeoPoint':\n            case 'Timestamp':\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Detected an object of type \"${typeName}\" that doesn't match the ` +\n                    `expected instance${fieldPathMessage}. Please ensure that the ` +\n                    'Firestore types you are using are from the same NPM package.)');\n            case 'Object':\n                return `${invalidArgumentMessage(arg, 'Firestore document')} Invalid use of type \"${typeof value}\" as a Firestore argument${fieldPathMessage}.`;\n            default:\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Couldn't serialize object of type \"${typeName}\"${fieldPathMessage}. Firestore doesn't support JavaScript ` +\n                    'objects with custom prototypes (i.e. objects that were created ' +\n                    'via the \"new\" operator).');\n        }\n    }\n    else {\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Input is not a plain JavaScript object${fieldPathMessage}.`;\n    }\n}\n/**\n * Validates that 'value' is a function.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the function can be omitted.\n */\nfunction validateFunction(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isFunction)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'function'));\n        }\n    }\n}\n/**\n * Validates that 'value' is an object.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the object can be omitted.\n */\nfunction validateObject(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'object'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a string.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the string can be omitted.\n */\nfunction validateString(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'string') {\n            throw new Error(invalidArgumentMessage(arg, 'string'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a host.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the host can be omitted.\n */\nfunction validateHost(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        validateString(arg, value);\n        const urlString = `http://${value}/`;\n        let parsed;\n        try {\n            parsed = new url_1.URL(urlString);\n        }\n        catch (e) {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n        if (parsed.search !== '' ||\n            parsed.pathname !== '/' ||\n            parsed.username !== '') {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the boolean can be omitted.\n */\nfunction validateBoolean(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'boolean') {\n            throw new Error(invalidArgumentMessage(arg, 'boolean'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a number.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the number can be omitted.\n */\nfunction validateNumber(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'number'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a integer.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the integer can be omitted.\n */\nfunction validateInteger(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value) || value % 1 !== 0) {\n            throw new Error(invalidArgumentMessage(arg, 'integer'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a Timestamp.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the Timestamp can be omitted.\n */\nfunction validateTimestamp(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(value instanceof timestamp_1.Timestamp)) {\n            throw new Error(invalidArgumentMessage(arg, 'Timestamp'));\n        }\n    }\n}\n/**\n * Generates an error message to use with invalid arguments.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param expectedType The expected input type.\n */\nfunction invalidArgumentMessage(arg, expectedType) {\n    return `${formatArgumentName(arg)} is not a valid ${expectedType}.`;\n}\n/**\n * Enforces the 'options.optional' constraint for 'value'.\n *\n * @private\n * @internal\n * @param value The input to validate.\n * @param options Whether the function can be omitted.\n * @return Whether the object is omitted and is allowed to be omitted.\n */\nfunction validateOptional(value, options) {\n    return (value === undefined && options !== undefined && options.optional === true);\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n *\n * @private\n * @internal\n * @param num The number to use for formatting.\n * @param str The string to format.\n */\nfunction formatPlural(num, str) {\n    return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n/**\n * Creates a descriptive name for the provided argument name or index.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @return Either the argument name or its index description.\n */\nfunction formatArgumentName(arg) {\n    return typeof arg === 'string'\n        ? `Value for argument \"${arg}\"`\n        : `Element at index ${arg}`;\n}\n/**\n * Verifies that 'args' has at least 'minSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param minSize The minimum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMinNumberOfArguments(funcName, args, minSize) {\n    if (args.length < minSize) {\n        throw new Error(`Function \"${funcName}()\" requires at least ` +\n            `${formatPlural(minSize, 'argument')}.`);\n    }\n}\n/**\n * Verifies that 'args' has at most 'maxSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param maxSize The maximum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMaxNumberOfArguments(funcName, args, maxSize) {\n    if (args.length > maxSize) {\n        throw new Error(`Function \"${funcName}()\" accepts at most ` +\n            `${formatPlural(maxSize, 'argument')}.`);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n *\n * @param arg The argument name or argument index (for varargs methods).).\n * @param value The input to validate.\n * @param allowedValues A list of expected values.\n * @param options Whether the input can be omitted.\n * @private\n * @internal\n */\nfunction validateEnumValue(arg, value, allowedValues, options) {\n    if (!validateOptional(value, options)) {\n        const expectedDescription = [];\n        for (const allowed of allowedValues) {\n            if (allowed === value) {\n                return;\n            }\n            expectedDescription.push(allowed);\n        }\n        throw new Error(`${formatArgumentName(arg)} is invalid. Acceptable values are: ${expectedDescription.join(', ')}`);\n    }\n}\n//# sourceMappingURL=validate.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
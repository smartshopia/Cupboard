{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpsProxyAgent = void 0;\nconst net = __importStar(require(\"net\"));\nconst tls = __importStar(require(\"tls\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst url_1 = require(\"url\");\nconst parse_proxy_response_1 = require(\"./parse-proxy-response\");\nconst debug = (0, debug_1.default)('https-proxy-agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {\n      path: undefined\n    };\n    this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port\n    };\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const {\n      proxy\n    } = this;\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n    const headers = typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : {\n      ...this.proxyHeaders\n    };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n    headers.Host = `${host}:${opts.port}`;\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n    const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);\n    socket.write(`${payload}\\r\\n`);\n    const {\n      connect,\n      buffered\n    } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    this.emit('proxyConnect', connect, req);\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername\n        });\n      }\n      return socket;\n    }\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n    const fakeSocket = new net.Socket({\n      writable: false\n    });\n    fakeSocket.readable = true;\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', s => {\n      debug('Replaying proxy buffer for failed request');\n      (0, assert_1.default)(s.listenerCount('data') > 0);\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n    return fakeSocket;\n  }\n}\nHttpsProxyAgent.protocols = ['http', 'https'];\nexports.HttpsProxyAgent = HttpsProxyAgent;\nfunction resume(socket) {\n  socket.resume();\n}\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}","map":{"version":3,"names":["net","__importStar","require","tls","assert_1","__importDefault","debug_1","agent_base_1","url_1","parse_proxy_response_1","debug","default","HttpsProxyAgent","Agent","constructor","proxy","opts","options","path","undefined","URL","proxyHeaders","headers","href","host","hostname","replace","port","parseInt","protocol","connectOpts","ALPNProtocols","omit","connect","req","TypeError","socket","servername","isIPv6","payload","username","password","auth","decodeURIComponent","Buffer","from","toString","Host","keepAlive","name","Object","keys","proxyResponsePromise","parseProxyResponse","write","buffered","emit","statusCode","once","resume","secureEndpoint","destroy","fakeSocket","Socket","writable","readable","s","listenerCount","push","protocols","exports","obj","ret","key","includes"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n    return new call_1.OngoingCallPromise();\n  }\n  wrap(func) {\n    return func;\n  }\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n  _wrapOperation(apiCall, settings, argument, callback) {\n    let backoffSettings = settings.longrunning;\n    if (!backoffSettings) {\n      backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n    }\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, null, rawResponse);\n        return;\n      }\n      const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n  result(canceller) {\n    return canceller.promise;\n  }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"names":["Object","defineProperty","exports","value","LongrunningApiCaller","call_1","require","gax_1","longrunning_1","constructor","longrunningDescriptor","init","callback","OngoingCall","OngoingCallPromise","wrap","func","call","apiCall","argument","settings","canceller","_wrapOperation","backoffSettings","longrunning","createDefaultBackoffSettings","err","rawResponse","operation","Operation","fail","result","promise"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LongrunningApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n//# sourceMappingURL=longRunningApiCaller.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AACrC,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMF,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAWA,CAACC,qBAAqB,EAAE;IAC/B,IAAI,CAACA,qBAAqB,GAAGA,qBAAqB;EACtD;EACAC,IAAIA,CAACC,QAAQ,EAAE;IACX,IAAIA,QAAQ,EAAE;MACV,OAAO,IAAIP,MAAM,CAACQ,WAAW,CAACD,QAAQ,CAAC;IAC3C;IACA,OAAO,IAAIP,MAAM,CAACS,kBAAkB,CAAC,CAAC;EAC1C;EACAC,IAAIA,CAACC,IAAI,EAAE;IACP,OAAOA,IAAI;EACf;EACAC,IAAIA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAE;IACzCA,SAAS,CAACJ,IAAI,CAAC,CAACE,QAAQ,EAAEP,QAAQ,KAAK;MACnC,OAAO,IAAI,CAACU,cAAc,CAACJ,OAAO,EAAEE,QAAQ,EAAED,QAAQ,EAAEP,QAAQ,CAAC;IACrE,CAAC,EAAEO,QAAQ,CAAC;EAChB;EACAG,cAAcA,CAACJ,OAAO,EAAEE,QAAQ,EAAED,QAAQ,EAAEP,QAAQ,EAAE;IAClD,IAAIW,eAAe,GAAGH,QAAQ,CAACI,WAAW;IAC1C,IAAI,CAACD,eAAe,EAAE;MAClBA,eAAe,GAAG,CAAC,CAAC,EAAEhB,KAAK,CAACkB,4BAA4B,EAAE,CAAC;IAC/D;IACA,MAAMf,qBAAqB,GAAG,IAAI,CAACA,qBAAqB;IACxD,OAAOQ,OAAO,CAACC,QAAQ,EAAE,CAACO,GAAG,EAAEC,WAAW,KAAK;MAC3C,IAAID,GAAG,EAAE;QACLd,QAAQ,CAACc,GAAG,EAAE,IAAI,EAAE,IAAI,EAAEC,WAAW,CAAC;QACtC;MACJ;MACA,MAAMC,SAAS,GAAG,IAAIpB,aAAa,CAACqB,SAAS,CAACF,WAAW,EAAEjB,qBAAqB,EAAEa,eAAe,EAAEH,QAAQ,CAAC;MAC5GR,QAAQ,CAAC,IAAI,EAAEgB,SAAS,EAAED,WAAW,CAAC;IAC1C,CAAC,CAAC;EACN;EACAG,IAAIA,CAACT,SAAS,EAAEK,GAAG,EAAE;IACjBL,SAAS,CAACT,QAAQ,CAACc,GAAG,CAAC;EAC3B;EACAK,MAAMA,CAACV,SAAS,EAAE;IACd,OAAOA,SAAS,CAACW,OAAO;EAC5B;AACJ;AACA9B,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
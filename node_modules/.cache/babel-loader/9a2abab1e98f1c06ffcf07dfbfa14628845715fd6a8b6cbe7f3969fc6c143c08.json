{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeBundleId = computeBundleId;\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\nfunction computeBundleId(obj, discriminatorFields) {\n  const ids = [];\n  let hasIds = false;\n  for (const field of discriminatorFields) {\n    const id = at(obj, field);\n    if (id === undefined) {\n      ids.push(null);\n    } else {\n      hasIds = true;\n      ids.push(id);\n    }\n  }\n  if (!hasIds) {\n    return undefined;\n  }\n  return JSON.stringify(ids);\n}\n/**\n * Given an object field path that may contain dots, dig into the obj and find\n * the value at the given path.\n * @example\n * const obj = {\n *   a: {\n *     b: 5\n *   }\n * }\n * const id = at(obj, 'a.b');\n * // id = 5\n * @param field Path to the property with `.` notation\n * @param obj The object to traverse\n * @returns the value at the given path\n */\nfunction at(obj, field) {\n  const pathParts = field.split('.');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let currentObj = obj;\n  for (const pathPart of pathParts) {\n    currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];\n  }\n  return currentObj;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","computeBundleId","obj","discriminatorFields","ids","hasIds","field","id","at","undefined","push","JSON","stringify","pathParts","split","currentObj","pathPart"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeBundleId = computeBundleId;\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\nfunction computeBundleId(obj, discriminatorFields) {\n    const ids = [];\n    let hasIds = false;\n    for (const field of discriminatorFields) {\n        const id = at(obj, field);\n        if (id === undefined) {\n            ids.push(null);\n        }\n        else {\n            hasIds = true;\n            ids.push(id);\n        }\n    }\n    if (!hasIds) {\n        return undefined;\n    }\n    return JSON.stringify(ids);\n}\n/**\n * Given an object field path that may contain dots, dig into the obj and find\n * the value at the given path.\n * @example\n * const obj = {\n *   a: {\n *     b: 5\n *   }\n * }\n * const id = at(obj, 'a.b');\n * // id = 5\n * @param field Path to the property with `.` notation\n * @param obj The object to traverse\n * @returns the value at the given path\n */\nfunction at(obj, field) {\n    const pathParts = field.split('.');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentObj = obj;\n    for (const pathPart of pathParts) {\n        currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];\n    }\n    return currentObj;\n}\n//# sourceMappingURL=bundlingUtils.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGA,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAACC,GAAG,EAAEC,mBAAmB,EAAE;EAC/C,MAAMC,GAAG,GAAG,EAAE;EACd,IAAIC,MAAM,GAAG,KAAK;EAClB,KAAK,MAAMC,KAAK,IAAIH,mBAAmB,EAAE;IACrC,MAAMI,EAAE,GAAGC,EAAE,CAACN,GAAG,EAAEI,KAAK,CAAC;IACzB,IAAIC,EAAE,KAAKE,SAAS,EAAE;MAClBL,GAAG,CAACM,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC,MACI;MACDL,MAAM,GAAG,IAAI;MACbD,GAAG,CAACM,IAAI,CAACH,EAAE,CAAC;IAChB;EACJ;EACA,IAAI,CAACF,MAAM,EAAE;IACT,OAAOI,SAAS;EACpB;EACA,OAAOE,IAAI,CAACC,SAAS,CAACR,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,EAAEA,CAACN,GAAG,EAAEI,KAAK,EAAE;EACpB,MAAMO,SAAS,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC;EAClC;EACA,IAAIC,UAAU,GAAGb,GAAG;EACpB,KAAK,MAAMc,QAAQ,IAAIH,SAAS,EAAE;IAC9BE,UAAU,GAAGA,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACC,QAAQ,CAAC;EAC7F;EACA,OAAOD,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserRefreshClient = exports.USER_REFRESH_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nconst querystring_1 = require(\"querystring\");\nexports.USER_REFRESH_ACCOUNT_TYPE = 'authorized_user';\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      refreshToken,\n      eagerRefreshThresholdMillis,\n      forceRefreshOnFailure\n    };\n    super(opts);\n    this._refreshToken = opts.refreshToken;\n    this.credentials.refresh_token = opts.refreshToken;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken An ignored refreshToken..\n   * @param callback Optional callback.\n   */\n  async refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    return super.refreshTokenNoCache(this._refreshToken);\n  }\n  async fetchIdToken(targetAudience) {\n    const res = await this.transporter.request({\n      ...UserRefreshClient.RETRY_CONFIG,\n      url: this.endpoints.oauth2TokenUrl,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      data: (0, querystring_1.stringify)({\n        client_id: this._clientId,\n        client_secret: this._clientSecret,\n        grant_type: 'refresh_token',\n        refresh_token: this._refreshToken,\n        target_audience: targetAudience\n      })\n    });\n    return res.data.id_token;\n  }\n  /**\n   * Create a UserRefreshClient credentials instance using the given input\n   * options.\n   * @param json The input object.\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the user refresh token');\n    }\n    if (json.type !== 'authorized_user') {\n      throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n    }\n    if (!json.client_id) {\n      throw new Error('The incoming JSON object does not contain a client_id field');\n    }\n    if (!json.client_secret) {\n      throw new Error('The incoming JSON object does not contain a client_secret field');\n    }\n    if (!json.refresh_token) {\n      throw new Error('The incoming JSON object does not contain a refresh_token field');\n    }\n    this._clientId = json.client_id;\n    this._clientSecret = json.client_secret;\n    this._refreshToken = json.refresh_token;\n    this.credentials.refresh_token = json.refresh_token;\n    this.quotaProjectId = json.quota_project_id;\n    this.universeDomain = json.universe_domain || this.universeDomain;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  async fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        return reject(new Error('Must pass in a stream containing the user refresh token.'));\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          return resolve();\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n}\nexports.UserRefreshClient = UserRefreshClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","UserRefreshClient","USER_REFRESH_ACCOUNT_TYPE","oauth2client_1","require","querystring_1","OAuth2Client","constructor","optionsOrClientId","clientSecret","refreshToken","eagerRefreshThresholdMillis","forceRefreshOnFailure","opts","clientId","_refreshToken","credentials","refresh_token","refreshTokenNoCache","fetchIdToken","targetAudience","res","transporter","request","RETRY_CONFIG","url","endpoints","oauth2TokenUrl","headers","method","data","stringify","client_id","_clientId","client_secret","_clientSecret","grant_type","target_audience","id_token","fromJSON","json","Error","type","quotaProjectId","quota_project_id","universeDomain","universe_domain","fromStream","inputStream","callback","fromStreamAsync","then","Promise","resolve","reject","s","setEncoding","on","chunk","JSON","parse","err"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/refreshclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRefreshClient = exports.USER_REFRESH_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nconst querystring_1 = require(\"querystring\");\nexports.USER_REFRESH_ACCOUNT_TYPE = 'authorized_user';\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : {\n                clientId: optionsOrClientId,\n                clientSecret,\n                refreshToken,\n                eagerRefreshThresholdMillis,\n                forceRefreshOnFailure,\n            };\n        super(opts);\n        this._refreshToken = opts.refreshToken;\n        this.credentials.refresh_token = opts.refreshToken;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken An ignored refreshToken..\n     * @param callback Optional callback.\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        return super.refreshTokenNoCache(this._refreshToken);\n    }\n    async fetchIdToken(targetAudience) {\n        const res = await this.transporter.request({\n            ...UserRefreshClient.RETRY_CONFIG,\n            url: this.endpoints.oauth2TokenUrl,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            method: 'POST',\n            data: (0, querystring_1.stringify)({\n                client_id: this._clientId,\n                client_secret: this._clientSecret,\n                grant_type: 'refresh_token',\n                refresh_token: this._refreshToken,\n                target_audience: targetAudience,\n            }),\n        });\n        return res.data.id_token;\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the user refresh token');\n        }\n        if (json.type !== 'authorized_user') {\n            throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n        }\n        if (!json.client_id) {\n            throw new Error('The incoming JSON object does not contain a client_id field');\n        }\n        if (!json.client_secret) {\n            throw new Error('The incoming JSON object does not contain a client_secret field');\n        }\n        if (!json.refresh_token) {\n            throw new Error('The incoming JSON object does not contain a refresh_token field');\n        }\n        this._clientId = json.client_id;\n        this._clientSecret = json.client_secret;\n        this._refreshToken = json.refresh_token;\n        this.credentials.refresh_token = json.refresh_token;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    async fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                return reject(new Error('Must pass in a stream containing the user refresh token.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    return resolve();\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n}\nexports.UserRefreshClient = UserRefreshClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
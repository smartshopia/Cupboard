{"ast":null,"code":"'use strict';\n\nconst {\n  PassThrough\n} = require('stream');\nconst extend = require('extend');\nlet debug = () => {};\nif (typeof process !== 'undefined' && 'env' in process && typeof process.env === 'object' && process.env.DEBUG === 'retry-request') {\n  debug = message => {\n    console.log('retry-request:', message);\n  };\n}\nconst DEFAULTS = {\n  objectMode: false,\n  retries: 2,\n  /*\n    The maximum time to delay in seconds. If retryDelayMultiplier results in a\n    delay greater than maxRetryDelay, retries should delay by maxRetryDelay\n    seconds instead.\n  */\n  maxRetryDelay: 64,\n  /*\n    The multiplier by which to increase the delay time between the completion of\n    failed requests, and the initiation of the subsequent retrying request.\n  */\n  retryDelayMultiplier: 2,\n  /*\n    The length of time to keep retrying in seconds. The last sleep period will\n    be shortened as necessary, so that the last retry runs at deadline (and not\n    considerably beyond it).  The total time starting from when the initial\n    request is sent, after which an error will be returned, regardless of the\n    retrying attempts made meanwhile.\n   */\n  totalTimeout: 600,\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    const retryRanges = [\n    // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199], [429, 429], [500, 599]];\n    const statusCode = response.statusCode;\n    debug(`Response status: ${statusCode}`);\n    let range;\n    while (range = retryRanges.shift()) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  }\n};\nfunction retryRequest(requestOpts, opts, callback) {\n  if (typeof requestOpts === 'string') {\n    requestOpts = {\n      url: requestOpts\n    };\n  }\n  const streamMode = typeof arguments[arguments.length - 1] !== 'function';\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n  const manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === 'number';\n  opts = extend({}, DEFAULTS, opts);\n  if (typeof opts.request === 'undefined') {\n    throw new Error('A request library must be provided to retry-request.');\n  }\n  let currentRetryAttempt = opts.currentRetryAttempt;\n  let numNoResponseAttempts = 0;\n  let streamResponseHandled = false;\n  let retryStream;\n  let requestStream;\n  let delayStream;\n  let activeRequest;\n  const retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    }\n  };\n  if (streamMode) {\n    retryStream = new PassThrough({\n      objectMode: opts.objectMode\n    });\n    retryStream.abort = resetStreams;\n  }\n  const timeOfFirstRequest = Date.now();\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n  function resetStreams() {\n    delayStream = null;\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n  function makeRequest() {\n    let finishHandled = false;\n    currentRetryAttempt++;\n    debug(`Current retry attempt: ${currentRetryAttempt}`);\n    function handleFinish(args = []) {\n      if (!finishHandled) {\n        finishHandled = true;\n        retryStream.emit('complete', ...args);\n      }\n    }\n    if (streamMode) {\n      streamResponseHandled = false;\n      delayStream = new PassThrough({\n        objectMode: opts.objectMode\n      });\n      requestStream = opts.request(requestOpts);\n      setImmediate(() => {\n        retryStream.emit('request');\n      });\n      requestStream\n      // gRPC via google-cloud-node can emit an `error` as well as a `response`\n      // Whichever it emits, we run with-- we can't run with both. That's what\n      // is up with the `streamResponseHandled` tracking.\n      .on('error', err => {\n        if (streamResponseHandled) {\n          return;\n        }\n        streamResponseHandled = true;\n        onResponse(err);\n      }).on('response', (resp, body) => {\n        if (streamResponseHandled) {\n          return;\n        }\n        streamResponseHandled = true;\n        onResponse(null, resp, body);\n      }).on('complete', (...params) => handleFinish(params)).on('finish', (...params) => handleFinish(params));\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n    const nextRetryDelay = getNextRetryDelay({\n      maxRetryDelay: opts.maxRetryDelay,\n      retryDelayMultiplier: opts.retryDelayMultiplier,\n      retryNumber: currentRetryAttempt,\n      timeOfFirstRequest,\n      totalTimeout: opts.totalTimeout\n    });\n    debug(`Next retry delay: ${nextRetryDelay}`);\n    if (nextRetryDelay <= 0) {\n      numNoResponseAttempts = opts.noResponseRetries + 1;\n      return;\n    }\n    setTimeout(makeRequest, nextRetryDelay);\n  }\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n      return;\n    }\n\n    // Send the response to see if we should try again.\n    // NOTE: \"currentRetryAttempt\" isn't accurate by default, as it counts\n    // the very first request sent as the first \"retry\". It is only accurate\n    // when a user provides their own \"currentRetryAttempt\" option at\n    // instantiation.\n    const adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;\n    if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    }\n\n    // No more attempts need to be made, just continue on.\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', err => {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\nmodule.exports = retryRequest;\nfunction getNextRetryDelay(config) {\n  const {\n    maxRetryDelay,\n    retryDelayMultiplier,\n    retryNumber,\n    timeOfFirstRequest,\n    totalTimeout\n  } = config;\n  const maxRetryDelayMs = maxRetryDelay * 1000;\n  const totalTimeoutMs = totalTimeout * 1000;\n  const jitter = Math.floor(Math.random() * 1000);\n  const calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1000 + jitter;\n  const maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);\n  return Math.min(calculatedNextRetryDelay, maxAllowableDelayMs, maxRetryDelayMs);\n}\nmodule.exports.defaults = DEFAULTS;\nmodule.exports.getNextRetryDelay = getNextRetryDelay;","map":{"version":3,"names":["PassThrough","require","extend","debug","process","env","DEBUG","message","console","log","DEFAULTS","objectMode","retries","maxRetryDelay","retryDelayMultiplier","totalTimeout","noResponseRetries","currentRetryAttempt","shouldRetryFn","response","retryRanges","statusCode","range","shift","retryRequest","requestOpts","opts","callback","url","streamMode","arguments","length","manualCurrentRetryAttemptWasSet","request","Error","numNoResponseAttempts","streamResponseHandled","retryStream","requestStream","delayStream","activeRequest","abort","resetStreams","timeOfFirstRequest","Date","now","retryAfterDelay","makeRequest","cancel","destroy","end","finishHandled","handleFinish","args","emit","setImmediate","on","err","onResponse","resp","body","params","pipe","nextRetryDelay","getNextRetryDelay","retryNumber","setTimeout","adjustedCurrentRetryAttempt","module","exports","config","maxRetryDelayMs","totalTimeoutMs","jitter","Math","floor","random","calculatedNextRetryDelay","pow","maxAllowableDelayMs","min","defaults"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/retry-request/index.js"],"sourcesContent":["'use strict';\n\nconst {PassThrough} = require('stream');\nconst extend = require('extend');\n\nlet debug = () => {};\nif (\n  typeof process !== 'undefined' &&\n  'env' in process &&\n  typeof process.env === 'object' &&\n  process.env.DEBUG === 'retry-request'\n) {\n  debug = message => {\n    console.log('retry-request:', message);\n  };\n}\n\nconst DEFAULTS = {\n  objectMode: false,\n  retries: 2,\n\n  /*\n    The maximum time to delay in seconds. If retryDelayMultiplier results in a\n    delay greater than maxRetryDelay, retries should delay by maxRetryDelay\n    seconds instead.\n  */\n  maxRetryDelay: 64,\n\n  /*\n    The multiplier by which to increase the delay time between the completion of\n    failed requests, and the initiation of the subsequent retrying request.\n  */\n  retryDelayMultiplier: 2,\n\n  /*\n    The length of time to keep retrying in seconds. The last sleep period will\n    be shortened as necessary, so that the last retry runs at deadline (and not\n    considerably beyond it).  The total time starting from when the initial\n    request is sent, after which an error will be returned, regardless of the\n    retrying attempts made meanwhile.\n   */\n  totalTimeout: 600,\n\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    const retryRanges = [\n      // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n      // 1xx - Retry (Informational, request still processing)\n      // 2xx - Do not retry (Success)\n      // 3xx - Do not retry (Redirect)\n      // 4xx - Do not retry (Client errors)\n      // 429 - Retry (\"Too Many Requests\")\n      // 5xx - Retry (Server errors)\n      [100, 199],\n      [429, 429],\n      [500, 599],\n    ];\n\n    const statusCode = response.statusCode;\n    debug(`Response status: ${statusCode}`);\n\n    let range;\n    while ((range = retryRanges.shift())) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  },\n};\n\nfunction retryRequest(requestOpts, opts, callback) {\n  if (typeof requestOpts === 'string') {\n    requestOpts = {url: requestOpts};\n  }\n\n  const streamMode = typeof arguments[arguments.length - 1] !== 'function';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n\n  const manualCurrentRetryAttemptWasSet =\n    opts && typeof opts.currentRetryAttempt === 'number';\n  opts = extend({}, DEFAULTS, opts);\n\n  if (typeof opts.request === 'undefined') {\n    throw new Error('A request library must be provided to retry-request.');\n  }\n\n  let currentRetryAttempt = opts.currentRetryAttempt;\n\n  let numNoResponseAttempts = 0;\n  let streamResponseHandled = false;\n\n  let retryStream;\n  let requestStream;\n  let delayStream;\n\n  let activeRequest;\n  const retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    },\n  };\n\n  if (streamMode) {\n    retryStream = new PassThrough({objectMode: opts.objectMode});\n    retryStream.abort = resetStreams;\n  }\n\n  const timeOfFirstRequest = Date.now();\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n\n  function resetStreams() {\n    delayStream = null;\n\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n\n  function makeRequest() {\n    let finishHandled = false;\n    currentRetryAttempt++;\n    debug(`Current retry attempt: ${currentRetryAttempt}`);\n\n    function handleFinish(args = []) {\n      if (!finishHandled) {\n        finishHandled = true;\n        retryStream.emit('complete', ...args);\n      }\n    }\n\n    if (streamMode) {\n      streamResponseHandled = false;\n\n      delayStream = new PassThrough({objectMode: opts.objectMode});\n      requestStream = opts.request(requestOpts);\n\n      setImmediate(() => {\n        retryStream.emit('request');\n      });\n\n      requestStream\n        // gRPC via google-cloud-node can emit an `error` as well as a `response`\n        // Whichever it emits, we run with-- we can't run with both. That's what\n        // is up with the `streamResponseHandled` tracking.\n        .on('error', err => {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(err);\n        })\n        .on('response', (resp, body) => {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(null, resp, body);\n        })\n        .on('complete', (...params) => handleFinish(params))\n        .on('finish', (...params) => handleFinish(params));\n\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n\n    const nextRetryDelay = getNextRetryDelay({\n      maxRetryDelay: opts.maxRetryDelay,\n      retryDelayMultiplier: opts.retryDelayMultiplier,\n      retryNumber: currentRetryAttempt,\n      timeOfFirstRequest,\n      totalTimeout: opts.totalTimeout,\n    });\n    debug(`Next retry delay: ${nextRetryDelay}`);\n\n    if (nextRetryDelay <= 0) {\n      numNoResponseAttempts = opts.noResponseRetries + 1;\n      return;\n    }\n\n    setTimeout(makeRequest, nextRetryDelay);\n  }\n\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n\n      return;\n    }\n\n    // Send the response to see if we should try again.\n    // NOTE: \"currentRetryAttempt\" isn't accurate by default, as it counts\n    // the very first request sent as the first \"retry\". It is only accurate\n    // when a user provides their own \"currentRetryAttempt\" option at\n    // instantiation.\n    const adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet\n      ? currentRetryAttempt\n      : currentRetryAttempt - 1;\n    if (\n      adjustedCurrentRetryAttempt < opts.retries &&\n      opts.shouldRetryFn(response)\n    ) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    }\n\n    // No more attempts need to be made, just continue on.\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', err => {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\n\nmodule.exports = retryRequest;\n\nfunction getNextRetryDelay(config) {\n  const {\n    maxRetryDelay,\n    retryDelayMultiplier,\n    retryNumber,\n    timeOfFirstRequest,\n    totalTimeout,\n  } = config;\n\n  const maxRetryDelayMs = maxRetryDelay * 1000;\n  const totalTimeoutMs = totalTimeout * 1000;\n\n  const jitter = Math.floor(Math.random() * 1000);\n  const calculatedNextRetryDelay =\n    Math.pow(retryDelayMultiplier, retryNumber) * 1000 + jitter;\n\n  const maxAllowableDelayMs =\n    totalTimeoutMs - (Date.now() - timeOfFirstRequest);\n\n  return Math.min(\n    calculatedNextRetryDelay,\n    maxAllowableDelayMs,\n    maxRetryDelayMs\n  );\n}\n\nmodule.exports.defaults = DEFAULTS;\nmodule.exports.getNextRetryDelay = getNextRetryDelay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */\nclass DefaultAwsSecurityCredentialsSupplier {\n  /**\n   * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n   * from the credential_source stored in the ADC file.\n   * @param opts The default aws security credentials supplier options object to\n   *   build the supplier with.\n   */\n  constructor(opts) {\n    _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n    this.regionUrl = opts.regionUrl;\n    this.securityCredentialsUrl = opts.securityCredentialsUrl;\n    this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n    this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n  }\n  /**\n   * Returns the active AWS region. This first checks to see if the region\n   * is available as an environment variable. If it is not, then the supplier\n   * will call the region URL.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link AwsClient}, contains the requested audience and subject token type\n   *   for the external account identity.\n   * @return A promise that resolves with the AWS region string.\n   */\n  async getAwsRegion(context) {\n    // Priority order for region determination:\n    // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n    if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n      return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n    }\n    const metadataHeaders = {};\n    if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n      metadataHeaders['x-aws-ec2-metadata-token'] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n    }\n    if (!this.regionUrl) {\n      throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n    }\n    const opts = {\n      ...this.additionalGaxiosOptions,\n      url: this.regionUrl,\n      method: 'GET',\n      responseType: 'text',\n      headers: metadataHeaders\n    };\n    const response = await context.transporter.request(opts);\n    // Remove last character. For example, if us-east-2b is returned,\n    // the region would be us-east-2.\n    return response.data.substr(0, response.data.length - 1);\n  }\n  /**\n   * Returns AWS security credentials. This first checks to see if the credentials\n   * is available as environment variables. If it is not, then the supplier\n   * will call the security credentials URL.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link AwsClient}, contains the requested audience and subject token type\n   *   for the external account identity.\n   * @return A promise that resolves with the AWS security credentials.\n   */\n  async getAwsSecurityCredentials(context) {\n    // Check environment variables for permanent credentials first.\n    // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n    if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n      return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n    }\n    const metadataHeaders = {};\n    if (this.imdsV2SessionTokenUrl) {\n      metadataHeaders['x-aws-ec2-metadata-token'] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n    }\n    // Since the role on a VM can change, we don't need to cache it.\n    const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);\n    // Temporary credentials typically last for several hours.\n    // Expiration is returned in response.\n    // Consider future optimization of this logic to cache AWS tokens\n    // until their natural expiration.\n    const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n    return {\n      accessKeyId: awsCreds.AccessKeyId,\n      secretAccessKey: awsCreds.SecretAccessKey,\n      token: awsCreds.Token\n    };\n  }\n}\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken =\n/**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n  const opts = {\n    ...this.additionalGaxiosOptions,\n    url: this.imdsV2SessionTokenUrl,\n    method: 'PUT',\n    responseType: 'text',\n    headers: {\n      'x-aws-ec2-metadata-token-ttl-seconds': '300'\n    }\n  };\n  const response = await transporter.request(opts);\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName =\n/**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n  if (!this.securityCredentialsUrl) {\n    throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n  }\n  const opts = {\n    ...this.additionalGaxiosOptions,\n    url: this.securityCredentialsUrl,\n    method: 'GET',\n    responseType: 'text',\n    headers: headers\n  };\n  const response = await transporter.request(opts);\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials =\n/**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n  const response = await transporter.request({\n    ...this.additionalGaxiosOptions,\n    url: `${this.securityCredentialsUrl}/${roleName}`,\n    responseType: 'json',\n    headers: headers\n  });\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n  // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n  // Only one is required.\n  return process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null;\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n  // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n  if (process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY']) {\n    return {\n      accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n      secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n      token: process.env['AWS_SESSION_TOKEN']\n    };\n  }\n  return null;\n};","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_DefaultAwsSecurityCredentialsSupplier_instances","_DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken","_DefaultAwsSecurityCredentialsSupplier_getAwsRoleName","_DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials","_DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get","_DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get","Object","defineProperty","exports","DefaultAwsSecurityCredentialsSupplier","constructor","opts","add","regionUrl","securityCredentialsUrl","imdsV2SessionTokenUrl","additionalGaxiosOptions","getAwsRegion","context","metadataHeaders","transporter","Error","url","method","responseType","headers","response","request","data","substr","length","getAwsSecurityCredentials","roleName","awsCreds","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","token","Token","WeakSet","process","env"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */\nclass DefaultAwsSecurityCredentialsSupplier {\n    /**\n     * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n     * from the credential_source stored in the ADC file.\n     * @param opts The default aws security credentials supplier options object to\n     *   build the supplier with.\n     */\n    constructor(opts) {\n        _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n        this.regionUrl = opts.regionUrl;\n        this.securityCredentialsUrl = opts.securityCredentialsUrl;\n        this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Returns the active AWS region. This first checks to see if the region\n     * is available as an environment variable. If it is not, then the supplier\n     * will call the region URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS region string.\n     */\n    async getAwsRegion(context) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: metadataHeaders,\n        };\n        const response = await context.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * Returns AWS security credentials. This first checks to see if the credentials\n     * is available as environment variables. If it is not, then the supplier\n     * will call the security credentials URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS security credentials.\n     */\n    async getAwsSecurityCredentials(context) {\n        // Check environment variables for permanent credentials first.\n        // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        // Since the role on a VM can change, we don't need to cache it.\n        const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);\n        // Temporary credentials typically last for several hours.\n        // Expiration is returned in response.\n        // Consider future optimization of this logic to cache AWS tokens\n        // until their natural expiration.\n        const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n        return {\n            accessKeyId: awsCreds.AccessKeyId,\n            secretAccessKey: awsCreds.SecretAccessKey,\n            token: awsCreds.Token,\n        };\n    }\n}\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken = \n/**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.imdsV2SessionTokenUrl,\n        method: 'PUT',\n        responseType: 'text',\n        headers: { 'x-aws-ec2-metadata-token-ttl-seconds': '300' },\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName = \n/**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n    if (!this.securityCredentialsUrl) {\n        throw new Error('Unable to determine AWS role name due to missing ' +\n            '\"options.credential_source.url\"');\n    }\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.securityCredentialsUrl,\n        method: 'GET',\n        responseType: 'text',\n        headers: headers,\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials = \n/**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n    const response = await transporter.request({\n        ...this.additionalGaxiosOptions,\n        url: `${this.securityCredentialsUrl}/${roleName}`,\n        responseType: 'json',\n        headers: headers,\n    });\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n    // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n    // Only one is required.\n    return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null);\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n    // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n    if (process.env['AWS_ACCESS_KEY_ID'] &&\n        process.env['AWS_SECRET_ACCESS_KEY']) {\n        return {\n            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n            token: process.env['AWS_SESSION_TOKEN'],\n        };\n    }\n    return null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
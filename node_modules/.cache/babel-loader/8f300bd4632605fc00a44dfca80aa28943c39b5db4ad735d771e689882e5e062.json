{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityPoolClient = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst util_1 = require(\"../util\");\nconst filesubjecttokensupplier_1 = require(\"./filesubjecttokensupplier\");\nconst urlsubjecttokensupplier_1 = require(\"./urlsubjecttokensupplier\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiate an IdentityPoolClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid file-sourced or\n   * url-sourced credential or a workforce pool user project is provided\n   * with a non workforce audience.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file. The camelCased options\n   *   are aliases for the snake_cased options.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const subjectTokenSupplier = opts.get('subject_token_supplier');\n    // Validate credential sourcing configuration.\n    if (!credentialSource && !subjectTokenSupplier) {\n      throw new Error('A credential source or subject token supplier must be specified.');\n    }\n    if (credentialSource && subjectTokenSupplier) {\n      throw new Error('Only one of credential source or subject token supplier can be specified.');\n    }\n    if (subjectTokenSupplier) {\n      this.subjectTokenSupplier = subjectTokenSupplier;\n      this.credentialSourceType = 'programmatic';\n    } else {\n      const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n      const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n      // Text is the default format type.\n      const formatType = formatOpts.get('type') || 'text';\n      const formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n      if (formatType !== 'json' && formatType !== 'text') {\n        throw new Error(`Invalid credential_source format \"${formatType}\"`);\n      }\n      if (formatType === 'json' && !formatSubjectTokenFieldName) {\n        throw new Error('Missing subject_token_field_name for JSON credential_source format');\n      }\n      const file = credentialSourceOpts.get('file');\n      const url = credentialSourceOpts.get('url');\n      const headers = credentialSourceOpts.get('headers');\n      if (file && url) {\n        throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n      } else if (file && !url) {\n        this.credentialSourceType = 'file';\n        this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n          filePath: file,\n          formatType: formatType,\n          subjectTokenFieldName: formatSubjectTokenFieldName\n        });\n      } else if (!file && url) {\n        this.credentialSourceType = 'url';\n        this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n          url: url,\n          formatType: formatType,\n          subjectTokenFieldName: formatSubjectTokenFieldName,\n          headers: headers,\n          additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG\n        });\n      } else {\n        throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n      }\n    }\n  }\n  /**\n   * Triggered when a external subject token is needed to be exchanged for a GCP\n   * access token via GCP STS endpoint. Gets a subject token by calling\n   * the configured {@link SubjectTokenSupplier}\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n  }\n}\nexports.IdentityPoolClient = IdentityPoolClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","IdentityPoolClient","baseexternalclient_1","require","util_1","filesubjecttokensupplier_1","urlsubjecttokensupplier_1","BaseExternalAccountClient","constructor","options","additionalOptions","opts","originalOrCamelOptions","credentialSource","get","subjectTokenSupplier","Error","credentialSourceType","credentialSourceOpts","formatOpts","formatType","formatSubjectTokenFieldName","file","url","headers","FileSubjectTokenSupplier","filePath","subjectTokenFieldName","UrlSubjectTokenSupplier","additionalGaxiosOptions","RETRY_CONFIG","retrieveSubjectToken","getSubjectToken","supplierContext"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/identitypoolclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityPoolClient = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst util_1 = require(\"../util\");\nconst filesubjecttokensupplier_1 = require(\"./filesubjecttokensupplier\");\nconst urlsubjecttokensupplier_1 = require(\"./urlsubjecttokensupplier\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const subjectTokenSupplier = opts.get('subject_token_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !subjectTokenSupplier) {\n            throw new Error('A credential source or subject token supplier must be specified.');\n        }\n        if (credentialSource && subjectTokenSupplier) {\n            throw new Error('Only one of credential source or subject token supplier can be specified.');\n        }\n        if (subjectTokenSupplier) {\n            this.subjectTokenSupplier = subjectTokenSupplier;\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n            // Text is the default format type.\n            const formatType = formatOpts.get('type') || 'text';\n            const formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n            if (formatType !== 'json' && formatType !== 'text') {\n                throw new Error(`Invalid credential_source format \"${formatType}\"`);\n            }\n            if (formatType === 'json' && !formatSubjectTokenFieldName) {\n                throw new Error('Missing subject_token_field_name for JSON credential_source format');\n            }\n            const file = credentialSourceOpts.get('file');\n            const url = credentialSourceOpts.get('url');\n            const headers = credentialSourceOpts.get('headers');\n            if (file && url) {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n            else if (file && !url) {\n                this.credentialSourceType = 'file';\n                this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n                    filePath: file,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                });\n            }\n            else if (!file && url) {\n                this.credentialSourceType = 'url';\n                this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n                    url: url,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                    headers: headers,\n                    additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG,\n                });\n            }\n            else {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint. Gets a subject token by calling\n     * the configured {@link SubjectTokenSupplier}\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC5D,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AACjC,MAAME,0BAA0B,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AACxE,MAAMG,yBAAyB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AACtE;AACA;AACA;AACA;AACA,MAAMF,kBAAkB,SAASC,oBAAoB,CAACK,yBAAyB,CAAC;EAC5E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,OAAO,EAAEC,iBAAiB,EAAE;IACpC,KAAK,CAACD,OAAO,EAAEC,iBAAiB,CAAC;IACjC,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACQ,sBAAsB,EAAEH,OAAO,CAAC;IACxD,MAAMI,gBAAgB,GAAGF,IAAI,CAACG,GAAG,CAAC,mBAAmB,CAAC;IACtD,MAAMC,oBAAoB,GAAGJ,IAAI,CAACG,GAAG,CAAC,wBAAwB,CAAC;IAC/D;IACA,IAAI,CAACD,gBAAgB,IAAI,CAACE,oBAAoB,EAAE;MAC5C,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;IACvF;IACA,IAAIH,gBAAgB,IAAIE,oBAAoB,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,2EAA2E,CAAC;IAChG;IACA,IAAID,oBAAoB,EAAE;MACtB,IAAI,CAACA,oBAAoB,GAAGA,oBAAoB;MAChD,IAAI,CAACE,oBAAoB,GAAG,cAAc;IAC9C,CAAC,MACI;MACD,MAAMC,oBAAoB,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACQ,sBAAsB,EAAEC,gBAAgB,CAAC;MACjF,MAAMM,UAAU,GAAG,CAAC,CAAC,EAAEf,MAAM,CAACQ,sBAAsB,EAAEM,oBAAoB,CAACJ,GAAG,CAAC,QAAQ,CAAC,CAAC;MACzF;MACA,MAAMM,UAAU,GAAGD,UAAU,CAACL,GAAG,CAAC,MAAM,CAAC,IAAI,MAAM;MACnD,MAAMO,2BAA2B,GAAGF,UAAU,CAACL,GAAG,CAAC,0BAA0B,CAAC;MAC9E,IAAIM,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,MAAM,EAAE;QAChD,MAAM,IAAIJ,KAAK,CAAC,qCAAqCI,UAAU,GAAG,CAAC;MACvE;MACA,IAAIA,UAAU,KAAK,MAAM,IAAI,CAACC,2BAA2B,EAAE;QACvD,MAAM,IAAIL,KAAK,CAAC,oEAAoE,CAAC;MACzF;MACA,MAAMM,IAAI,GAAGJ,oBAAoB,CAACJ,GAAG,CAAC,MAAM,CAAC;MAC7C,MAAMS,GAAG,GAAGL,oBAAoB,CAACJ,GAAG,CAAC,KAAK,CAAC;MAC3C,MAAMU,OAAO,GAAGN,oBAAoB,CAACJ,GAAG,CAAC,SAAS,CAAC;MACnD,IAAIQ,IAAI,IAAIC,GAAG,EAAE;QACb,MAAM,IAAIP,KAAK,CAAC,kFAAkF,CAAC;MACvG,CAAC,MACI,IAAIM,IAAI,IAAI,CAACC,GAAG,EAAE;QACnB,IAAI,CAACN,oBAAoB,GAAG,MAAM;QAClC,IAAI,CAACF,oBAAoB,GAAG,IAAIV,0BAA0B,CAACoB,wBAAwB,CAAC;UAChFC,QAAQ,EAAEJ,IAAI;UACdF,UAAU,EAAEA,UAAU;UACtBO,qBAAqB,EAAEN;QAC3B,CAAC,CAAC;MACN,CAAC,MACI,IAAI,CAACC,IAAI,IAAIC,GAAG,EAAE;QACnB,IAAI,CAACN,oBAAoB,GAAG,KAAK;QACjC,IAAI,CAACF,oBAAoB,GAAG,IAAIT,yBAAyB,CAACsB,uBAAuB,CAAC;UAC9EL,GAAG,EAAEA,GAAG;UACRH,UAAU,EAAEA,UAAU;UACtBO,qBAAqB,EAAEN,2BAA2B;UAClDG,OAAO,EAAEA,OAAO;UAChBK,uBAAuB,EAAE5B,kBAAkB,CAAC6B;QAChD,CAAC,CAAC;MACN,CAAC,MACI;QACD,MAAM,IAAId,KAAK,CAAC,kFAAkF,CAAC;MACvG;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMe,oBAAoBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAAChB,oBAAoB,CAACiB,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;EAC1E;AACJ;AACAlC,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getField = getField;\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nexports.deleteField = deleteField;\nexports.buildQueryStringComponents = buildQueryStringComponents;\nexports.encodeWithSlashes = encodeWithSlashes;\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nexports.applyPattern = applyPattern;\nexports.match = match;\nexports.flattenObject = flattenObject;\nexports.isProto3OptionalField = isProto3OptionalField;\nexports.transcode = transcode;\nexports.overrideHttpRules = overrideHttpRules;\nconst util_1 = require(\"./util\");\nconst httpOptionName = '(google.api.http)';\nconst proto3OptionalName = 'proto3_optional';\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\nfunction getField(request, field, allowObjects = false // in most cases, we need leaf fields\n) {\n  const parts = field.split('.');\n  let value = request;\n  for (const part of parts) {\n    if (typeof value !== 'object') {\n      return undefined;\n    }\n    value = value[part];\n  }\n  if (!allowObjects && typeof value === 'object' && !Array.isArray(value) && value !== null) {\n    return undefined;\n  }\n  return value;\n}\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = '') {\n  if (typeof request !== 'object' || request === null) {\n    return request;\n  }\n  const copy = Object.assign({}, request);\n  for (const key in copy) {\n    if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n      delete copy[key];\n      continue;\n    }\n    const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n    if (Array.isArray(copy[key])) {\n      // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n      copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\n    } else if (typeof copy[key] === 'object' && copy[key] !== null) {\n      copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n    }\n  }\n  return copy;\n}\nfunction deleteField(request, field) {\n  const parts = field.split('.');\n  while (parts.length > 1) {\n    if (typeof request !== 'object') {\n      return;\n    }\n    const part = parts.shift();\n    request = request[part];\n  }\n  const part = parts.shift();\n  if (typeof request !== 'object') {\n    return;\n  }\n  delete request[part];\n}\nfunction buildQueryStringComponents(request, prefix = '') {\n  const resultList = [];\n  for (const key in request) {\n    if (Array.isArray(request[key])) {\n      for (const value of request[key]) {\n        resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n      }\n    } else if (typeof request[key] === 'object' && request[key] !== null) {\n      resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n    } else {\n      resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\n    }\n  }\n  return resultList;\n}\nfunction encodeWithSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join('');\n}\nfunction encodeWithoutSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join('');\n}\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction applyPattern(pattern, fieldValue) {\n  if (!pattern || pattern === '*') {\n    return encodeWithSlashes(fieldValue);\n  }\n  if (!pattern.includes('*') && pattern !== fieldValue) {\n    return undefined;\n  }\n  // since we're converting the pattern to a regex, make necessary precautions:\n  const regex = new RegExp('^' + escapeRegExp(pattern).replace(/\\\\\\*\\\\\\*/g, '(.+)').replace(/\\\\\\*/g, '([^/]+)') + '$');\n  if (!fieldValue.match(regex)) {\n    return undefined;\n  }\n  return encodeWithoutSlashes(fieldValue);\n}\nfunction fieldToCamelCase(field) {\n  const parts = field.split('.');\n  return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\n}\nfunction match(request, pattern) {\n  let url = pattern;\n  const matchedFields = [];\n  for (;;) {\n    const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n    if (!match) {\n      break;\n    }\n    const [, before, field, pattern, after] = match;\n    const camelCasedField = fieldToCamelCase(field);\n    matchedFields.push(fieldToCamelCase(camelCasedField));\n    const fieldValue = getField(request, camelCasedField);\n    if (fieldValue === undefined) {\n      return undefined;\n    }\n    const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n    if (appliedPattern === undefined) {\n      return undefined;\n    }\n    url = before + appliedPattern + after;\n  }\n  return {\n    matchedFields,\n    url\n  };\n}\nfunction flattenObject(request) {\n  const result = {};\n  for (const key in request) {\n    if (request[key] === undefined) {\n      continue;\n    }\n    if (Array.isArray(request[key])) {\n      // According to the http.proto comments, a repeated field may only\n      // contain primitive types, so no extra recursion here.\n      result[key] = request[key];\n      continue;\n    }\n    if (typeof request[key] === 'object' && request[key] !== null) {\n      const nested = flattenObject(request[key]);\n      for (const nestedKey in nested) {\n        result[`${key}.${nestedKey}`] = nested[nestedKey];\n      }\n      continue;\n    }\n    result[key] = request[key];\n  }\n  return result;\n}\nfunction isProto3OptionalField(field) {\n  return field && field.options && field.options[proto3OptionalName];\n}\nfunction transcode(request, parsedOptions) {\n  const httpRules = [];\n  for (const option of parsedOptions) {\n    if (!(httpOptionName in option)) {\n      continue;\n    }\n    const httpRule = option[httpOptionName];\n    httpRules.push(httpRule);\n    if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {\n      const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];\n      httpRules.push(...additionalBindings);\n    }\n  }\n  for (const httpRule of httpRules) {\n    for (const httpMethod of supportedHttpMethods) {\n      if (!(httpMethod in httpRule)) {\n        continue;\n      }\n      const pathTemplate = httpRule[httpMethod];\n      const matchResult = match(request, pathTemplate);\n      if (matchResult === undefined) {\n        continue;\n      }\n      const {\n        url,\n        matchedFields\n      } = matchResult;\n      let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n      if (httpRule.body === '*') {\n        return {\n          httpMethod,\n          url,\n          queryString: '',\n          data\n        };\n      }\n      // one field possibly goes to request data, others go to query string\n      const queryStringObject = data;\n      if (httpRule.body) {\n        data = getField(queryStringObject, fieldToCamelCase(httpRule.body), /*allowObjects:*/true);\n        deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n      } else {\n        data = '';\n      }\n      const queryStringComponents = buildQueryStringComponents(queryStringObject);\n      const queryString = queryStringComponents.join('&');\n      if (!data || typeof data === 'object' && Object.keys(data).length === 0) {\n        data = '';\n      }\n      return {\n        httpMethod,\n        url,\n        queryString,\n        data\n      };\n    }\n  }\n  return undefined;\n}\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n  for (const rule of httpRules) {\n    if (!rule.selector) {\n      continue;\n    }\n    const rpc = protoJson.lookup(rule.selector);\n    // Not support override on non-exist RPC or a RPC without an annotation.\n    // We could reconsider if we have the use case later.\n    if (!rpc || !rpc.parsedOptions) {\n      continue;\n    }\n    for (const item of rpc.parsedOptions) {\n      if (!(httpOptionName in item)) {\n        continue;\n      }\n      const httpOptions = item[httpOptionName];\n      for (const httpMethod in httpOptions) {\n        if (httpMethod in rule) {\n          if (httpMethod === 'additional_bindings') {\n            continue;\n          }\n          httpOptions[httpMethod] = rule[httpMethod];\n        }\n        if (rule.additional_bindings) {\n          httpOptions['additional_bindings'] = !httpOptions['additional_bindings'] ? [] : Array.isArray(httpOptions['additional_bindings']) ? httpOptions['additional_bindings'] : [httpOptions['additional_bindings']];\n          // Make the additional_binding to be an array if it is not.\n          httpOptions['additional_bindings'].push(...rule.additional_bindings);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getField","deepCopyWithoutMatchedFields","deleteField","buildQueryStringComponents","encodeWithSlashes","encodeWithoutSlashes","applyPattern","match","flattenObject","isProto3OptionalField","transcode","overrideHttpRules","util_1","require","httpOptionName","proto3OptionalName","supportedHttpMethods","request","field","allowObjects","parts","split","part","undefined","Array","isArray","fieldsToSkip","fullNamePrefix","copy","assign","key","has","nextFullNamePrefix","map","Set","length","shift","prefix","resultList","push","toString","str","c","encodeURIComponent","join","escapeRegExp","replace","pattern","fieldValue","includes","regex","RegExp","fieldToCamelCase","toCamelCase","url","matchedFields","before","after","camelCasedField","appliedPattern","result","nested","nestedKey","options","parsedOptions","httpRules","option","httpRule","additional_bindings","additionalBindings","httpMethod","pathTemplate","matchResult","data","body","queryString","queryStringObject","queryStringComponents","keys","protoJson","rule","selector","rpc","lookup","item","httpOptions"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/transcoding.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getField = getField;\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nexports.deleteField = deleteField;\nexports.buildQueryStringComponents = buildQueryStringComponents;\nexports.encodeWithSlashes = encodeWithSlashes;\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nexports.applyPattern = applyPattern;\nexports.match = match;\nexports.flattenObject = flattenObject;\nexports.isProto3OptionalField = isProto3OptionalField;\nexports.transcode = transcode;\nexports.overrideHttpRules = overrideHttpRules;\nconst util_1 = require(\"./util\");\nconst httpOptionName = '(google.api.http)';\nconst proto3OptionalName = 'proto3_optional';\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\nfunction getField(request, field, allowObjects = false // in most cases, we need leaf fields\n) {\n    const parts = field.split('.');\n    let value = request;\n    for (const part of parts) {\n        if (typeof value !== 'object') {\n            return undefined;\n        }\n        value = value[part];\n    }\n    if (!allowObjects &&\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        value !== null) {\n        return undefined;\n    }\n    return value;\n}\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = '') {\n    if (typeof request !== 'object' || request === null) {\n        return request;\n    }\n    const copy = Object.assign({}, request);\n    for (const key in copy) {\n        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n            delete copy[key];\n            continue;\n        }\n        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n        if (Array.isArray(copy[key])) {\n            // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n            copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\n        }\n        else if (typeof copy[key] === 'object' && copy[key] !== null) {\n            copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n        }\n    }\n    return copy;\n}\nfunction deleteField(request, field) {\n    const parts = field.split('.');\n    while (parts.length > 1) {\n        if (typeof request !== 'object') {\n            return;\n        }\n        const part = parts.shift();\n        request = request[part];\n    }\n    const part = parts.shift();\n    if (typeof request !== 'object') {\n        return;\n    }\n    delete request[part];\n}\nfunction buildQueryStringComponents(request, prefix = '') {\n    const resultList = [];\n    for (const key in request) {\n        if (Array.isArray(request[key])) {\n            for (const value of request[key]) {\n                resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n            }\n        }\n        else if (typeof request[key] === 'object' && request[key] !== null) {\n            resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n        }\n        else {\n            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\n        }\n    }\n    return resultList;\n}\nfunction encodeWithSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction encodeWithoutSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction applyPattern(pattern, fieldValue) {\n    if (!pattern || pattern === '*') {\n        return encodeWithSlashes(fieldValue);\n    }\n    if (!pattern.includes('*') && pattern !== fieldValue) {\n        return undefined;\n    }\n    // since we're converting the pattern to a regex, make necessary precautions:\n    const regex = new RegExp('^' +\n        escapeRegExp(pattern)\n            .replace(/\\\\\\*\\\\\\*/g, '(.+)')\n            .replace(/\\\\\\*/g, '([^/]+)') +\n        '$');\n    if (!fieldValue.match(regex)) {\n        return undefined;\n    }\n    return encodeWithoutSlashes(fieldValue);\n}\nfunction fieldToCamelCase(field) {\n    const parts = field.split('.');\n    return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\n}\nfunction match(request, pattern) {\n    let url = pattern;\n    const matchedFields = [];\n    for (;;) {\n        const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n        if (!match) {\n            break;\n        }\n        const [, before, field, pattern, after] = match;\n        const camelCasedField = fieldToCamelCase(field);\n        matchedFields.push(fieldToCamelCase(camelCasedField));\n        const fieldValue = getField(request, camelCasedField);\n        if (fieldValue === undefined) {\n            return undefined;\n        }\n        const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n        if (appliedPattern === undefined) {\n            return undefined;\n        }\n        url = before + appliedPattern + after;\n    }\n    return { matchedFields, url };\n}\nfunction flattenObject(request) {\n    const result = {};\n    for (const key in request) {\n        if (request[key] === undefined) {\n            continue;\n        }\n        if (Array.isArray(request[key])) {\n            // According to the http.proto comments, a repeated field may only\n            // contain primitive types, so no extra recursion here.\n            result[key] = request[key];\n            continue;\n        }\n        if (typeof request[key] === 'object' && request[key] !== null) {\n            const nested = flattenObject(request[key]);\n            for (const nestedKey in nested) {\n                result[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n            continue;\n        }\n        result[key] = request[key];\n    }\n    return result;\n}\nfunction isProto3OptionalField(field) {\n    return field && field.options && field.options[proto3OptionalName];\n}\nfunction transcode(request, parsedOptions) {\n    const httpRules = [];\n    for (const option of parsedOptions) {\n        if (!(httpOptionName in option)) {\n            continue;\n        }\n        const httpRule = option[httpOptionName];\n        httpRules.push(httpRule);\n        if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {\n            const additionalBindings = Array.isArray(httpRule.additional_bindings)\n                ? httpRule.additional_bindings\n                : [httpRule.additional_bindings];\n            httpRules.push(...additionalBindings);\n        }\n    }\n    for (const httpRule of httpRules) {\n        for (const httpMethod of supportedHttpMethods) {\n            if (!(httpMethod in httpRule)) {\n                continue;\n            }\n            const pathTemplate = httpRule[httpMethod];\n            const matchResult = match(request, pathTemplate);\n            if (matchResult === undefined) {\n                continue;\n            }\n            const { url, matchedFields } = matchResult;\n            let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n            if (httpRule.body === '*') {\n                return { httpMethod, url, queryString: '', data };\n            }\n            // one field possibly goes to request data, others go to query string\n            const queryStringObject = data;\n            if (httpRule.body) {\n                data = getField(queryStringObject, fieldToCamelCase(httpRule.body), \n                /*allowObjects:*/ true);\n                deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n            }\n            else {\n                data = '';\n            }\n            const queryStringComponents = buildQueryStringComponents(queryStringObject);\n            const queryString = queryStringComponents.join('&');\n            if (!data ||\n                (typeof data === 'object' && Object.keys(data).length === 0)) {\n                data = '';\n            }\n            return { httpMethod, url, queryString, data };\n        }\n    }\n    return undefined;\n}\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n    for (const rule of httpRules) {\n        if (!rule.selector) {\n            continue;\n        }\n        const rpc = protoJson.lookup(rule.selector);\n        // Not support override on non-exist RPC or a RPC without an annotation.\n        // We could reconsider if we have the use case later.\n        if (!rpc || !rpc.parsedOptions) {\n            continue;\n        }\n        for (const item of rpc.parsedOptions) {\n            if (!(httpOptionName in item)) {\n                continue;\n            }\n            const httpOptions = item[httpOptionName];\n            for (const httpMethod in httpOptions) {\n                if (httpMethod in rule) {\n                    if (httpMethod === 'additional_bindings') {\n                        continue;\n                    }\n                    httpOptions[httpMethod] =\n                        rule[httpMethod];\n                }\n                if (rule.additional_bindings) {\n                    httpOptions['additional_bindings'] = !httpOptions['additional_bindings']\n                        ? []\n                        : Array.isArray(httpOptions['additional_bindings'])\n                            ? httpOptions['additional_bindings']\n                            : [httpOptions['additional_bindings']];\n                    // Make the additional_binding to be an array if it is not.\n                    httpOptions['additional_bindings'].push(...rule.additional_bindings);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=transcoding.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
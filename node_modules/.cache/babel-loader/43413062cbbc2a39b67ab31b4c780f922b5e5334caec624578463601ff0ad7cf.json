{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.bulk = exports.universe = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n  'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n  none: \"don't try to ping the metadata server, but don't try to use it either\",\n  'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n  'ping-only': 'skip the BIOS probe, and go straight to pinging'\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  }\n  // If no scheme is provided default to HTTP:\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n  return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\nasync function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {\n  let metadataKey = '';\n  let params = {};\n  let headers = {};\n  if (typeof type === 'object') {\n    const metadataAccessor = type;\n    metadataKey = metadataAccessor.metadataKey;\n    params = metadataAccessor.params || params;\n    headers = metadataAccessor.headers || headers;\n    noResponseRetries = metadataAccessor.noResponseRetries || noResponseRetries;\n    fastFail = metadataAccessor.fastFail || fastFail;\n  } else {\n    metadataKey = type;\n  }\n  if (typeof options === 'string') {\n    metadataKey += `/${options}`;\n  } else {\n    validate(options);\n    if (options.property) {\n      metadataKey += `/${options.property}`;\n    }\n    headers = options.headers || headers;\n    params = options.params || params;\n  }\n  try {\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const res = await requestMethod({\n      url: `${getBaseUrl()}/${metadataKey}`,\n      headers: {\n        ...exports.HEADERS,\n        ...headers\n      },\n      retryConfig: {\n        noResponseRetries\n      },\n      params,\n      responseType: 'text',\n      timeout: requestTimeout()\n    });\n    // NOTE: node.js converts all incoming headers to lower case.\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n      throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n    } else if (!res.data) {\n      throw new Error('Invalid response from the metadata service');\n    }\n    if (typeof res.data === 'string') {\n      try {\n        return jsonBigint.parse(res.data);\n      } catch (_a) {\n        /* ignore */\n      }\n    }\n    return res.data;\n  } catch (e) {\n    const err = e;\n    if (err.response && err.response.status !== 200) {\n      err.message = `Unsuccessful response status code. ${err.message}`;\n    }\n    throw e;\n  }\n}\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = {\n    ...options,\n    url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  };\n  // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment signficantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Additional logic has been added to make sure that we don't create an\n  // unhandled rejection in scenarios where a failure happens sometime\n  // after a success.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n  let responded = false;\n  const r1 = (0, gaxios_1.request)(options).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r2;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r1;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const serviceAccount: {} = await instance('service-accounts/');\n * const serviceAccountEmail: string = await instance('service-accounts/default/email');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP project.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const projectId: string = await project('project-id');\n * const numericProjectId: number = await project('numeric-project-id');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\nexports.project = project;\n/**\n * Obtain metadata for the current universe.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const universeDomain: string = await universe('universe_domain');\n * ```\n */\nfunction universe(options) {\n  return metadataAccessor('universe', options);\n}\nexports.universe = universe;\n/**\n * Retrieve metadata items in parallel.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const data = await bulk([\n *   {\n *     metadataKey: 'instance',\n *   },\n *   {\n *     metadataKey: 'project/project-id',\n *   },\n * ] as const);\n *\n * // data.instance;\n * // data['project/project-id'];\n * ```\n *\n * @param properties The metadata properties to retrieve\n * @returns The metadata in `metadatakey:value` format\n */\nasync function bulk(properties) {\n  const r = {};\n  await Promise.all(properties.map(item => {\n    return (async () => {\n      const res = await metadataAccessor(item);\n      const key = item.metadataKey;\n      r[key] = res;\n    })();\n  }));\n  return r;\n}\nexports.bulk = bulk;\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n  if (process.env.METADATA_SERVER_DETECTION) {\n    const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n    if (!(value in exports.METADATA_SERVER_DETECTION)) {\n      throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n    }\n    switch (value) {\n      case 'assume-present':\n        return true;\n      case 'none':\n        return false;\n      case 'bios-only':\n        return getGCPResidency();\n      case 'ping-only':\n      // continue, we want to ping the server\n    }\n  }\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(),\n      // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (e) {\n    const err = e;\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && (\n      // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code;\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      }\n      // Failure to resolve the metadata service means that it is not available.\n      return false;\n    }\n  }\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\nfunction getGCPResidency() {\n  if (exports.gcpResidencyCache === null) {\n    setGCPResidency();\n  }\n  return exports.gcpResidencyCache;\n}\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\nfunction setGCPResidency(value = null) {\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n  return getGCPResidency() ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"names":["gaxios_1","require","jsonBigint","gcp_residency_1","exports","BASE_PATH","HOST_ADDRESS","SECONDARY_HOST_ADDRESS","HEADER_NAME","HEADER_VALUE","HEADERS","Object","freeze","METADATA_SERVER_DETECTION","none","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","metadataKey","params","headers","property","requestMethod","fastFailMetadataRequest","request","res","url","retryConfig","responseType","timeout","requestTimeout","toLowerCase","data","parse","_a","e","err","response","status","message","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","instance","project","universe","bulk","properties","r","all","map","item","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","isAvailable","value","trim","toLocaleLowerCase","RangeError","join","getGCPResidency","undefined","DEBUG_AUTH","console","info","code","includes","emitWarning","resetIsAvailableCache","gcpResidencyCache","setGCPResidency","detectGCPResidency","__exportStar"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
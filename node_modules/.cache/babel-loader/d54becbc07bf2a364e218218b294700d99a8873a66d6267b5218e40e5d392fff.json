{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nexports.lro = lro;\nexports.createApiCall = createApiCall;\nconst objectHash = require(\"object-hash\");\nconst protobuf = require(\"protobufjs\");\nexports.protobuf = protobuf;\nconst gax = require(\"./gax\");\nconst routingHeader = require(\"./routingHeader\");\nexports.routingHeader = routingHeader;\nconst status_1 = require(\"./status\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst operationsClient_1 = require(\"./operationsClient\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst fallbackRest = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\nconst streaming_1 = require(\"./streamingCalls/streaming\");\nconst util_1 = require(\"./util\");\nconst IamProtos = require(\"../protos/iam_service\");\nexports.IamProtos = IamProtos;\nconst LocationProtos = require(\"../protos/locations\");\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = require(\"../protos/operations\");\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = require(\"./pathTemplate\");\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function () {\n    return pathTemplate_1.PathTemplate;\n  }\n});\nvar gax_1 = require(\"./gax\");\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.RetryOptions;\n  }\n});\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.createDefaultBackoffSettings;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\nvar descriptor_1 = require(\"./descriptor\");\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.StreamDescriptor;\n  }\n});\nvar streaming_2 = require(\"./streamingCalls/streaming\");\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function () {\n    return streaming_2.StreamType;\n  }\n});\nvar operationsClient_2 = require(\"./operationsClient\");\nObject.defineProperty(exports, \"OperationsClient\", {\n  enumerable: true,\n  get: function () {\n    return operationsClient_2.OperationsClient;\n  }\n});\nvar iamService_1 = require(\"./iamService\");\nObject.defineProperty(exports, \"IamClient\", {\n  enumerable: true,\n  get: function () {\n    return iamService_1.IamClient;\n  }\n});\nvar locationService_1 = require(\"./locationService\");\nObject.defineProperty(exports, \"LocationsClient\", {\n  enumerable: true,\n  get: function () {\n    return locationService_1.LocationsClient;\n  }\n});\nvar util_2 = require(\"./util\");\nObject.defineProperty(exports, \"makeUUID\", {\n  enumerable: true,\n  get: function () {\n    return util_2.makeUUID;\n  }\n});\nexports.defaultToObjectOptions = {\n  keepCase: false,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  constructor(options = {}) {\n    var _a;\n    if (!(0, featureDetection_1.isNodeJS)()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n      }\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n    this.fallback = options.fallback ? true : false;\n    this.grpcVersion = require('../../package.json').version;\n    this.httpRules = options.httpRules;\n    this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;\n  }\n  /**\n   * gRPC-fallback version of loadProto\n   * Loads the protobuf root object from a JSON object created from a proto file\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n   * @returns {Object} Root namespace of proto JSON\n   */\n  loadProto(jsonObject) {\n    const rootObject = protobuf.Root.fromJSON(jsonObject);\n    return rootObject;\n  }\n  loadProtoJSON(json, ignoreCache = false) {\n    const hash = objectHash(JSON.stringify(json)).toString();\n    const cached = GrpcClient.protoCache.get(hash);\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n    const root = protobuf.Root.fromJSON(json);\n    GrpcClient.protoCache.set(hash, root);\n    return root;\n  }\n  static getServiceMethods(service) {\n    const methods = {};\n    for (const [methodName, methodObject] of Object.entries(service.methods)) {\n      const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n      methods[methodNameLowerCamelCase] = methodObject;\n    }\n    return methods;\n  }\n  /**\n   * gRPC-fallback version of constructSettings\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    function buildMetadata(abTests, moreHeaders) {\n      const metadata = {};\n      if (!headers) {\n        headers = {};\n      }\n      // Since gRPC expects each header to be an array,\n      // we are doing the same for fallback here.\n      for (const key in headers) {\n        metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n      }\n      // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n      const clientVersions = [];\n      if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n        clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n      }\n      clientVersions.push(`grpc-web/${exports.version}`);\n      metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n      if (!moreHeaders) {\n        return metadata;\n      }\n      for (const key in moreHeaders) {\n        if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n          const value = moreHeaders[key];\n          if (Array.isArray(value)) {\n            if (metadata[key] === undefined) {\n              metadata[key] = value;\n            } else {\n              if (Array.isArray(metadata[key])) {\n                metadata[key].push(...value);\n              } else {\n                throw new Error(`Can not add value ${value} to the call metadata.`);\n              }\n            }\n          } else {\n            metadata[key] = [value];\n          }\n        }\n      }\n      return metadata;\n    }\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n      metadataBuilder: buildMetadata\n    });\n  }\n  /**\n   * gRPC-fallback version of createStub\n   * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n   *\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n   * @param {Object} opts - Connection options, as described below.\n   * @param {string} opts.servicePath - The hostname of the API endpoint service.\n   * @param {number} opts.port - The port of the service.\n   * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n   */\n  async createStub(service, opts,\n  // For consistency with createStub in grpc.ts, customServicePath is defined:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  customServicePath) {\n    if (!this.authClient) {\n      if (this.auth && 'getClient' in this.auth) {\n        this.authClient = await this.auth.getClient();\n      } else if (this.auth && 'getRequestHeaders' in this.auth) {\n        this.authClient = this.auth;\n      }\n    }\n    if (!this.authClient) {\n      throw new Error('No authentication was provided');\n    }\n    if (!opts.universeDomain) {\n      opts.universeDomain = 'googleapis.com';\n    }\n    if (opts.universeDomain) {\n      const universeFromAuth = this.authClient.universeDomain;\n      if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\n        throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n      }\n    }\n    service.resolveAll();\n    const methods = GrpcClient.getServiceMethods(service);\n    const protocol = opts.protocol || 'https';\n    let servicePath = opts.servicePath;\n    if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n      servicePath = service.options['(google.api.default_host)'];\n    }\n    if (!servicePath) {\n      throw new Error(`Cannot determine service API path for service ${service.name}.`);\n    }\n    let servicePort;\n    const match = servicePath.match(/^(.*):(\\d+)$/);\n    if (match) {\n      servicePath = match[1];\n      servicePort = parseInt(match[2]);\n    }\n    if (opts.port) {\n      servicePort = opts.port;\n    } else if (!servicePort) {\n      servicePort = 443;\n    }\n    const encoder = fallbackRest.encodeRequest;\n    const decoder = fallbackRest.decodeResponse;\n    const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);\n    return serviceStub;\n  }\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message) {\n    return gax.createByteLengthFunction(message);\n  }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  if (options.protoJson) {\n    options = Object.assign(options, {\n      fallback: true\n    });\n  }\n  const gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback // unused; for compatibility only\n) {\n  if (descriptor && 'streaming' in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n    return () => {\n      throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\n    };\n  }\n  if (descriptor && 'streaming' in descriptor && !(0, featureDetection_1.isNodeJS)()) {\n    return () => {\n      throw new Error('Server streaming over the REST transport is only supported in Node.js.');\n    };\n  }\n  return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.protobufMinimal = require(\"protobufjs/minimal\");\nvar warnings_1 = require(\"./warnings\");\nObject.defineProperty(exports, \"warn\", {\n  enumerable: true,\n  get: function () {\n    return warnings_1.warn;\n  }\n});\nvar longrunning_1 = require(\"./longRunningCalls/longrunning\");\nObject.defineProperty(exports, \"Operation\", {\n  enumerable: true,\n  get: function () {\n    return longrunning_1.Operation;\n  }\n});\nObject.defineProperty(exports, \"operation\", {\n  enumerable: true,\n  get: function () {\n    return longrunning_1.operation;\n  }\n});\nvar googleError_1 = require(\"./googleError\");\nObject.defineProperty(exports, \"GoogleError\", {\n  enumerable: true,\n  get: function () {\n    return googleError_1.GoogleError;\n  }\n});\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"names":["Object","defineProperty","exports","value","fallback","GoogleError","operation","Operation","warn","protobufMinimal","protobuf","LocationProtos","IamProtos","operationsProtos","GrpcClient","defaultToObjectOptions","makeUUID","LocationsClient","IamClient","OperationsClient","StreamType","StreamDescriptor","PageDescriptor","LongrunningDescriptor","BundleDescriptor","version","createDefaultBackoffSettings","RetryOptions","constructSettings","CallSettings","routingHeader","PathTemplate","lro","createApiCall","objectHash","require","gax","status_1","google_auth_library_1","operationsClient_1","createApiCall_1","fallbackRest","featureDetection_1","fallbackServiceStub_1","streaming_1","util_1","pathTemplate_1","enumerable","get","gax_1","descriptor_1","streaming_2","operationsClient_2","iamService_1","locationService_1","util_2","keepCase","longs","String","enums","defaults","oneofs","CLIENT_VERSION_HEADER","clearProtoCache","protoCache","clear","constructor","options","_a","isNodeJS","auth","Error","JSON","stringify","GoogleAuth","grpcVersion","httpRules","numericEnums","loadProto","jsonObject","rootObject","Root","fromJSON","loadProtoJSON","json","ignoreCache","hash","toString","cached","root","set","getServiceMethods","service","methods","methodName","methodObject","entries","methodNameLowerCamelCase","toLowerCamelCase","serviceName","clientConfig","configOverrides","headers","buildMetadata","abTests","moreHeaders","metadata","key","Array","isArray","clientVersions","push","split","join","toLowerCase","undefined","Status","metadataBuilder","createStub","opts","customServicePath","authClient","getClient","universeDomain","universeFromAuth","resolveAll","protocol","servicePath","name","servicePort","match","parseInt","port","encoder","encodeRequest","decoder","decodeResponse","serviceStub","generateServiceStub","createByteLengthFunction","message","Map","assign","scopes","protoJson","gaxGrpc","OperationsClientBuilder","func","settings","descriptor","_fallback","type","SERVER_STREAMING","warnings_1","longrunning_1","googleError_1","module"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/fallback.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nexports.lro = lro;\nexports.createApiCall = createApiCall;\nconst objectHash = require(\"object-hash\");\nconst protobuf = require(\"protobufjs\");\nexports.protobuf = protobuf;\nconst gax = require(\"./gax\");\nconst routingHeader = require(\"./routingHeader\");\nexports.routingHeader = routingHeader;\nconst status_1 = require(\"./status\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst operationsClient_1 = require(\"./operationsClient\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst fallbackRest = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\nconst streaming_1 = require(\"./streamingCalls/streaming\");\nconst util_1 = require(\"./util\");\nconst IamProtos = require(\"../protos/iam_service\");\nexports.IamProtos = IamProtos;\nconst LocationProtos = require(\"../protos/locations\");\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = require(\"../protos/operations\");\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = require(\"./pathTemplate\");\nObject.defineProperty(exports, \"PathTemplate\", { enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } });\nvar gax_1 = require(\"./gax\");\nObject.defineProperty(exports, \"CallSettings\", { enumerable: true, get: function () { return gax_1.CallSettings; } });\nObject.defineProperty(exports, \"constructSettings\", { enumerable: true, get: function () { return gax_1.constructSettings; } });\nObject.defineProperty(exports, \"RetryOptions\", { enumerable: true, get: function () { return gax_1.RetryOptions; } });\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", { enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } });\nexports.version = require('../../package.json').version + '-fallback';\nvar descriptor_1 = require(\"./descriptor\");\nObject.defineProperty(exports, \"BundleDescriptor\", { enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } });\nObject.defineProperty(exports, \"LongrunningDescriptor\", { enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } });\nObject.defineProperty(exports, \"PageDescriptor\", { enumerable: true, get: function () { return descriptor_1.PageDescriptor; } });\nObject.defineProperty(exports, \"StreamDescriptor\", { enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } });\nvar streaming_2 = require(\"./streamingCalls/streaming\");\nObject.defineProperty(exports, \"StreamType\", { enumerable: true, get: function () { return streaming_2.StreamType; } });\nvar operationsClient_2 = require(\"./operationsClient\");\nObject.defineProperty(exports, \"OperationsClient\", { enumerable: true, get: function () { return operationsClient_2.OperationsClient; } });\nvar iamService_1 = require(\"./iamService\");\nObject.defineProperty(exports, \"IamClient\", { enumerable: true, get: function () { return iamService_1.IamClient; } });\nvar locationService_1 = require(\"./locationService\");\nObject.defineProperty(exports, \"LocationsClient\", { enumerable: true, get: function () { return locationService_1.LocationsClient; } });\nvar util_2 = require(\"./util\");\nObject.defineProperty(exports, \"makeUUID\", { enumerable: true, get: function () { return util_2.makeUUID; } });\nexports.defaultToObjectOptions = {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n     *  to use in Node.js. Required for browser, optional for Node.js.\n     * @constructor\n     */\n    constructor(options = {}) {\n        var _a;\n        if (!(0, featureDetection_1.isNodeJS)()) {\n            if (!options.auth) {\n                throw new Error(JSON.stringify(options) +\n                    'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n            }\n            this.auth = options.auth;\n        }\n        else {\n            this.auth =\n                options.auth ||\n                    new google_auth_library_1.GoogleAuth(options);\n        }\n        this.fallback = options.fallback ? true : false;\n        this.grpcVersion = require('../../package.json').version;\n        this.httpRules = options.httpRules;\n        this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = objectHash(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\n            const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for (const key in headers) {\n                metadata[key] = Array.isArray(headers[key])\n                    ? headers[key]\n                    : [headers[key]];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] &&\n                metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for (const key in moreHeaders) {\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        }\n                        else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            }\n                            else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    }\n                    else {\n                        metadata[key] = [value];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n    async createStub(service, opts, \n    // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        if (!this.authClient) {\n            if (this.auth && 'getClient' in this.auth) {\n                this.authClient = (await this.auth.getClient());\n            }\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error('No authentication was provided');\n        }\n        if (!opts.universeDomain) {\n            opts.universeDomain = 'googleapis.com';\n        }\n        if (opts.universeDomain) {\n            const universeFromAuth = this.authClient.universeDomain;\n            if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        service.resolveAll();\n        const methods = GrpcClient.getServiceMethods(service);\n        const protocol = opts.protocol || 'https';\n        let servicePath = opts.servicePath;\n        if (!servicePath &&\n            service.options &&\n            service.options['(google.api.default_host)']) {\n            servicePath = service.options['(google.api.default_host)'];\n        }\n        if (!servicePath) {\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\n        }\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n        if (match) {\n            servicePath = match[1];\n            servicePort = parseInt(match[2]);\n        }\n        if (opts.port) {\n            servicePort = opts.port;\n        }\n        else if (!servicePort) {\n            servicePort = 443;\n        }\n        const encoder = fallbackRest.encodeRequest;\n        const decoder = fallbackRest.decodeResponse;\n        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);\n        return serviceStub;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n    options = Object.assign({ scopes: [] }, options);\n    if (options.protoJson) {\n        options = Object.assign(options, { fallback: true });\n    }\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback // unused; for compatibility only\n) {\n    if (descriptor &&\n        'streaming' in descriptor &&\n        descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n        return () => {\n            throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\n        };\n    }\n    if (descriptor && 'streaming' in descriptor && !(0, featureDetection_1.isNodeJS)()) {\n        return () => {\n            throw new Error('Server streaming over the REST transport is only supported in Node.js.');\n        };\n    }\n    return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.protobufMinimal = require(\"protobufjs/minimal\");\nvar warnings_1 = require(\"./warnings\");\nObject.defineProperty(exports, \"warn\", { enumerable: true, get: function () { return warnings_1.warn; } });\nvar longrunning_1 = require(\"./longRunningCalls/longrunning\");\nObject.defineProperty(exports, \"Operation\", { enumerable: true, get: function () { return longrunning_1.Operation; } });\nObject.defineProperty(exports, \"operation\", { enumerable: true, get: function () { return longrunning_1.operation; } });\nvar googleError_1 = require(\"./googleError\");\nObject.defineProperty(exports, \"GoogleError\", { enumerable: true, get: function () { return googleError_1.GoogleError; } });\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;\n//# sourceMappingURL=fallback.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
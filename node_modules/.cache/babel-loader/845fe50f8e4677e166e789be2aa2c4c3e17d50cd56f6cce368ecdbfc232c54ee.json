{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = require(\"./gax\");\nconst warnings_1 = require(\"./warnings\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./locations_client_config.json\");\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n  /**\n   * Construct an instance of LocationsClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    this.gaxGrpc = gaxGrpc;\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = gaxGrpc.auth;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations')\n    };\n    // Put together the default options sent with requests.\n    this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = warnings_1.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.locationsStub) {\n      return this.locationsStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.location.Locations.\n    this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.location.Locations') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const locationsStubMethods = ['listLocations', 'getLocation'];\n    for (const methodName of locationsStubMethods) {\n      const callPromise = this.locationsStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n      const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.locationsStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getLocation(request);\n   */\n  getLocation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listLocationsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listLocations(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listLocations(request, options, callback);\n  }\n  /**\n   * Equivalent to `listLocations`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n  listLocationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    this.initialize();\n    if (!this._terminated) {\n      return this.locationsStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.LocationsClient = LocationsClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","LocationsClient","gax","require","warnings_1","createApiCall_1","routingHeader","pageDescriptor_1","jsonProtos","gapicConfig","version","constructor","gaxGrpc","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","scopes","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","listLocations","PageDescriptor","_defaults","constructSettings","join","innerApiCalls","warn","initialize","locationsStub","createStub","lookupService","google","cloud","location","Locations","locationsStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","getLocation","request","optionsOrCallback","options","otherArgs","headers","fromParams","name","listLocationsAsync","callSettings","CallSettings","asyncIterate","close","resolve"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/locationService.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = require(\"./gax\");\nconst warnings_1 = require(\"./warnings\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./locations_client_config.json\");\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n    /**\n     * Construct an instance of LocationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        this.gaxGrpc = gaxGrpc;\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = warnings_1.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.locationsStub) {\n            return this.locationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.location.Locations.\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.location.Locations')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const locationsStubMethods = ['listLocations', 'getLocation'];\n        for (const methodName of locationsStubMethods) {\n            const callPromise = this.locationsStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.locationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getLocation(request);\n     */\n    getLocation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listLocationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listLocations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listLocations(request, options, callback);\n    }\n    /**\n     * Equivalent to `listLocations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listLocationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.locationsStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LocationsClient = LocationsClient;\n//# sourceMappingURL=locationService.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth2Client = exports.ClientAuthentication = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n  CodeChallengeMethod[\"Plain\"] = \"plain\";\n  CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n  CertificateFormat[\"PEM\"] = \"PEM\";\n  CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\n/**\n * The client authentication type. Supported values are basic, post, and none.\n * https://datatracker.ietf.org/doc/html/rfc7591#section-2\n */\nvar ClientAuthentication;\n(function (ClientAuthentication) {\n  ClientAuthentication[\"ClientSecretPost\"] = \"ClientSecretPost\";\n  ClientAuthentication[\"ClientSecretBasic\"] = \"ClientSecretBasic\";\n  ClientAuthentication[\"None\"] = \"None\";\n})(ClientAuthentication || (exports.ClientAuthentication = ClientAuthentication = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n  constructor(optionsOrClientId, clientSecret, redirectUri) {\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      redirectUri\n    };\n    super(opts);\n    this.certificateCache = {};\n    this.certificateExpiry = null;\n    this.certificateCacheFormat = CertificateFormat.PEM;\n    this.refreshTokenPromises = new Map();\n    this._clientId = opts.clientId;\n    this._clientSecret = opts.clientSecret;\n    this.redirectUri = opts.redirectUri;\n    this.endpoints = {\n      tokenInfoUrl: 'https://oauth2.googleapis.com/tokeninfo',\n      oauth2AuthBaseUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n      oauth2TokenUrl: 'https://oauth2.googleapis.com/token',\n      oauth2RevokeUrl: 'https://oauth2.googleapis.com/revoke',\n      oauth2FederatedSignonPemCertsUrl: 'https://www.googleapis.com/oauth2/v1/certs',\n      oauth2FederatedSignonJwkCertsUrl: 'https://www.googleapis.com/oauth2/v3/certs',\n      oauth2IapPublicKeyUrl: 'https://www.gstatic.com/iap/verify/public_key',\n      ...opts.endpoints\n    };\n    this.clientAuthentication = opts.clientAuthentication || ClientAuthentication.ClientSecretPost;\n    this.issuers = opts.issuers || ['accounts.google.com', 'https://accounts.google.com', this.universeDomain];\n  }\n  /**\n   * Generates URL for consent page landing.\n   * @param opts Options.\n   * @return URL to consent page.\n   */\n  generateAuthUrl(opts = {}) {\n    if (opts.code_challenge_method && !opts.code_challenge) {\n      throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n    }\n    opts.response_type = opts.response_type || 'code';\n    opts.client_id = opts.client_id || this._clientId;\n    opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n    // Allow scopes to be passed either as array or a string\n    if (Array.isArray(opts.scope)) {\n      opts.scope = opts.scope.join(' ');\n    }\n    const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();\n    return rootUrl + '?' + querystring.stringify(opts);\n  }\n  generateCodeVerifier() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n  }\n  /**\n   * Convenience method to automatically generate a code_verifier, and its\n   * resulting SHA256. If used, this must be paired with a S256\n   * code_challenge_method.\n   *\n   * For a full example see:\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n   */\n  async generateCodeVerifierAsync() {\n    // base64 encoding uses 6 bits per character, and we want to generate128\n    // characters. 6*128/8 = 96.\n    const crypto = (0, crypto_1.createCrypto)();\n    const randomString = crypto.randomBytesBase64(96);\n    // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n    // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n    // swapping out a few chars.\n    const codeVerifier = randomString.replace(/\\+/g, '~').replace(/=/g, '_').replace(/\\//g, '-');\n    // Generate the base64 encoded SHA256\n    const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n    // We need to use base64UrlEncoding instead of standard base64\n    const codeChallenge = unencodedCodeChallenge.split('=')[0].replace(/\\+/g, '-').replace(/\\//g, '_');\n    return {\n      codeVerifier,\n      codeChallenge\n    };\n  }\n  getToken(codeOrOptions, callback) {\n    const options = typeof codeOrOptions === 'string' ? {\n      code: codeOrOptions\n    } : codeOrOptions;\n    if (callback) {\n      this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n    } else {\n      return this.getTokenAsync(options);\n    }\n  }\n  async getTokenAsync(options) {\n    const url = this.endpoints.oauth2TokenUrl.toString();\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const values = {\n      client_id: options.client_id || this._clientId,\n      code_verifier: options.codeVerifier,\n      code: options.code,\n      grant_type: 'authorization_code',\n      redirect_uri: options.redirect_uri || this.redirectUri\n    };\n    if (this.clientAuthentication === ClientAuthentication.ClientSecretBasic) {\n      const basic = Buffer.from(`${this._clientId}:${this._clientSecret}`);\n      headers['Authorization'] = `Basic ${basic.toString('base64')}`;\n    }\n    if (this.clientAuthentication === ClientAuthentication.ClientSecretPost) {\n      values.client_secret = this._clientSecret;\n    }\n    const res = await this.transporter.request({\n      ...OAuth2Client.RETRY_CONFIG,\n      method: 'POST',\n      url,\n      data: querystring.stringify(values),\n      headers\n    });\n    const tokens = res.data;\n    if (res.data && res.data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res\n    };\n  }\n  /**\n   * Refreshes the access token.\n   * @param refresh_token Existing refresh token.\n   * @private\n   */\n  async refreshToken(refreshToken) {\n    if (!refreshToken) {\n      return this.refreshTokenNoCache(refreshToken);\n    }\n    // If a request to refresh using the same token has started,\n    // return the same promise.\n    if (this.refreshTokenPromises.has(refreshToken)) {\n      return this.refreshTokenPromises.get(refreshToken);\n    }\n    const p = this.refreshTokenNoCache(refreshToken).then(r => {\n      this.refreshTokenPromises.delete(refreshToken);\n      return r;\n    }, e => {\n      this.refreshTokenPromises.delete(refreshToken);\n      throw e;\n    });\n    this.refreshTokenPromises.set(refreshToken, p);\n    return p;\n  }\n  async refreshTokenNoCache(refreshToken) {\n    var _a;\n    if (!refreshToken) {\n      throw new Error('No refresh token is set.');\n    }\n    const url = this.endpoints.oauth2TokenUrl.toString();\n    const data = {\n      refresh_token: refreshToken,\n      client_id: this._clientId,\n      client_secret: this._clientSecret,\n      grant_type: 'refresh_token'\n    };\n    let res;\n    try {\n      // request for new token\n      res = await this.transporter.request({\n        ...OAuth2Client.RETRY_CONFIG,\n        method: 'POST',\n        url,\n        data: querystring.stringify(data),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n    } catch (e) {\n      if (e instanceof gaxios_1.GaxiosError && e.message === 'invalid_grant' && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {\n        e.message = JSON.stringify(e.response.data);\n      }\n      throw e;\n    }\n    const tokens = res.data;\n    // TODO: de-duplicate this code from a few spots\n    if (res.data && res.data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res\n    };\n  }\n  refreshAccessToken(callback) {\n    if (callback) {\n      this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n    } else {\n      return this.refreshAccessTokenAsync();\n    }\n  }\n  async refreshAccessTokenAsync() {\n    const r = await this.refreshToken(this.credentials.refresh_token);\n    const tokens = r.tokens;\n    tokens.refresh_token = this.credentials.refresh_token;\n    this.credentials = tokens;\n    return {\n      credentials: this.credentials,\n      res: r.res\n    };\n  }\n  getAccessToken(callback) {\n    if (callback) {\n      this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n    } else {\n      return this.getAccessTokenAsync();\n    }\n  }\n  async getAccessTokenAsync() {\n    const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n    if (shouldRefresh) {\n      if (!this.credentials.refresh_token) {\n        if (this.refreshHandler) {\n          const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n            this.setCredentials(refreshedAccessToken);\n            return {\n              token: this.credentials.access_token\n            };\n          }\n        } else {\n          throw new Error('No refresh token or refresh handler callback is set.');\n        }\n      }\n      const r = await this.refreshAccessTokenAsync();\n      if (!r.credentials || r.credentials && !r.credentials.access_token) {\n        throw new Error('Could not refresh access token.');\n      }\n      return {\n        token: r.credentials.access_token,\n        res: r.res\n      };\n    } else {\n      return {\n        token: this.credentials.access_token\n      };\n    }\n  }\n  /**\n   * The main authentication interface.  It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * In OAuth2Client, the result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   * @param url The optional url being authorized\n   */\n  async getRequestHeaders(url) {\n    const headers = (await this.getRequestMetadataAsync(url)).headers;\n    return headers;\n  }\n  async getRequestMetadataAsync(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  url) {\n    const thisCreds = this.credentials;\n    if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {\n      throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n    }\n    if (thisCreds.access_token && !this.isTokenExpiring()) {\n      thisCreds.token_type = thisCreds.token_type || 'Bearer';\n      const headers = {\n        Authorization: thisCreds.token_type + ' ' + thisCreds.access_token\n      };\n      return {\n        headers: this.addSharedMetadataHeaders(headers)\n      };\n    }\n    // If refreshHandler exists, call processAndValidateRefreshHandler().\n    if (this.refreshHandler) {\n      const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n      if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n        this.setCredentials(refreshedAccessToken);\n        const headers = {\n          Authorization: 'Bearer ' + this.credentials.access_token\n        };\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    }\n    if (this.apiKey) {\n      return {\n        headers: {\n          'X-Goog-Api-Key': this.apiKey\n        }\n      };\n    }\n    let r = null;\n    let tokens = null;\n    try {\n      r = await this.refreshToken(thisCreds.refresh_token);\n      tokens = r.tokens;\n    } catch (err) {\n      const e = err;\n      if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n        e.message = `Could not refresh access token: ${e.message}`;\n      }\n      throw e;\n    }\n    const credentials = this.credentials;\n    credentials.token_type = credentials.token_type || 'Bearer';\n    tokens.refresh_token = credentials.refresh_token;\n    this.credentials = tokens;\n    const headers = {\n      Authorization: credentials.token_type + ' ' + tokens.access_token\n    };\n    return {\n      headers: this.addSharedMetadataHeaders(headers),\n      res: r.res\n    };\n  }\n  /**\n   * Generates an URL to revoke the given token.\n   * @param token The existing token to be revoked.\n   *\n   * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}\n   */\n  static getRevokeTokenUrl(token) {\n    return new OAuth2Client().getRevokeTokenURL(token).toString();\n  }\n  /**\n   * Generates a URL to revoke the given token.\n   *\n   * @param token The existing token to be revoked.\n   */\n  getRevokeTokenURL(token) {\n    const url = new URL(this.endpoints.oauth2RevokeUrl);\n    url.searchParams.append('token', token);\n    return url;\n  }\n  revokeToken(token, callback) {\n    const opts = {\n      ...OAuth2Client.RETRY_CONFIG,\n      url: this.getRevokeTokenURL(token).toString(),\n      method: 'POST'\n    };\n    if (callback) {\n      this.transporter.request(opts).then(r => callback(null, r), callback);\n    } else {\n      return this.transporter.request(opts);\n    }\n  }\n  revokeCredentials(callback) {\n    if (callback) {\n      this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n    } else {\n      return this.revokeCredentialsAsync();\n    }\n  }\n  async revokeCredentialsAsync() {\n    const token = this.credentials.access_token;\n    this.credentials = {};\n    if (token) {\n      return this.revokeToken(token);\n    } else {\n      throw new Error('No access token to revoke.');\n    }\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  async requestAsync(opts, reAuthRetried = false) {\n    let r2;\n    try {\n      const r = await this.getRequestMetadataAsync(opts.url);\n      opts.headers = opts.headers || {};\n      if (r.headers && r.headers['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n      }\n      if (r.headers && r.headers.Authorization) {\n        opts.headers.Authorization = r.headers.Authorization;\n      }\n      if (this.apiKey) {\n        opts.headers['X-Goog-Api-Key'] = this.apiKey;\n      }\n      r2 = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - An access_token and refresh_token were available, but either no\n        //   expiry_date was available or the forceRefreshOnFailure flag is set.\n        //   The absent expiry_date case can happen when developers stash the\n        //   access_token and refresh_token for later use, but the access_token\n        //   fails on the first try because it's expired. Some developers may\n        //   choose to enable forceRefreshOnFailure to mitigate time-related\n        //   errors.\n        // Or the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - No refresh_token was available\n        // - An access_token and a refreshHandler callback were available, but\n        //   either no expiry_date was available or the forceRefreshOnFailure\n        //   flag is set. The access_token fails on the first try because it's\n        //   expired. Some developers may choose to enable forceRefreshOnFailure\n        //   to mitigate time-related errors.\n        const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n        const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefresh) {\n          await this.refreshAccessTokenAsync();\n          return this.requestAsync(opts, true);\n        } else if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {\n          const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n            this.setCredentials(refreshedAccessToken);\n          }\n          return this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return r2;\n  }\n  verifyIdToken(options, callback) {\n    // This function used to accept two arguments instead of an options object.\n    // Check the types to help users upgrade with less pain.\n    // This check can be removed after a 2.0 release.\n    if (callback && typeof callback !== 'function') {\n      throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n    }\n    if (callback) {\n      this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n    } else {\n      return this.verifyIdTokenAsync(options);\n    }\n  }\n  async verifyIdTokenAsync(options) {\n    if (!options.idToken) {\n      throw new Error('The verifyIdToken method requires an ID Token');\n    }\n    const response = await this.getFederatedSignonCertsAsync();\n    const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);\n    return login;\n  }\n  /**\n   * Obtains information about the provisioned access token.  Especially useful\n   * if you want to check the scopes that were provisioned to a given token.\n   *\n   * @param accessToken Required.  The Access Token for which you want to get\n   * user info.\n   */\n  async getTokenInfo(accessToken) {\n    const {\n      data\n    } = await this.transporter.request({\n      ...OAuth2Client.RETRY_CONFIG,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${accessToken}`\n      },\n      url: this.endpoints.tokenInfoUrl.toString()\n    });\n    const info = Object.assign({\n      expiry_date: new Date().getTime() + data.expires_in * 1000,\n      scopes: data.scope.split(' ')\n    }, data);\n    delete info.expires_in;\n    delete info.scope;\n    return info;\n  }\n  getFederatedSignonCerts(callback) {\n    if (callback) {\n      this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n    } else {\n      return this.getFederatedSignonCertsAsync();\n    }\n  }\n  async getFederatedSignonCertsAsync() {\n    const nowTime = new Date().getTime();\n    const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;\n    if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {\n      return {\n        certs: this.certificateCache,\n        format\n      };\n    }\n    let res;\n    let url;\n    switch (format) {\n      case CertificateFormat.PEM:\n        url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();\n        break;\n      case CertificateFormat.JWK:\n        url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();\n        break;\n      default:\n        throw new Error(`Unsupported certificate format ${format}`);\n    }\n    try {\n      res = await this.transporter.request({\n        ...OAuth2Client.RETRY_CONFIG,\n        url\n      });\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Failed to retrieve verification certificates: ${e.message}`;\n      }\n      throw e;\n    }\n    const cacheControl = res ? res.headers['cache-control'] : undefined;\n    let cacheAge = -1;\n    if (cacheControl) {\n      const pattern = new RegExp('max-age=([0-9]*)');\n      const regexResult = pattern.exec(cacheControl);\n      if (regexResult && regexResult.length === 2) {\n        // Cache results with max-age (in seconds)\n        cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n      }\n    }\n    let certificates = {};\n    switch (format) {\n      case CertificateFormat.PEM:\n        certificates = res.data;\n        break;\n      case CertificateFormat.JWK:\n        for (const key of res.data.keys) {\n          certificates[key.kid] = key;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported certificate format ${format}`);\n    }\n    const now = new Date();\n    this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n    this.certificateCache = certificates;\n    this.certificateCacheFormat = format;\n    return {\n      certs: certificates,\n      format,\n      res\n    };\n  }\n  getIapPublicKeys(callback) {\n    if (callback) {\n      this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n    } else {\n      return this.getIapPublicKeysAsync();\n    }\n  }\n  async getIapPublicKeysAsync() {\n    let res;\n    const url = this.endpoints.oauth2IapPublicKeyUrl.toString();\n    try {\n      res = await this.transporter.request({\n        ...OAuth2Client.RETRY_CONFIG,\n        url\n      });\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Failed to retrieve verification certificates: ${e.message}`;\n      }\n      throw e;\n    }\n    return {\n      pubkeys: res.data,\n      res\n    };\n  }\n  verifySignedJwtWithCerts() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n  }\n  /**\n   * Verify the id token is signed with the correct certificate\n   * and is from the correct audience.\n   * @param jwt The jwt to verify (The ID Token in this case).\n   * @param certs The array of certs to test the jwt against.\n   * @param requiredAudience The audience to test the jwt against.\n   * @param issuers The allowed issuers of the jwt (Optional).\n   * @param maxExpiry The max expiry the certificate can be (Optional).\n   * @return Returns a promise resolving to LoginTicket on verification.\n   */\n  async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n    const crypto = (0, crypto_1.createCrypto)();\n    if (!maxExpiry) {\n      maxExpiry = OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;\n    }\n    const segments = jwt.split('.');\n    if (segments.length !== 3) {\n      throw new Error('Wrong number of segments in token: ' + jwt);\n    }\n    const signed = segments[0] + '.' + segments[1];\n    let signature = segments[2];\n    let envelope;\n    let payload;\n    try {\n      envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n      }\n      throw err;\n    }\n    if (!envelope) {\n      throw new Error(\"Can't parse token envelope: \" + segments[0]);\n    }\n    try {\n      payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `Can't parse token payload '${segments[0]}`;\n      }\n      throw err;\n    }\n    if (!payload) {\n      throw new Error(\"Can't parse token payload: \" + segments[1]);\n    }\n    if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n      // If this is not present, then there's no reason to attempt verification\n      throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n    }\n    const cert = certs[envelope.kid];\n    if (envelope.alg === 'ES256') {\n      signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n    }\n    const verified = await crypto.verify(cert, signed, signature);\n    if (!verified) {\n      throw new Error('Invalid token signature: ' + jwt);\n    }\n    if (!payload.iat) {\n      throw new Error('No issue time in token: ' + JSON.stringify(payload));\n    }\n    if (!payload.exp) {\n      throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n    }\n    const iat = Number(payload.iat);\n    if (isNaN(iat)) throw new Error('iat field using invalid format');\n    const exp = Number(payload.exp);\n    if (isNaN(exp)) throw new Error('exp field using invalid format');\n    const now = new Date().getTime() / 1000;\n    if (exp >= now + maxExpiry) {\n      throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n    }\n    const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n    const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n    if (now < earliest) {\n      throw new Error('Token used too early, ' + now + ' < ' + earliest + ': ' + JSON.stringify(payload));\n    }\n    if (now > latest) {\n      throw new Error('Token used too late, ' + now + ' > ' + latest + ': ' + JSON.stringify(payload));\n    }\n    if (issuers && issuers.indexOf(payload.iss) < 0) {\n      throw new Error('Invalid issuer, expected one of [' + issuers + '], but got ' + payload.iss);\n    }\n    // Check the audience matches if we have one\n    if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n      const aud = payload.aud;\n      let audVerified = false;\n      // If the requiredAudience is an array, check if it contains token\n      // audience\n      if (requiredAudience.constructor === Array) {\n        audVerified = requiredAudience.indexOf(aud) > -1;\n      } else {\n        audVerified = aud === requiredAudience;\n      }\n      if (!audVerified) {\n        throw new Error('Wrong recipient, payload audience != requiredAudience');\n      }\n    }\n    return new loginticket_1.LoginTicket(envelope, payload);\n  }\n  /**\n   * Returns a promise that resolves with AccessTokenResponse type if\n   * refreshHandler is defined.\n   * If not, nothing is returned.\n   */\n  async processAndValidateRefreshHandler() {\n    if (this.refreshHandler) {\n      const accessTokenResponse = await this.refreshHandler();\n      if (!accessTokenResponse.access_token) {\n        throw new Error('No access token is returned by the refreshHandler callback.');\n      }\n      return accessTokenResponse;\n    }\n    return;\n  }\n  /**\n   * Returns true if a token is expired or will expire within\n   * eagerRefreshThresholdMillismilliseconds.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   */\n  isTokenExpiring() {\n    const expiryDate = this.credentials.expiry_date;\n    return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n  }\n}\nexports.OAuth2Client = OAuth2Client;\n/**\n * @deprecated use instance's {@link OAuth2Client.endpoints}\n */\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * The default max Token Lifetime is one day in seconds\n */\nOAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;","map":{"version":3,"names":["Object","defineProperty","exports","value","OAuth2Client","ClientAuthentication","CertificateFormat","CodeChallengeMethod","gaxios_1","require","querystring","stream","formatEcdsa","crypto_1","authclient_1","loginticket_1","AuthClient","constructor","optionsOrClientId","clientSecret","redirectUri","opts","clientId","certificateCache","certificateExpiry","certificateCacheFormat","PEM","refreshTokenPromises","Map","_clientId","_clientSecret","endpoints","tokenInfoUrl","oauth2AuthBaseUrl","oauth2TokenUrl","oauth2RevokeUrl","oauth2FederatedSignonPemCertsUrl","oauth2FederatedSignonJwkCertsUrl","oauth2IapPublicKeyUrl","clientAuthentication","ClientSecretPost","issuers","universeDomain","generateAuthUrl","code_challenge_method","code_challenge","Error","response_type","client_id","redirect_uri","Array","isArray","scope","join","rootUrl","toString","stringify","generateCodeVerifier","generateCodeVerifierAsync","crypto","createCrypto","randomString","randomBytesBase64","codeVerifier","replace","unencodedCodeChallenge","sha256DigestBase64","codeChallenge","split","getToken","codeOrOptions","callback","options","code","getTokenAsync","then","r","tokens","res","e","response","url","headers","values","code_verifier","grant_type","ClientSecretBasic","basic","Buffer","from","client_secret","transporter","request","RETRY_CONFIG","method","data","expires_in","expiry_date","Date","getTime","emit","refreshToken","refreshTokenNoCache","has","get","p","delete","set","_a","refresh_token","GaxiosError","message","test","error_description","JSON","refreshAccessToken","refreshAccessTokenAsync","credentials","getAccessToken","getAccessTokenAsync","token","shouldRefresh","access_token","isTokenExpiring","refreshHandler","refreshedAccessToken","processAndValidateRefreshHandler","setCredentials","getRequestHeaders","getRequestMetadataAsync","thisCreds","apiKey","token_type","Authorization","addSharedMetadataHeaders","err","status","getRevokeTokenUrl","getRevokeTokenURL","URL","searchParams","append","revokeToken","revokeCredentials","revokeCredentialsAsync","requestAsync","reAuthRetried","r2","statusCode","mayRequireRefresh","forceRefreshOnFailure","mayRequireRefreshWithNoRefreshToken","isReadableStream","config","Readable","isAuthErr","verifyIdToken","verifyIdTokenAsync","idToken","getFederatedSignonCertsAsync","login","verifySignedJwtWithCertsAsync","certs","audience","maxExpiry","getTokenInfo","accessToken","info","assign","scopes","getFederatedSignonCerts","nowTime","format","hasBrowserCrypto","JWK","cacheControl","undefined","cacheAge","pattern","RegExp","regexResult","exec","length","Number","certificates","key","keys","kid","now","getIapPublicKeys","getIapPublicKeysAsync","pubkeys","verifySignedJwtWithCerts","jwt","requiredAudience","DEFAULT_MAX_TOKEN_LIFETIME_SECS_","segments","signed","signature","envelope","payload","parse","decodeBase64StringUtf8","prototype","hasOwnProperty","call","cert","alg","joseToDer","verified","verify","iat","exp","isNaN","earliest","CLOCK_SKEW_SECS_","latest","indexOf","iss","aud","audVerified","LoginTicket","accessTokenResponse","expiryDate","eagerRefreshThresholdMillis","GOOGLE_TOKEN_INFO_URL"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/oauth2client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuth2Client = exports.ClientAuthentication = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\n/**\n * The client authentication type. Supported values are basic, post, and none.\n * https://datatracker.ietf.org/doc/html/rfc7591#section-2\n */\nvar ClientAuthentication;\n(function (ClientAuthentication) {\n    ClientAuthentication[\"ClientSecretPost\"] = \"ClientSecretPost\";\n    ClientAuthentication[\"ClientSecretBasic\"] = \"ClientSecretBasic\";\n    ClientAuthentication[\"None\"] = \"None\";\n})(ClientAuthentication || (exports.ClientAuthentication = ClientAuthentication = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : { clientId: optionsOrClientId, clientSecret, redirectUri };\n        super(opts);\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.endpoints = {\n            tokenInfoUrl: 'https://oauth2.googleapis.com/tokeninfo',\n            oauth2AuthBaseUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n            oauth2TokenUrl: 'https://oauth2.googleapis.com/token',\n            oauth2RevokeUrl: 'https://oauth2.googleapis.com/revoke',\n            oauth2FederatedSignonPemCertsUrl: 'https://www.googleapis.com/oauth2/v1/certs',\n            oauth2FederatedSignonJwkCertsUrl: 'https://www.googleapis.com/oauth2/v3/certs',\n            oauth2IapPublicKeyUrl: 'https://www.gstatic.com/iap/verify/public_key',\n            ...opts.endpoints,\n        };\n        this.clientAuthentication =\n            opts.clientAuthentication || ClientAuthentication.ClientSecretPost;\n        this.issuers = opts.issuers || [\n            'accounts.google.com',\n            'https://accounts.google.com',\n            this.universeDomain,\n        ];\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (Array.isArray(opts.scope)) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();\n        return (rootUrl +\n            '?' +\n            querystring.stringify(opts));\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */\n    async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = (0, crypto_1.createCrypto)();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString\n            .replace(/\\+/g, '~')\n            .replace(/=/g, '_')\n            .replace(/\\//g, '-');\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge\n            .split('=')[0]\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_');\n        return { codeVerifier, codeChallenge };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === 'string' ? { code: codeOrOptions } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        const values = {\n            client_id: options.client_id || this._clientId,\n            code_verifier: options.codeVerifier,\n            code: options.code,\n            grant_type: 'authorization_code',\n            redirect_uri: options.redirect_uri || this.redirectUri,\n        };\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretBasic) {\n            const basic = Buffer.from(`${this._clientId}:${this._clientSecret}`);\n            headers['Authorization'] = `Basic ${basic.toString('base64')}`;\n        }\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretPost) {\n            values.client_secret = this._clientSecret;\n        }\n        const res = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: 'POST',\n            url,\n            data: querystring.stringify(values),\n            headers,\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then(r => {\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, e => {\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        var _a;\n        if (!refreshToken) {\n            throw new Error('No refresh token is set.');\n        }\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: 'refresh_token',\n        };\n        let res;\n        try {\n            // request for new token\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                method: 'POST',\n                url,\n                data: querystring.stringify(data),\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            });\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError &&\n                e.message === 'invalid_grant' &&\n                ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) &&\n                /ReAuth/i.test(e.response.data.error_description)) {\n                e.message = JSON.stringify(e.response.data);\n            }\n            throw e;\n        }\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return { credentials: this.credentials, res: r.res };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return { token: this.credentials.access_token };\n                    }\n                }\n                else {\n                    throw new Error('No refresh token or refresh handler callback is set.');\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                throw new Error('Could not refresh access token.');\n            }\n            return { token: r.credentials.access_token, res: r.res };\n        }\n        else {\n            return { token: this.credentials.access_token };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token &&\n            !thisCreds.refresh_token &&\n            !this.apiKey &&\n            !this.refreshHandler) {\n            throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || 'Bearer';\n            const headers = {\n                Authorization: thisCreds.token_type + ' ' + thisCreds.access_token,\n            };\n            return { headers: this.addSharedMetadataHeaders(headers) };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: 'Bearer ' + this.credentials.access_token,\n                };\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        if (this.apiKey) {\n            return { headers: { 'X-Goog-Api-Key': this.apiKey } };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        }\n        catch (err) {\n            const e = err;\n            if (e.response &&\n                (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || 'Bearer';\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + ' ' + tokens.access_token,\n        };\n        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     *\n     * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}\n     */\n    static getRevokeTokenUrl(token) {\n        return new OAuth2Client().getRevokeTokenURL(token).toString();\n    }\n    /**\n     * Generates a URL to revoke the given token.\n     *\n     * @param token The existing token to be revoked.\n     */\n    getRevokeTokenURL(token) {\n        const url = new URL(this.endpoints.oauth2RevokeUrl);\n        url.searchParams.append('token', token);\n        return url;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            ...OAuth2Client.RETRY_CONFIG,\n            url: this.getRevokeTokenURL(token).toString(),\n            method: 'POST',\n        };\n        if (callback) {\n            this.transporter\n                .request(opts)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        }\n        else {\n            throw new Error('No access token to revoke.');\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, reAuthRetried = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers['X-Goog-Api-Key'] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials &&\n                    this.credentials.access_token &&\n                    this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials &&\n                    this.credentials.access_token &&\n                    !this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure) &&\n                    this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                }\n                else if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error('The verifyIdToken method requires an ID Token');\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${accessToken}`,\n            },\n            url: this.endpoints.tokenInfoUrl.toString(),\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(' '),\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = (0, crypto_1.hasBrowserCrypto)()\n            ? CertificateFormat.JWK\n            : CertificateFormat.PEM;\n        if (this.certificateExpiry &&\n            nowTime < this.certificateExpiry.getTime() &&\n            this.certificateCacheFormat === format) {\n            return { certs: this.certificateCache, format };\n        }\n        let res;\n        let url;\n        switch (format) {\n            case CertificateFormat.PEM:\n                url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();\n                break;\n            case CertificateFormat.JWK:\n                url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url,\n            });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        const cacheControl = res ? res.headers['cache-control'] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp('max-age=([0-9]*)');\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch (format) {\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys) {\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry =\n            cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return { certs: certificates, format, res };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n        }\n        else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = this.endpoints.oauth2IapPublicKeyUrl.toString();\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url,\n            });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        return { pubkeys: res.data, res };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = (0, crypto_1.createCrypto)();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split('.');\n        if (segments.length !== 3) {\n            throw new Error('Wrong number of segments in token: ' + jwt);\n        }\n        const signed = segments[0] + '.' + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            }\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token payload '${segments[0]}`;\n            }\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === 'ES256') {\n            signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error('Invalid token signature: ' + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error('No issue time in token: ' + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat))\n            throw new Error('iat field using invalid format');\n        const exp = Number(payload.exp);\n        if (isNaN(exp))\n            throw new Error('exp field using invalid format');\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error('Token used too early, ' +\n                now +\n                ' < ' +\n                earliest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error('Token used too late, ' +\n                now +\n                ' > ' +\n                latest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error('Invalid issuer, expected one of [' +\n                issuers +\n                '], but got ' +\n                payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            }\n            else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error('Wrong recipient, payload audience != requiredAudience');\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */\n    async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error('No access token is returned by the refreshHandler callback.');\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate\n            ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\n/**\n * @deprecated use instance's {@link OAuth2Client.endpoints}\n */\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * The default max Token Lifetime is one day in seconds\n */\nOAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
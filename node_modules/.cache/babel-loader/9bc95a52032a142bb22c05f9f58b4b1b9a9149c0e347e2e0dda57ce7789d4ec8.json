{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications\n   */\n  constructor(options = {}) {\n    super(options);\n    // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [options.scopes] : [];\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n  async refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n    let data;\n    try {\n      const instanceOptions = {\n        property: tokenPath\n      };\n      if (this.scopes.length > 0) {\n        instanceOptions.params = {\n          scopes: this.scopes.join(',')\n        };\n      }\n      data = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      if (e instanceof gaxios_1.GaxiosError) {\n        e.message = `Could not refresh access token: ${e.message}`;\n        this.wrapError(e);\n      }\n      throw e;\n    }\n    const tokens = data;\n    if (data && data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res: null\n    };\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n  async fetchIdToken(targetAudience) {\n    const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` + `?format=full&audience=${targetAudience}`;\n    let idToken;\n    try {\n      const instanceOptions = {\n        property: idTokenPath\n      };\n      idToken = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Could not fetch ID token: ${e.message}`;\n      }\n      throw e;\n    }\n    return idToken;\n  }\n  wrapError(e) {\n    const res = e.response;\n    if (res && res.status) {\n      e.status = res.status;\n      if (res.status === 403) {\n        e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n      } else if (res.status === 404) {\n        e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n      }\n    }\n  }\n}\nexports.Compute = Compute;","map":{"version":3,"names":["Object","defineProperty","exports","value","Compute","gaxios_1","require","gcpMetadata","oauth2client_1","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","scopes","Array","isArray","refreshTokenNoCache","refreshToken","tokenPath","data","instanceOptions","property","length","params","join","instance","e","GaxiosError","message","wrapError","tokens","expires_in","Date","getTime","emit","res","fetchIdToken","targetAudience","idTokenPath","idToken","Error","response","status"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/computeclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compute = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = Array.isArray(options.scopes)\n            ? options.scopes\n            : options.scopes\n                ? [options.scopes]\n                : [];\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.status = res.status;\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = void 0;\nexports.operation = operation;\nconst events_1 = require(\"events\");\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\nconst operationProtos = require(\"../../protos/operations\");\nclass Operation extends events_1.EventEmitter {\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.name = this.latestResponse.name;\n    this.done = this.latestResponse.done;\n    this.error = this.latestResponse.error;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n    this._unpackResponse(grpcOp);\n    this._listenForEvents();\n    this._callOptions = callOptions;\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n    cancelRequest.name = this.latestResponse.name;\n    return operationsClient.cancelOperation(cancelRequest);\n  }\n  getOperation(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    function promisifyResponse() {\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n      return;\n    }\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n      return promisifyResponse();\n    }\n    const request = new operationProtos.google.longrunning.GetOperationRequest();\n    request.name = this.latestResponse.name;\n    this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n    const noCallbackPromise = this.currentCallPromise_.then(responses => {\n      self.latestResponse = responses[0];\n      self._unpackResponse(responses[0], callback);\n      return promisifyResponse();\n    }, err => {\n      if (callback) {\n        callback(err);\n        return;\n      }\n      return Promise.reject(err);\n    });\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n  _unpackResponse(op, callback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response;\n    let metadata;\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new googleError_1.GoogleError(op.error.message);\n        error.code = op.error.code;\n        this.error = error;\n        if (callback) {\n          callback(error);\n        }\n        return;\n      }\n      if (responseDecoder && op.response) {\n        this.response = op.response;\n        response = responseDecoder(op.response.value);\n        this.result = response;\n        this.done = true;\n      }\n    }\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n    if (callback) {\n      callback(null, response, metadata, op);\n    }\n  }\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n    let previousMetadataBytes;\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function emit(event, ...args) {\n      self.emit(event, ...args);\n    }\n    // Helper function to replace nodejs buffer's equals()\n    function arrayEquals(a, b) {\n      if (a.byteLength !== b.byteLength) {\n        return false;\n      }\n      for (let i = 0; i < a.byteLength; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n      if (now.getTime() >= deadline) {\n        const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n        error.code = status_1.Status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n        if (!result) {\n          if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse.metadata.value;\n          }\n          // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Some APIs just use this for the normal completion\n          // (e.g. nodejs-contact-center-insights), so let's just return\n          // an empty response in this case.\n          if (rawResponse.done) {\n            setImmediate(emit, 'complete', {}, metadata, rawResponse);\n            return;\n          }\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n    retry();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n        resolve([result, metadata, rawResponse]);\n      });\n    });\n  }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Operation","operation","events_1","require","status_1","googleError_1","operationProtos","EventEmitter","constructor","grpcOp","longrunningDescriptor","backoffSettings","callOptions","completeListeners","hasActiveListeners","latestResponse","name","done","error","result","metadata","_unpackResponse","_listenForEvents","_callOptions","on","event","startPolling_","cancel","currentCallPromise_","operationsClient","cancelRequest","google","longrunning","CancelOperationRequest","cancelOperation","getOperation","callback","self","promisifyResponse","Promise","resolve","reject","GoogleError","message","code","request","GetOperationRequest","getOperationInternal","noCallbackPromise","then","responses","err","op","responseDecoder","metadataDecoder","response","now","Date","delayMult","retryDelayMultiplier","maxDelay","maxRetryDelayMillis","delay","initialRetryDelayMillis","deadline","Infinity","totalTimeoutMillis","getTime","previousMetadataBytes","emit","args","arrayEquals","a","b","byteLength","i","retry","Status","DEADLINE_EXCEEDED","setImmediate","rawResponse","setTimeout","Math","min","promise"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/longRunningCalls/longrunning.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Operation = void 0;\nexports.operation = operation;\nconst events_1 = require(\"events\");\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\nconst operationProtos = require(\"../../protos/operations\");\nclass Operation extends events_1.EventEmitter {\n    /**\n     * Wrapper for a google.longrunnung.Operation.\n     *\n     * @constructor\n     *\n     * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n     * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n     * operations service client and unpacking mechanisms for the operation.\n     * @param {BackoffSettings} backoffSettings - The backoff settings used in\n     * in polling the operation.\n     * @param {CallOptions} callOptions - CallOptions used in making get operation\n     * requests.\n     */\n    constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n        super();\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.latestResponse = grpcOp;\n        this.name = this.latestResponse.name;\n        this.done = this.latestResponse.done;\n        this.error = this.latestResponse.error;\n        this.longrunningDescriptor = longrunningDescriptor;\n        this.result = null;\n        this.metadata = null;\n        this.backoffSettings = backoffSettings;\n        this._unpackResponse(grpcOp);\n        this._listenForEvents();\n        this._callOptions = callOptions;\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    _listenForEvents() {\n        this.on('newListener', event => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', event => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Cancels current polling api call and cancels the operation.\n     *\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\n     * request.\n     */\n    cancel() {\n        if (this.currentCallPromise_) {\n            this.currentCallPromise_.cancel();\n        }\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n        cancelRequest.name = this.latestResponse.name;\n        return operationsClient.cancelOperation(cancelRequest);\n    }\n    getOperation(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        function promisifyResponse() {\n            if (!callback) {\n                return new Promise((resolve, reject) => {\n                    if (self.latestResponse.error) {\n                        const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n                        error.code = self.latestResponse.error.code;\n                        reject(error);\n                    }\n                    else {\n                        resolve([self.result, self.metadata, self.latestResponse]);\n                    }\n                });\n            }\n            return;\n        }\n        if (this.latestResponse.done) {\n            this._unpackResponse(this.latestResponse, callback);\n            return promisifyResponse();\n        }\n        const request = new operationProtos.google.longrunning.GetOperationRequest();\n        request.name = this.latestResponse.name;\n        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n        const noCallbackPromise = this.currentCallPromise_.then(responses => {\n            self.latestResponse = responses[0];\n            self._unpackResponse(responses[0], callback);\n            return promisifyResponse();\n        }, (err) => {\n            if (callback) {\n                callback(err);\n                return;\n            }\n            return Promise.reject(err);\n        });\n        if (!callback) {\n            return noCallbackPromise;\n        }\n    }\n    _unpackResponse(op, callback) {\n        const responseDecoder = this.longrunningDescriptor.responseDecoder;\n        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n        let response;\n        let metadata;\n        if (op.done) {\n            if (op.result === 'error') {\n                const error = new googleError_1.GoogleError(op.error.message);\n                error.code = op.error.code;\n                this.error = error;\n                if (callback) {\n                    callback(error);\n                }\n                return;\n            }\n            if (responseDecoder && op.response) {\n                this.response = op.response;\n                response = responseDecoder(op.response.value);\n                this.result = response;\n                this.done = true;\n            }\n        }\n        if (metadataDecoder && op.metadata) {\n            metadata = metadataDecoder(op.metadata.value);\n            this.metadata = metadata;\n        }\n        if (callback) {\n            callback(null, response, metadata, op);\n        }\n    }\n    /**\n     * Poll `getOperation` to check the operation's status. This runs a loop to\n     * ping using the backoff strategy specified at initialization.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    startPolling_() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        let now = new Date();\n        const delayMult = this.backoffSettings.retryDelayMultiplier;\n        const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n        let delay = this.backoffSettings.initialRetryDelayMillis;\n        let deadline = Infinity;\n        if (this.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n        }\n        let previousMetadataBytes;\n        if (this.latestResponse.metadata) {\n            previousMetadataBytes = this.latestResponse.metadata.value;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function emit(event, ...args) {\n            self.emit(event, ...args);\n        }\n        // Helper function to replace nodejs buffer's equals()\n        function arrayEquals(a, b) {\n            if (a.byteLength !== b.byteLength) {\n                return false;\n            }\n            for (let i = 0; i < a.byteLength; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        }\n        function retry() {\n            if (!self.hasActiveListeners) {\n                return;\n            }\n            if (now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                setImmediate(emit, 'error', error);\n                return;\n            }\n            self.getOperation((err, result, metadata, rawResponse) => {\n                if (err) {\n                    setImmediate(emit, 'error', err);\n                    return;\n                }\n                if (!result) {\n                    if (rawResponse.metadata &&\n                        (!previousMetadataBytes ||\n                            (rawResponse &&\n                                !arrayEquals(rawResponse.metadata.value, previousMetadataBytes)))) {\n                        setImmediate(emit, 'progress', metadata, rawResponse);\n                        previousMetadataBytes = rawResponse.metadata.value;\n                    }\n                    // special case: some APIs fail to set either result or error\n                    // but set done = true (e.g. speech with silent file).\n                    // Some APIs just use this for the normal completion\n                    // (e.g. nodejs-contact-center-insights), so let's just return\n                    // an empty response in this case.\n                    if (rawResponse.done) {\n                        setImmediate(emit, 'complete', {}, metadata, rawResponse);\n                        return;\n                    }\n                    setTimeout(() => {\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        retry();\n                    }, delay);\n                    return;\n                }\n                setImmediate(emit, 'complete', result, metadata, rawResponse);\n            });\n        }\n        retry();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise} - Promise that resolves on operation completion and rejects\n     * on operation error.\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n                resolve([result, metadata, rawResponse]);\n            });\n        });\n    }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n    return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n//# sourceMappingURL=longrunning.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\nconst util_1 = require(\"../util\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n    // Validate credential sourcing configuration.\n    if (!credentialSource && !awsSecurityCredentialsSupplier) {\n      throw new Error('A credential source or AWS security credentials supplier must be specified.');\n    }\n    if (credentialSource && awsSecurityCredentialsSupplier) {\n      throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n    }\n    if (awsSecurityCredentialsSupplier) {\n      this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n      this.regionalCredVerificationUrl = __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n      this.credentialSourceType = 'programmatic';\n    } else {\n      const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n      this.environmentId = credentialSourceOpts.get('environment_id');\n      // This is only required if the AWS region is not available in the\n      // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n      const regionUrl = credentialSourceOpts.get('region_url');\n      // This is only required if AWS security credentials are not available in\n      // environment variables.\n      const securityCredentialsUrl = credentialSourceOpts.get('url');\n      const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n      this.awsSecurityCredentialsSupplier = new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n        regionUrl: regionUrl,\n        securityCredentialsUrl: securityCredentialsUrl,\n        imdsV2SessionTokenUrl: imdsV2SessionTokenUrl\n      });\n      this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n      this.credentialSourceType = 'aws';\n      // Data validators.\n      this.validateEnvironmentId();\n    }\n    this.awsRequestSigner = null;\n    this.region = '';\n  }\n  validateEnvironmentId() {\n    var _b;\n    const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n    if (!match || !this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n    }\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint. This will call the\n   * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n   * Security Credentials, then use them to create a signed AWS STS request that\n   * can be exchanged for a GCP access token.\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    // Initialize AWS request signer if not already initialized.\n    if (!this.awsRequestSigner) {\n      this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n      this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n        return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n      }, this.region);\n    }\n    // Generate signed request to AWS STS GetCallerIdentity API.\n    // Use the required regional endpoint. Otherwise, the request will fail.\n    const options = await this.awsRequestSigner.getRequestOptions({\n      ..._a.RETRY_CONFIG,\n      url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n      method: 'POST'\n    });\n    // The GCP STS endpoint expects the headers to be formatted as:\n    // [\n    //   {key: 'x-amz-date', value: '...'},\n    //   {key: 'Authorization', value: '...'},\n    //   ...\n    // ]\n    // And then serialized as:\n    // encodeURIComponent(JSON.stringify({\n    //   url: '...',\n    //   method: 'POST',\n    //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n    // }))\n    const reformattedHeader = [];\n    const extendedHeaders = Object.assign({\n      // The full, canonical resource name of the workload identity pool\n      // provider, with or without the HTTPS prefix.\n      // Including this header as part of the signature is recommended to\n      // ensure data integrity.\n      'x-goog-cloud-target-resource': this.audience\n    }, options.headers);\n    // Reformat header to GCP STS expected format.\n    for (const key in extendedHeaders) {\n      reformattedHeader.push({\n        key,\n        value: extendedHeaders[key]\n      });\n    }\n    // Serialize the reformatted signed request.\n    return encodeURIComponent(JSON.stringify({\n      url: options.url,\n      method: options.method,\n      headers: reformattedHeader\n    }));\n  }\n}\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = {\n  value: 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15'\n};\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_a","_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL","Object","defineProperty","exports","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","defaultawssecuritycredentialssupplier_1","util_1","BaseExternalAccountClient","constructor","options","additionalOptions","opts","originalOrCamelOptions","credentialSource","awsSecurityCredentialsSupplier","Error","regionalCredVerificationUrl","credentialSourceType","credentialSourceOpts","environmentId","regionUrl","securityCredentialsUrl","imdsV2SessionTokenUrl","DefaultAwsSecurityCredentialsSupplier","validateEnvironmentId","awsRequestSigner","region","_b","match","parseInt","retrieveSubjectToken","getAwsRegion","supplierContext","AwsRequestSigner","getAwsSecurityCredentials","getRequestOptions","RETRY_CONFIG","url","replace","method","reformattedHeader","extendedHeaders","assign","audience","headers","key","push","encodeURIComponent","JSON","stringify","AWS_EC2_METADATA_IPV4_ADDRESS","AWS_EC2_METADATA_IPV6_ADDRESS"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/awsclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\nconst util_1 = require(\"../util\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !awsSecurityCredentialsSupplier) {\n            throw new Error('A credential source or AWS security credentials supplier must be specified.');\n        }\n        if (credentialSource && awsSecurityCredentialsSupplier) {\n            throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n        }\n        if (awsSecurityCredentialsSupplier) {\n            this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n            this.regionalCredVerificationUrl =\n                __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            this.environmentId = credentialSourceOpts.get('environment_id');\n            // This is only required if the AWS region is not available in the\n            // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n            const regionUrl = credentialSourceOpts.get('region_url');\n            // This is only required if AWS security credentials are not available in\n            // environment variables.\n            const securityCredentialsUrl = credentialSourceOpts.get('url');\n            const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n            this.awsSecurityCredentialsSupplier =\n                new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n                    regionUrl: regionUrl,\n                    securityCredentialsUrl: securityCredentialsUrl,\n                    imdsV2SessionTokenUrl: imdsV2SessionTokenUrl,\n                });\n            this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n            this.credentialSourceType = 'aws';\n            // Data validators.\n            this.validateEnvironmentId();\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    validateEnvironmentId() {\n        var _b;\n        const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint. This will call the\n     * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n     * Security Credentials, then use them to create a signed AWS STS request that\n     * can be exchanged for a GCP access token.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            ..._a.RETRY_CONFIG,\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n}\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = { value: 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15' };\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
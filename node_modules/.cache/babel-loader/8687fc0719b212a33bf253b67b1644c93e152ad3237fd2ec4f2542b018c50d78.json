{"ast":null,"code":"/*! firebase-admin v12.2.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTaskId = exports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\nconst url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param value - The value to validate.\n * @returns Whether the value is byte buffer or not.\n */\nfunction isBuffer(value) {\n  return value instanceof Buffer;\n}\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an array or not.\n */\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty array or not.\n */\nfunction isNonEmptyArray(value) {\n  return isArray(value) && value.length !== 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a boolean or not.\n */\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a number or not.\n */\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a string or not.\n */\nfunction isString(value) {\n  return typeof value === 'string';\n}\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a base64 string or not.\n */\nfunction isBase64String(value) {\n  if (!isString(value)) {\n    return false;\n  }\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty string or not.\n */\nfunction isNonEmptyString(value) {\n  return isString(value) && value !== '';\n}\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an object or not.\n */\nfunction isObject(value) {\n  return typeof value === 'object' && !isArray(value);\n}\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-null object or not.\n */\nfunction isNonNullObject(value) {\n  return isObject(value) && value !== null;\n}\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param uid - The string to validate.\n * @returns Whether the string is a valid Firebase Auth uid.\n */\nfunction isUid(uid) {\n  return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param password - The password string to validate.\n * @returns Whether the string is a valid Firebase Auth password.\n */\nfunction isPassword(password) {\n  // A password must be a string of at least 6 characters.\n  return typeof password === 'string' && password.length >= 6;\n}\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param email - The string to validate.\n * @returns Whether the string is valid email or not.\n */\nfunction isEmail(email) {\n  if (typeof email !== 'string') {\n    return false;\n  }\n  // There must at least one character before the @ symbol and another after.\n  const re = /^[^@]+@[^@]+$/;\n  return re.test(email);\n}\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param phoneNumber - The string to validate.\n * @returns Whether the string is a valid phone number or not.\n */\nfunction isPhoneNumber(phoneNumber) {\n  if (typeof phoneNumber !== 'string') {\n    return false;\n  }\n  // Phone number validation is very lax here. Backend will enforce E.164\n  // spec compliance and will normalize accordingly.\n  // The phone number string must be non-empty and starts with a plus sign.\n  const re1 = /^\\+/;\n  // The phone number string must contain at least one alphanumeric character.\n  const re2 = /[\\da-zA-Z]+/;\n  return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid ISO date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid ISO date string.\n */\nfunction isISODateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toISOString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\nexports.isISODateString = isISODateString;\n/**\n * Validates that a string is a valid UTC date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid UTC date string.\n */\nfunction isUTCDateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toUTCString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\nexports.isUTCDateString = isUTCDateString;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param urlStr - The string to validate.\n * @returns Whether the string is valid web URL or not.\n */\nfunction isURL(urlStr) {\n  if (typeof urlStr !== 'string') {\n    return false;\n  }\n  // Lookup illegal characters.\n  const re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n  if (re.test(urlStr)) {\n    return false;\n  }\n  try {\n    const uri = url.parse(urlStr);\n    const scheme = uri.protocol;\n    const slashes = uri.slashes;\n    const hostname = uri.hostname;\n    const pathname = uri.pathname;\n    if (scheme !== 'http:' && scheme !== 'https:' || !slashes) {\n      return false;\n    }\n    // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n    // Each zone must not start with a hyphen or underscore.\n    if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n      return false;\n    }\n    // Allow for pathnames: (/chars+)*/?\n    // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n    const pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\n    // Validate pathname.\n    if (pathname && pathname !== '/' && !pathnameRe.test(pathname)) {\n      return false;\n    }\n    // Allow any query string and hash as long as no invalid character is used.\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param topic - The topic to validate.\n * @returns Whether the provided topic is a valid FCM topic name.\n */\nfunction isTopic(topic) {\n  if (typeof topic !== 'string') {\n    return false;\n  }\n  const VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n  return VALID_TOPIC_REGEX.test(topic);\n}\nexports.isTopic = isTopic;\n/**\n * Validates that the provided string can be used as a task ID\n * for Cloud Tasks.\n *\n * @param taskId - the task ID to validate.\n * @returns Whether the provided task ID is valid.\n */\nfunction isTaskId(taskId) {\n  if (typeof taskId !== 'string') {\n    return false;\n  }\n  const VALID_TASK_ID_REGEX = /^[A-Za-z0-9_-]+$/;\n  return VALID_TASK_ID_REGEX.test(taskId);\n}\nexports.isTaskId = isTaskId;","map":{"version":3,"names":["Object","defineProperty","exports","value","isTaskId","isTopic","isURL","isUTCDateString","isISODateString","isPhoneNumber","isEmail","isPassword","isUid","isNonNullObject","isObject","isNonEmptyString","isBase64String","isString","isNumber","isBoolean","isNonEmptyArray","isArray","isBuffer","url","require","Buffer","Array","length","isNaN","test","uid","password","email","re","phoneNumber","re1","re2","dateString","Date","toISOString","e","toUTCString","urlStr","uri","parse","scheme","protocol","slashes","hostname","pathname","pathnameRe","topic","VALID_TOPIC_REGEX","taskId","VALID_TASK_ID_REGEX"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/firebase-admin/lib/utils/validator.js"],"sourcesContent":["/*! firebase-admin v12.2.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTaskId = exports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\nconst url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param value - The value to validate.\n * @returns Whether the value is byte buffer or not.\n */\nfunction isBuffer(value) {\n    return value instanceof Buffer;\n}\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an array or not.\n */\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty array or not.\n */\nfunction isNonEmptyArray(value) {\n    return isArray(value) && value.length !== 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a boolean or not.\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a number or not.\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a string or not.\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a base64 string or not.\n */\nfunction isBase64String(value) {\n    if (!isString(value)) {\n        return false;\n    }\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty string or not.\n */\nfunction isNonEmptyString(value) {\n    return isString(value) && value !== '';\n}\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an object or not.\n */\nfunction isObject(value) {\n    return typeof value === 'object' && !isArray(value);\n}\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-null object or not.\n */\nfunction isNonNullObject(value) {\n    return isObject(value) && value !== null;\n}\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param uid - The string to validate.\n * @returns Whether the string is a valid Firebase Auth uid.\n */\nfunction isUid(uid) {\n    return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param password - The password string to validate.\n * @returns Whether the string is a valid Firebase Auth password.\n */\nfunction isPassword(password) {\n    // A password must be a string of at least 6 characters.\n    return typeof password === 'string' && password.length >= 6;\n}\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param email - The string to validate.\n * @returns Whether the string is valid email or not.\n */\nfunction isEmail(email) {\n    if (typeof email !== 'string') {\n        return false;\n    }\n    // There must at least one character before the @ symbol and another after.\n    const re = /^[^@]+@[^@]+$/;\n    return re.test(email);\n}\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param phoneNumber - The string to validate.\n * @returns Whether the string is a valid phone number or not.\n */\nfunction isPhoneNumber(phoneNumber) {\n    if (typeof phoneNumber !== 'string') {\n        return false;\n    }\n    // Phone number validation is very lax here. Backend will enforce E.164\n    // spec compliance and will normalize accordingly.\n    // The phone number string must be non-empty and starts with a plus sign.\n    const re1 = /^\\+/;\n    // The phone number string must contain at least one alphanumeric character.\n    const re2 = /[\\da-zA-Z]+/;\n    return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid ISO date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid ISO date string.\n */\nfunction isISODateString(dateString) {\n    try {\n        return isNonEmptyString(dateString) &&\n            (new Date(dateString).toISOString() === dateString);\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isISODateString = isISODateString;\n/**\n * Validates that a string is a valid UTC date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid UTC date string.\n */\nfunction isUTCDateString(dateString) {\n    try {\n        return isNonEmptyString(dateString) &&\n            (new Date(dateString).toUTCString() === dateString);\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isUTCDateString = isUTCDateString;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param urlStr - The string to validate.\n * @returns Whether the string is valid web URL or not.\n */\nfunction isURL(urlStr) {\n    if (typeof urlStr !== 'string') {\n        return false;\n    }\n    // Lookup illegal characters.\n    const re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n    if (re.test(urlStr)) {\n        return false;\n    }\n    try {\n        const uri = url.parse(urlStr);\n        const scheme = uri.protocol;\n        const slashes = uri.slashes;\n        const hostname = uri.hostname;\n        const pathname = uri.pathname;\n        if ((scheme !== 'http:' && scheme !== 'https:') || !slashes) {\n            return false;\n        }\n        // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n        // Each zone must not start with a hyphen or underscore.\n        if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n            return false;\n        }\n        // Allow for pathnames: (/chars+)*/?\n        // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n        const pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\n        // Validate pathname.\n        if (pathname &&\n            pathname !== '/' &&\n            !pathnameRe.test(pathname)) {\n            return false;\n        }\n        // Allow any query string and hash as long as no invalid character is used.\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param topic - The topic to validate.\n * @returns Whether the provided topic is a valid FCM topic name.\n */\nfunction isTopic(topic) {\n    if (typeof topic !== 'string') {\n        return false;\n    }\n    const VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n    return VALID_TOPIC_REGEX.test(topic);\n}\nexports.isTopic = isTopic;\n/**\n * Validates that the provided string can be used as a task ID\n * for Cloud Tasks.\n *\n * @param taskId - the task ID to validate.\n * @returns Whether the provided task ID is valid.\n */\nfunction isTaskId(taskId) {\n    if (typeof taskId !== 'string') {\n        return false;\n    }\n    const VALID_TASK_ID_REGEX = /^[A-Za-z0-9_-]+$/;\n    return VALID_TASK_ID_REGEX.test(taskId);\n}\nexports.isTaskId = isTaskId;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
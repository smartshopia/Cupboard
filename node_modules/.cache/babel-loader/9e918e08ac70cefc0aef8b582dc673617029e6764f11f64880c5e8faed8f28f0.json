{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nvar _default = stringify;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","unsafeStringify","_validate","_interopRequireDefault","require","obj","__esModule","byteToHex","i","push","toString","slice","arr","offset","stringify","uuid","TypeError","_default"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/node_modules/uuid/dist/commonjs-browser/stringify.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxBF,OAAO,CAACG,eAAe,GAAGA,eAAe;AAEzC,IAAIC,SAAS,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;AAEhE,SAASD,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEL,OAAO,EAAEK;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAG,EAAE;AAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAE,EAAEA,CAAC,EAAE;EAC5BD,SAAS,CAACE,IAAI,CAAC,CAACD,CAAC,GAAG,KAAK,EAAEE,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnD;AAEA,SAASV,eAAeA,CAACW,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAE;EACxC;EACA;EACA,OAAON,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACK,GAAG,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC;AACpf;AAEA,SAASC,SAASA,CAACF,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAE;EAClC,MAAME,IAAI,GAAGd,eAAe,CAACW,GAAG,EAAEC,MAAM,CAAC,CAAC,CAAC;EAC3C;EACA;EACA;EACA;;EAEA,IAAI,CAAC,CAAC,CAAC,EAAEX,SAAS,CAACF,OAAO,EAAEe,IAAI,CAAC,EAAE;IACjC,MAAMC,SAAS,CAAC,6BAA6B,CAAC;EAChD;EAEA,OAAOD,IAAI;AACb;AAEA,IAAIE,QAAQ,GAAGH,SAAS;AACxBhB,OAAO,CAACE,OAAO,GAAGiB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nmodule.exports = createRBTree;\nvar RED = 0;\nvar BLACK = 1;\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color;\n  this.key = key;\n  this.value = value;\n  this.left = left;\n  this.right = right;\n  this._count = count;\n}\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count);\n}\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count);\n}\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0);\n}\nfunction RedBlackTree(compare, root) {\n  this._compare = compare;\n  this.root = root;\n}\nvar proto = RedBlackTree.prototype;\nObject.defineProperty(proto, \"keys\", {\n  get: function () {\n    var result = [];\n    this.forEach(function (k, v) {\n      result.push(k);\n    });\n    return result;\n  }\n});\nObject.defineProperty(proto, \"values\", {\n  get: function () {\n    var result = [];\n    this.forEach(function (k, v) {\n      result.push(v);\n    });\n    return result;\n  }\n});\n\n//Returns the number of nodes in the tree\nObject.defineProperty(proto, \"length\", {\n  get: function () {\n    if (this.root) {\n      return this.root._count;\n    }\n    return 0;\n  }\n});\n\n//Insert a new item into the tree\nproto.insert = function (key, value) {\n  var cmp = this._compare;\n  //Find point to insert new node at\n  var n = this.root;\n  var n_stack = [];\n  var d_stack = [];\n  while (n) {\n    var d = cmp(key, n.key);\n    n_stack.push(n);\n    d_stack.push(d);\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  //Rebuild path to leaf node\n  n_stack.push(new RBNode(RED, key, value, null, null, 1));\n  for (var s = n_stack.length - 2; s >= 0; --s) {\n    var n = n_stack[s];\n    if (d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s + 1], n.right, n._count + 1);\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s + 1], n._count + 1);\n    }\n  }\n  //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n  for (var s = n_stack.length - 1; s > 1; --s) {\n    var p = n_stack[s - 1];\n    var n = n_stack[s];\n    if (p._color === BLACK || n._color === BLACK) {\n      break;\n    }\n    var pp = n_stack[s - 2];\n    if (pp.left === p) {\n      if (p.left === n) {\n        var y = pp.right;\n        if (y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK;\n          pp.right = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED;\n          pp.left = p.right;\n          p._color = BLACK;\n          p.right = pp;\n          n_stack[s - 2] = p;\n          n_stack[s - 1] = n;\n          recount(pp);\n          recount(p);\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n            if (ppp.left === pp) {\n              ppp.left = p;\n            } else {\n              ppp.right = p;\n            }\n          }\n          break;\n        }\n      } else {\n        var y = pp.right;\n        if (y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK;\n          pp.right = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left;\n          pp._color = RED;\n          pp.left = n.right;\n          n._color = BLACK;\n          n.left = p;\n          n.right = pp;\n          n_stack[s - 2] = n;\n          n_stack[s - 1] = p;\n          recount(pp);\n          recount(p);\n          recount(n);\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n            if (ppp.left === pp) {\n              ppp.left = n;\n            } else {\n              ppp.right = n;\n            }\n          }\n          break;\n        }\n      }\n    } else {\n      if (p.right === n) {\n        var y = pp.left;\n        if (y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK;\n          pp.left = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED;\n          pp.right = p.left;\n          p._color = BLACK;\n          p.left = pp;\n          n_stack[s - 2] = p;\n          n_stack[s - 1] = n;\n          recount(pp);\n          recount(p);\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n            if (ppp.right === pp) {\n              ppp.right = p;\n            } else {\n              ppp.left = p;\n            }\n          }\n          break;\n        }\n      } else {\n        var y = pp.left;\n        if (y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK;\n          pp.left = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right;\n          pp._color = RED;\n          pp.right = n.left;\n          n._color = BLACK;\n          n.right = p;\n          n.left = pp;\n          n_stack[s - 2] = n;\n          n_stack[s - 1] = p;\n          recount(pp);\n          recount(p);\n          recount(n);\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n            if (ppp.right === pp) {\n              ppp.right = n;\n            } else {\n              ppp.left = n;\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n  //Return new tree\n  n_stack[0]._color = BLACK;\n  return new RedBlackTree(cmp, n_stack[0]);\n};\n\n//Visit all nodes inorder\nfunction doVisitFull(visit, node) {\n  if (node.left) {\n    var v = doVisitFull(visit, node.left);\n    if (v) {\n      return v;\n    }\n  }\n  var v = visit(node.key, node.value);\n  if (v) {\n    return v;\n  }\n  if (node.right) {\n    return doVisitFull(visit, node.right);\n  }\n}\n\n//Visit half nodes in order\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key);\n  if (l <= 0) {\n    if (node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left);\n      if (v) {\n        return v;\n      }\n    }\n    var v = visit(node.key, node.value);\n    if (v) {\n      return v;\n    }\n  }\n  if (node.right) {\n    return doVisitHalf(lo, compare, visit, node.right);\n  }\n}\n\n//Visit all nodes within a range\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key);\n  var h = compare(hi, node.key);\n  var v;\n  if (l <= 0) {\n    if (node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left);\n      if (v) {\n        return v;\n      }\n    }\n    if (h > 0) {\n      v = visit(node.key, node.value);\n      if (v) {\n        return v;\n      }\n    }\n  }\n  if (h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right);\n  }\n}\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if (!this.root) {\n    return;\n  }\n  switch (arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root);\n      break;\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root);\n      break;\n    case 3:\n      if (this._compare(lo, hi) >= 0) {\n        return;\n      }\n      return doVisit(lo, hi, this._compare, visit, this.root);\n      break;\n  }\n};\n\n//First item in list\nObject.defineProperty(proto, \"begin\", {\n  get: function () {\n    var stack = [];\n    var n = this.root;\n    while (n) {\n      stack.push(n);\n      n = n.left;\n    }\n    return new RedBlackTreeIterator(this, stack);\n  }\n});\n\n//Last item in list\nObject.defineProperty(proto, \"end\", {\n  get: function () {\n    var stack = [];\n    var n = this.root;\n    while (n) {\n      stack.push(n);\n      n = n.right;\n    }\n    return new RedBlackTreeIterator(this, stack);\n  }\n});\n\n//Find the ith item in the tree\nproto.at = function (idx) {\n  if (idx < 0) {\n    return new RedBlackTreeIterator(this, []);\n  }\n  var n = this.root;\n  var stack = [];\n  while (true) {\n    stack.push(n);\n    if (n.left) {\n      if (idx < n.left._count) {\n        n = n.left;\n        continue;\n      }\n      idx -= n.left._count;\n    }\n    if (!idx) {\n      return new RedBlackTreeIterator(this, stack);\n    }\n    idx -= 1;\n    if (n.right) {\n      if (idx >= n.right._count) {\n        break;\n      }\n      n = n.right;\n    } else {\n      break;\n    }\n  }\n  return new RedBlackTreeIterator(this, []);\n};\nproto.ge = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n    if (d <= 0) {\n      last_ptr = stack.length;\n    }\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\nproto.gt = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n    if (d < 0) {\n      last_ptr = stack.length;\n    }\n    if (d < 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\nproto.lt = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n    if (d > 0) {\n      last_ptr = stack.length;\n    }\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\nproto.le = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n    if (d >= 0) {\n      last_ptr = stack.length;\n    }\n    if (d < 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\n\n//Finds the item with key if it exists\nproto.find = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n    if (d === 0) {\n      return new RedBlackTreeIterator(this, stack);\n    }\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  return new RedBlackTreeIterator(this, []);\n};\n\n//Removes item with key from tree\nproto.remove = function (key) {\n  var iter = this.find(key);\n  if (iter) {\n    return iter.remove();\n  }\n  return this;\n};\n\n//Returns the item at `key`\nproto.get = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  while (n) {\n    var d = cmp(key, n.key);\n    if (d === 0) {\n      return n.value;\n    }\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n  return;\n};\n\n//Iterator for red black tree\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree;\n  this._stack = stack;\n}\nvar iproto = RedBlackTreeIterator.prototype;\n\n//Test if iterator is valid\nObject.defineProperty(iproto, \"valid\", {\n  get: function () {\n    return this._stack.length > 0;\n  }\n});\n\n//Node of the iterator\nObject.defineProperty(iproto, \"node\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1];\n    }\n    return null;\n  },\n  enumerable: true\n});\n\n//Makes a copy of an iterator\niproto.clone = function () {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice());\n};\n\n//Swaps two nodes\nfunction swapNode(n, v) {\n  n.key = v.key;\n  n.value = v.value;\n  n.left = v.left;\n  n.right = v.right;\n  n._color = v._color;\n  n._count = v._count;\n}\n\n//Fix up a double black node in a tree\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z;\n  for (var i = stack.length - 1; i >= 0; --i) {\n    n = stack[i];\n    if (i === 0) {\n      n._color = BLACK;\n      return;\n    }\n    //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n    p = stack[i - 1];\n    if (p.left === n) {\n      //console.log(\"left child\")\n      s = p.right;\n      if (s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s);\n        z = s.right = cloneNode(s.right);\n        p.right = s.left;\n        s.left = p;\n        s.right = z;\n        s._color = p._color;\n        n._color = BLACK;\n        p._color = BLACK;\n        z._color = BLACK;\n        recount(p);\n        recount(s);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.left === p) {\n            pp.left = s;\n          } else {\n            pp.right = s;\n          }\n        }\n        stack[i - 1] = s;\n        return;\n      } else if (s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s);\n        z = s.left = cloneNode(s.left);\n        p.right = z.left;\n        s.left = z.right;\n        z.left = p;\n        z.right = s;\n        z._color = p._color;\n        p._color = BLACK;\n        s._color = BLACK;\n        n._color = BLACK;\n        recount(p);\n        recount(s);\n        recount(z);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.left === p) {\n            pp.left = z;\n          } else {\n            pp.right = z;\n          }\n        }\n        stack[i - 1] = z;\n        return;\n      }\n      if (s._color === BLACK) {\n        if (p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK;\n          p.right = repaint(RED, s);\n          return;\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s);\n          continue;\n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s);\n        p.right = s.left;\n        s.left = p;\n        s._color = p._color;\n        p._color = RED;\n        recount(p);\n        recount(s);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.left === p) {\n            pp.left = s;\n          } else {\n            pp.right = s;\n          }\n        }\n        stack[i - 1] = s;\n        stack[i] = p;\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n;\n        } else {\n          stack.push(n);\n        }\n        i = i + 2;\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left;\n      if (s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s);\n        z = s.left = cloneNode(s.left);\n        p.left = s.right;\n        s.right = p;\n        s.left = z;\n        s._color = p._color;\n        n._color = BLACK;\n        p._color = BLACK;\n        z._color = BLACK;\n        recount(p);\n        recount(s);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.right === p) {\n            pp.right = s;\n          } else {\n            pp.left = s;\n          }\n        }\n        stack[i - 1] = s;\n        return;\n      } else if (s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s);\n        z = s.right = cloneNode(s.right);\n        p.left = z.right;\n        s.right = z.left;\n        z.right = p;\n        z.left = s;\n        z._color = p._color;\n        p._color = BLACK;\n        s._color = BLACK;\n        n._color = BLACK;\n        recount(p);\n        recount(s);\n        recount(z);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.right === p) {\n            pp.right = z;\n          } else {\n            pp.left = z;\n          }\n        }\n        stack[i - 1] = z;\n        return;\n      }\n      if (s._color === BLACK) {\n        if (p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK;\n          p.left = repaint(RED, s);\n          return;\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s);\n          continue;\n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s);\n        p.left = s.right;\n        s.right = p;\n        s._color = p._color;\n        p._color = RED;\n        recount(p);\n        recount(s);\n        if (i > 1) {\n          var pp = stack[i - 2];\n          if (pp.right === p) {\n            pp.right = s;\n          } else {\n            pp.left = s;\n          }\n        }\n        stack[i - 1] = s;\n        stack[i] = p;\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n;\n        } else {\n          stack.push(n);\n        }\n        i = i + 2;\n      }\n    }\n  }\n}\n\n//Removes item at iterator from tree\niproto.remove = function () {\n  var stack = this._stack;\n  if (stack.length === 0) {\n    return this.tree;\n  }\n  //First copy path to node\n  var cstack = new Array(stack.length);\n  var n = stack[stack.length - 1];\n  cstack[cstack.length - 1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count);\n  for (var i = stack.length - 2; i >= 0; --i) {\n    var n = stack[i];\n    if (n.left === stack[i + 1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n  }\n\n  //Get node\n  n = cstack[cstack.length - 1];\n  //console.log(\"start remove: \", n.value)\n\n  //If not leaf, then swap with previous node\n  if (n.left && n.right) {\n    //console.log(\"moving to leaf\")\n\n    //First walk to previous leaf\n    var split = cstack.length;\n    n = n.left;\n    while (n.right) {\n      cstack.push(n);\n      n = n.right;\n    }\n    //Copy path to leaf\n    var v = cstack[split - 1];\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count));\n    cstack[split - 1].key = n.key;\n    cstack[split - 1].value = n.value;\n\n    //Fix up stack\n    for (var i = cstack.length - 2; i >= split; --i) {\n      n = cstack[i];\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n    cstack[split - 1].left = cstack[split];\n  }\n  //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n\n  //Remove leaf node\n  n = cstack[cstack.length - 1];\n  if (n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length - 2];\n    if (p.left === n) {\n      p.left = null;\n    } else if (p.right === n) {\n      p.right = null;\n    }\n    cstack.pop();\n    for (var i = 0; i < cstack.length; ++i) {\n      cstack[i]._count--;\n    }\n    return new RedBlackTree(this.tree._compare, cstack[0]);\n  } else {\n    if (n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if (n.left) {\n        swapNode(n, n.left);\n      } else if (n.right) {\n        swapNode(n, n.right);\n      }\n      //Child must be red, so repaint it black to balance color\n      n._color = BLACK;\n      for (var i = 0; i < cstack.length - 1; ++i) {\n        cstack[i]._count--;\n      }\n      return new RedBlackTree(this.tree._compare, cstack[0]);\n    } else if (cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null);\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for (var i = 0; i < cstack.length; ++i) {\n        cstack[i]._count--;\n      }\n      var parent = cstack[cstack.length - 2];\n      fixDoubleBlack(cstack);\n      //Fix up links\n      if (parent.left === n) {\n        parent.left = null;\n      } else {\n        parent.right = null;\n      }\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0]);\n};\n\n//Returns key\nObject.defineProperty(iproto, \"key\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1].key;\n    }\n    return;\n  },\n  enumerable: true\n});\n\n//Returns value\nObject.defineProperty(iproto, \"value\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1].value;\n    }\n    return;\n  },\n  enumerable: true\n});\n\n//Returns the position of this iterator in the sorted list\nObject.defineProperty(iproto, \"index\", {\n  get: function () {\n    var idx = 0;\n    var stack = this._stack;\n    if (stack.length === 0) {\n      var r = this.tree.root;\n      if (r) {\n        return r._count;\n      }\n      return 0;\n    } else if (stack[stack.length - 1].left) {\n      idx = stack[stack.length - 1].left._count;\n    }\n    for (var s = stack.length - 2; s >= 0; --s) {\n      if (stack[s + 1] === stack[s].right) {\n        ++idx;\n        if (stack[s].left) {\n          idx += stack[s].left._count;\n        }\n      }\n    }\n    return idx;\n  },\n  enumerable: true\n});\n\n//Advances iterator to next element in list\niproto.next = function () {\n  var stack = this._stack;\n  if (stack.length === 0) {\n    return;\n  }\n  var n = stack[stack.length - 1];\n  if (n.right) {\n    n = n.right;\n    while (n) {\n      stack.push(n);\n      n = n.left;\n    }\n  } else {\n    stack.pop();\n    while (stack.length > 0 && stack[stack.length - 1].right === n) {\n      n = stack[stack.length - 1];\n      stack.pop();\n    }\n  }\n};\n\n//Checks if iterator is at end of tree\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function () {\n    var stack = this._stack;\n    if (stack.length === 0) {\n      return false;\n    }\n    if (stack[stack.length - 1].right) {\n      return true;\n    }\n    for (var s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1].left === stack[s]) {\n        return true;\n      }\n    }\n    return false;\n  }\n});\n\n//Update value\niproto.update = function (value) {\n  var stack = this._stack;\n  if (stack.length === 0) {\n    throw new Error(\"Can't update empty node!\");\n  }\n  var cstack = new Array(stack.length);\n  var n = stack[stack.length - 1];\n  cstack[cstack.length - 1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count);\n  for (var i = stack.length - 2; i >= 0; --i) {\n    n = stack[i];\n    if (n.left === stack[i + 1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0]);\n};\n\n//Moves iterator backward one element\niproto.prev = function () {\n  var stack = this._stack;\n  if (stack.length === 0) {\n    return;\n  }\n  var n = stack[stack.length - 1];\n  if (n.left) {\n    n = n.left;\n    while (n) {\n      stack.push(n);\n      n = n.right;\n    }\n  } else {\n    stack.pop();\n    while (stack.length > 0 && stack[stack.length - 1].left === n) {\n      n = stack[stack.length - 1];\n      stack.pop();\n    }\n  }\n};\n\n//Checks if iterator is at start of tree\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function () {\n    var stack = this._stack;\n    if (stack.length === 0) {\n      return false;\n    }\n    if (stack[stack.length - 1].left) {\n      return true;\n    }\n    for (var s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1].right === stack[s]) {\n        return true;\n      }\n    }\n    return false;\n  }\n});\n\n//Default comparison function\nfunction defaultCompare(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n//Build a tree\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null);\n}","map":{"version":3,"names":["module","exports","createRBTree","RED","BLACK","RBNode","color","key","value","left","right","count","_color","_count","cloneNode","node","repaint","recount","RedBlackTree","compare","root","_compare","proto","prototype","Object","defineProperty","get","result","forEach","k","v","push","insert","cmp","n","n_stack","d_stack","d","s","length","p","pp","y","ppp","doVisitFull","visit","doVisitHalf","lo","l","doVisit","hi","h","rbTreeForEach","arguments","stack","RedBlackTreeIterator","at","idx","ge","last_ptr","gt","lt","le","find","remove","iter","tree","_stack","iproto","enumerable","clone","slice","swapNode","fixDoubleBlack","z","i","cstack","Array","split","pop","parent","r","next","update","Error","prev","defaultCompare","a","b"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/functional-red-black-tree/rbtree.js"],"sourcesContent":["\"use strict\"\n\nmodule.exports = createRBTree\n\nvar RED   = 0\nvar BLACK = 1\n\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color\n  this.key = key\n  this.value = value\n  this.left = left\n  this.right = right\n  this._count = count\n}\n\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)\n}\n\nfunction RedBlackTree(compare, root) {\n  this._compare = compare\n  this.root = root\n}\n\nvar proto = RedBlackTree.prototype\n\nObject.defineProperty(proto, \"keys\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(k)\n    })\n    return result\n  }\n})\n\nObject.defineProperty(proto, \"values\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(v)\n    })\n    return result\n  }\n})\n\n//Returns the number of nodes in the tree\nObject.defineProperty(proto, \"length\", {\n  get: function() {\n    if(this.root) {\n      return this.root._count\n    }\n    return 0\n  }\n})\n\n//Insert a new item into the tree\nproto.insert = function(key, value) {\n  var cmp = this._compare\n  //Find point to insert new node at\n  var n = this.root\n  var n_stack = []\n  var d_stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  //Rebuild path to leaf node\n  n_stack.push(new RBNode(RED, key, value, null, null, 1))\n  for(var s=n_stack.length-2; s>=0; --s) {\n    var n = n_stack[s]\n    if(d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)\n    }\n  }\n  //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n  for(var s=n_stack.length-1; s>1; --s) {\n    var p = n_stack[s-1]\n    var n = n_stack[s]\n    if(p._color === BLACK || n._color === BLACK) {\n      break\n    }\n    var pp = n_stack[s-2]\n    if(pp.left === p) {\n      if(p.left === n) {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED\n          pp.left = p.right\n          p._color = BLACK\n          p.right = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left\n          pp._color = RED\n          pp.left = n.right\n          n._color = BLACK\n          n.left = p\n          n.right = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = n\n            } else {\n              ppp.right = n\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if(p.right === n) {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED\n          pp.right = p.left\n          p._color = BLACK\n          p.left = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right\n          pp._color = RED\n          pp.right = n.left\n          n._color = BLACK\n          n.right = p\n          n.left = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = n\n            } else {\n              ppp.left = n\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  //Return new tree\n  n_stack[0]._color = BLACK\n  return new RedBlackTree(cmp, n_stack[0])\n}\n\n\n//Visit all nodes inorder\nfunction doVisitFull(visit, node) {\n  if(node.left) {\n    var v = doVisitFull(visit, node.left)\n    if(v) { return v }\n  }\n  var v = visit(node.key, node.value)\n  if(v) { return v }\n  if(node.right) {\n    return doVisitFull(visit, node.right)\n  }\n}\n\n//Visit half nodes in order\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key)\n  if(l <= 0) {\n    if(node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left)\n      if(v) { return v }\n    }\n    var v = visit(node.key, node.value)\n    if(v) { return v }\n  }\n  if(node.right) {\n    return doVisitHalf(lo, compare, visit, node.right)\n  }\n}\n\n//Visit all nodes within a range\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key)\n  var h = compare(hi, node.key)\n  var v\n  if(l <= 0) {\n    if(node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left)\n      if(v) { return v }\n    }\n    if(h > 0) {\n      v = visit(node.key, node.value)\n      if(v) { return v }\n    }\n  }\n  if(h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right)\n  }\n}\n\n\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if(!this.root) {\n    return\n  }\n  switch(arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root)\n    break\n\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root)\n    break\n\n    case 3:\n      if(this._compare(lo, hi) >= 0) {\n        return\n      }\n      return doVisit(lo, hi, this._compare, visit, this.root)\n    break\n  }\n}\n\n//First item in list\nObject.defineProperty(proto, \"begin\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Last item in list\nObject.defineProperty(proto, \"end\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Find the ith item in the tree\nproto.at = function(idx) {\n  if(idx < 0) {\n    return new RedBlackTreeIterator(this, [])\n  }\n  var n = this.root\n  var stack = []\n  while(true) {\n    stack.push(n)\n    if(n.left) {\n      if(idx < n.left._count) {\n        n = n.left\n        continue\n      }\n      idx -= n.left._count\n    }\n    if(!idx) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    idx -= 1\n    if(n.right) {\n      if(idx >= n.right._count) {\n        break\n      }\n      n = n.right\n    } else {\n      break\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\nproto.ge = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d <= 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.gt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d < 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.lt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d > 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.le = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d >= 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\n//Finds the item with key if it exists\nproto.find = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d === 0) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\n//Removes item with key from tree\nproto.remove = function(key) {\n  var iter = this.find(key)\n  if(iter) {\n    return iter.remove()\n  }\n  return this\n}\n\n//Returns the item at `key`\nproto.get = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  while(n) {\n    var d = cmp(key, n.key)\n    if(d === 0) {\n      return n.value\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return\n}\n\n//Iterator for red black tree\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree\n  this._stack = stack\n}\n\nvar iproto = RedBlackTreeIterator.prototype\n\n//Test if iterator is valid\nObject.defineProperty(iproto, \"valid\", {\n  get: function() {\n    return this._stack.length > 0\n  }\n})\n\n//Node of the iterator\nObject.defineProperty(iproto, \"node\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1]\n    }\n    return null\n  },\n  enumerable: true\n})\n\n//Makes a copy of an iterator\niproto.clone = function() {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice())\n}\n\n//Swaps two nodes\nfunction swapNode(n, v) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n._color = v._color\n  n._count = v._count\n}\n\n//Fix up a double black node in a tree\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z\n  for(var i=stack.length-1; i>=0; --i) {\n    n = stack[i]\n    if(i === 0) {\n      n._color = BLACK\n      return\n    }\n    //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n    p = stack[i-1]\n    if(p.left === n) {\n      //console.log(\"left child\")\n      s = p.right\n      if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK\n          p.right = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.right = s.left\n        s.left = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left\n      if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK\n          p.left = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.left = s.right\n        s.right = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    }\n  }\n}\n\n//Removes item at iterator from tree\niproto.remove = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return this.tree\n  }\n  //First copy path to node\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    var n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n\n  //Get node\n  n = cstack[cstack.length-1]\n  //console.log(\"start remove: \", n.value)\n\n  //If not leaf, then swap with previous node\n  if(n.left && n.right) {\n    //console.log(\"moving to leaf\")\n\n    //First walk to previous leaf\n    var split = cstack.length\n    n = n.left\n    while(n.right) {\n      cstack.push(n)\n      n = n.right\n    }\n    //Copy path to leaf\n    var v = cstack[split-1]\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))\n    cstack[split-1].key = n.key\n    cstack[split-1].value = n.value\n\n    //Fix up stack\n    for(var i=cstack.length-2; i>=split; --i) {\n      n = cstack[i]\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n    cstack[split-1].left = cstack[split]\n  }\n  //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n\n  //Remove leaf node\n  n = cstack[cstack.length-1]\n  if(n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length-2]\n    if(p.left === n) {\n      p.left = null\n    } else if(p.right === n) {\n      p.right = null\n    }\n    cstack.pop()\n    for(var i=0; i<cstack.length; ++i) {\n      cstack[i]._count--\n    }\n    return new RedBlackTree(this.tree._compare, cstack[0])\n  } else {\n    if(n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if(n.left) {\n        swapNode(n, n.left)\n      } else if(n.right) {\n        swapNode(n, n.right)\n      }\n      //Child must be red, so repaint it black to balance color\n      n._color = BLACK\n      for(var i=0; i<cstack.length-1; ++i) {\n        cstack[i]._count--\n      }\n      return new RedBlackTree(this.tree._compare, cstack[0])\n    } else if(cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null)\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for(var i=0; i<cstack.length; ++i) {\n        cstack[i]._count--\n      }\n      var parent = cstack[cstack.length-2]\n      fixDoubleBlack(cstack)\n      //Fix up links\n      if(parent.left === n) {\n        parent.left = null\n      } else {\n        parent.right = null\n      }\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Returns key\nObject.defineProperty(iproto, \"key\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].key\n    }\n    return\n  },\n  enumerable: true\n})\n\n//Returns value\nObject.defineProperty(iproto, \"value\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].value\n    }\n    return\n  },\n  enumerable: true\n})\n\n\n//Returns the position of this iterator in the sorted list\nObject.defineProperty(iproto, \"index\", {\n  get: function() {\n    var idx = 0\n    var stack = this._stack\n    if(stack.length === 0) {\n      var r = this.tree.root\n      if(r) {\n        return r._count\n      }\n      return 0\n    } else if(stack[stack.length-1].left) {\n      idx = stack[stack.length-1].left._count\n    }\n    for(var s=stack.length-2; s>=0; --s) {\n      if(stack[s+1] === stack[s].right) {\n        ++idx\n        if(stack[s].left) {\n          idx += stack[s].left._count\n        }\n      }\n    }\n    return idx\n  },\n  enumerable: true\n})\n\n//Advances iterator to next element in list\niproto.next = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.right) {\n    n = n.right\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].right === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at end of tree\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].right) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Update value\niproto.update = function(value) {\n  var stack = this._stack\n  if(stack.length === 0) {\n    throw new Error(\"Can't update empty node!\")\n  }\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Moves iterator backward one element\niproto.prev = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.left) {\n    n = n.left\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].left === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at start of tree\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].left) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Default comparison function\nfunction defaultCompare(a, b) {\n  if(a < b) {\n    return -1\n  }\n  if(a > b) {\n    return 1\n  }\n  return 0\n}\n\n//Build a tree\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
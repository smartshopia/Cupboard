{"ast":null,"code":"/*! firebase-admin v12.2.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearGlobalAppDefaultCred = exports.refreshToken = exports.cert = exports.applicationDefault = void 0;\nconst credential_internal_1 = require(\"./credential-internal\");\nlet globalAppDefaultCred;\nconst globalCertCreds = {};\nconst globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\n * Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to {@link firebase-admin.app#initializeApp}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * initializeApp({\n *   credential: applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\nfunction applicationDefault(httpAgent) {\n  if (typeof globalAppDefaultCred === 'undefined') {\n    globalAppDefaultCred = (0, credential_internal_1.getApplicationDefault)(httpAgent);\n  }\n  return globalAppDefaultCred;\n}\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * initializeApp({\n *   credential: cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * initializeApp({\n *   credential: cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject - The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n  const stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n  if (!(stringifiedServiceAccount in globalCertCreds)) {\n    globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n  }\n  return globalCertCreds[stringifiedServiceAccount];\n}\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * const refreshToken = require(\"path/to/refreshToken.json\");\n * initializeApp({\n *   credential: refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject - The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n  const stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n  if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n    globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n  }\n  return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\nexports.refreshToken = refreshToken;\n/**\n * Clears the global ADC cache. Exported for testing.\n */\nfunction clearGlobalAppDefaultCred() {\n  globalAppDefaultCred = undefined;\n}\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;","map":{"version":3,"names":["Object","defineProperty","exports","value","clearGlobalAppDefaultCred","refreshToken","cert","applicationDefault","credential_internal_1","require","globalAppDefaultCred","globalCertCreds","globalRefreshTokenCreds","httpAgent","getApplicationDefault","serviceAccountPathOrObject","stringifiedServiceAccount","JSON","stringify","ServiceAccountCredential","refreshTokenPathOrObject","stringifiedRefreshToken","RefreshTokenCredential","undefined"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/firebase-admin/lib/app/credential-factory.js"],"sourcesContent":["/*! firebase-admin v12.2.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearGlobalAppDefaultCred = exports.refreshToken = exports.cert = exports.applicationDefault = void 0;\nconst credential_internal_1 = require(\"./credential-internal\");\nlet globalAppDefaultCred;\nconst globalCertCreds = {};\nconst globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\n * Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to {@link firebase-admin.app#initializeApp}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * initializeApp({\n *   credential: applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\nfunction applicationDefault(httpAgent) {\n    if (typeof globalAppDefaultCred === 'undefined') {\n        globalAppDefaultCred = (0, credential_internal_1.getApplicationDefault)(httpAgent);\n    }\n    return globalAppDefaultCred;\n}\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * initializeApp({\n *   credential: cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * initializeApp({\n *   credential: cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject - The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n    const stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\n        globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n    }\n    return globalCertCreds[stringifiedServiceAccount];\n}\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * const refreshToken = require(\"path/to/refreshToken.json\");\n * initializeApp({\n *   credential: refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject - The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n    const stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n        globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n    }\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\nexports.refreshToken = refreshToken;\n/**\n * Clears the global ADC cache. Exported for testing.\n */\nfunction clearGlobalAppDefaultCred() {\n    globalAppDefaultCred = undefined;\n}\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGF,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACI,IAAI,GAAGJ,OAAO,CAACK,kBAAkB,GAAG,KAAK,CAAC;AAC7G,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9D,IAAIC,oBAAoB;AACxB,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,uBAAuB,GAAG,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,kBAAkBA,CAACM,SAAS,EAAE;EACnC,IAAI,OAAOH,oBAAoB,KAAK,WAAW,EAAE;IAC7CA,oBAAoB,GAAG,CAAC,CAAC,EAAEF,qBAAqB,CAACM,qBAAqB,EAAED,SAAS,CAAC;EACtF;EACA,OAAOH,oBAAoB;AAC/B;AACAR,OAAO,CAACK,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,IAAIA,CAACS,0BAA0B,EAAEF,SAAS,EAAE;EACjD,MAAMG,yBAAyB,GAAGC,IAAI,CAACC,SAAS,CAACH,0BAA0B,CAAC;EAC5E,IAAI,EAAEC,yBAAyB,IAAIL,eAAe,CAAC,EAAE;IACjDA,eAAe,CAACK,yBAAyB,CAAC,GAAG,IAAIR,qBAAqB,CAACW,wBAAwB,CAACJ,0BAA0B,EAAEF,SAAS,CAAC;EAC1I;EACA,OAAOF,eAAe,CAACK,yBAAyB,CAAC;AACrD;AACAd,OAAO,CAACI,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,YAAYA,CAACe,wBAAwB,EAAEP,SAAS,EAAE;EACvD,MAAMQ,uBAAuB,GAAGJ,IAAI,CAACC,SAAS,CAACE,wBAAwB,CAAC;EACxE,IAAI,EAAEC,uBAAuB,IAAIT,uBAAuB,CAAC,EAAE;IACvDA,uBAAuB,CAACS,uBAAuB,CAAC,GAAG,IAAIb,qBAAqB,CAACc,sBAAsB,CAACF,wBAAwB,EAAEP,SAAS,CAAC;EAC5I;EACA,OAAOD,uBAAuB,CAACS,uBAAuB,CAAC;AAC3D;AACAnB,OAAO,CAACG,YAAY,GAAGA,YAAY;AACnC;AACA;AACA;AACA,SAASD,yBAAyBA,CAAA,EAAG;EACjCM,oBAAoB,GAAGa,SAAS;AACpC;AACArB,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
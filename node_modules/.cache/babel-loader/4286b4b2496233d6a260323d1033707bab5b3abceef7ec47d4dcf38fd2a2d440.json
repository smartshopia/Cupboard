{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSubjectTokenSupplier = void 0;\nconst util_1 = require(\"util\");\nconst fs = require(\"fs\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {});\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {});\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {});\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass FileSubjectTokenSupplier {\n  /**\n   * Instantiates a new file based subject token supplier.\n   * @param opts The file subject token supplier options to build the supplier\n   *   with.\n   */\n  constructor(opts) {\n    this.filePath = opts.filePath;\n    this.formatType = opts.formatType;\n    this.subjectTokenFieldName = opts.subjectTokenFieldName;\n  }\n  /**\n   * Returns the subject token stored at the file specified in the constructor.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link IdentityPoolClient}, contains the requested audience and subject\n   *   token type for the external account identity. Not used.\n   */\n  async getSubjectToken(context) {\n    // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n    let parsedFilePath = this.filePath;\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      parsedFilePath = await realpath(parsedFilePath);\n      if (!(await lstat(parsedFilePath)).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n      }\n      throw err;\n    }\n    let subjectToken;\n    const rawText = await readFile(parsedFilePath, {\n      encoding: 'utf8'\n    });\n    if (this.formatType === 'text') {\n      subjectToken = rawText;\n    } else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n      const json = JSON.parse(rawText);\n      subjectToken = json[this.subjectTokenFieldName];\n    }\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source file');\n    }\n    return subjectToken;\n  }\n}\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;","map":{"version":3,"names":["_a","_b","_c","Object","defineProperty","exports","value","FileSubjectTokenSupplier","util_1","require","fs","readFile","promisify","realpath","lstat","constructor","opts","filePath","formatType","subjectTokenFieldName","getSubjectToken","context","parsedFilePath","isFile","Error","err","message","subjectToken","rawText","encoding","json","JSON","parse"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileSubjectTokenSupplier = void 0;\nconst util_1 = require(\"util\");\nconst fs = require(\"fs\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : (() => { }));\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : (() => { }));\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : (() => { }));\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass FileSubjectTokenSupplier {\n    /**\n     * Instantiates a new file based subject token supplier.\n     * @param opts The file subject token supplier options to build the supplier\n     *   with.\n     */\n    constructor(opts) {\n        this.filePath = opts.filePath;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    }\n    /**\n     * Returns the subject token stored at the file specified in the constructor.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        let parsedFilePath = this.filePath;\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            parsedFilePath = await realpath(parsedFilePath);\n            if (!(await lstat(parsedFilePath)).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(parsedFilePath, { encoding: 'utf8' });\n        if (this.formatType === 'text') {\n            subjectToken = rawText;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n        }\n        return subjectToken;\n    }\n}\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,EAAE,EAAEC,EAAE,EAAEC,EAAE;AACdC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAG,KAAK,CAAC;AACzC,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAG,CAAC,CAAC,EAAEH,MAAM,CAACI,SAAS,EAAE,CAACZ,EAAE,GAAGU,EAAE,CAACC,QAAQ,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAI,MAAM,CAAE,CAAE,CAAC;AACvG,MAAMa,QAAQ,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACI,SAAS,EAAE,CAACX,EAAE,GAAGS,EAAE,CAACG,QAAQ,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAI,MAAM,CAAE,CAAE,CAAC;AACvG,MAAMa,KAAK,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACI,SAAS,EAAE,CAACV,EAAE,GAAGQ,EAAE,CAACI,KAAK,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAI,MAAM,CAAE,CAAE,CAAC;AACjG;AACA;AACA;AACA;AACA,MAAMK,wBAAwB,CAAC;EAC3B;AACJ;AACA;AACA;AACA;EACIQ,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC7B,IAAI,CAACC,UAAU,GAAGF,IAAI,CAACE,UAAU;IACjC,IAAI,CAACC,qBAAqB,GAAGH,IAAI,CAACG,qBAAqB;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,eAAeA,CAACC,OAAO,EAAE;IAC3B;IACA;IACA,IAAIC,cAAc,GAAG,IAAI,CAACL,QAAQ;IAClC,IAAI;MACA;MACA;MACAK,cAAc,GAAG,MAAMT,QAAQ,CAACS,cAAc,CAAC;MAC/C,IAAI,CAAC,CAAC,MAAMR,KAAK,CAACQ,cAAc,CAAC,EAAEC,MAAM,CAAC,CAAC,EAAE;QACzC,MAAM,IAAIC,KAAK,CAAC,CAAC;MACrB;IACJ,CAAC,CACD,OAAOC,GAAG,EAAE;MACR,IAAIA,GAAG,YAAYD,KAAK,EAAE;QACtBC,GAAG,CAACC,OAAO,GAAG,eAAeJ,cAAc,yCAAyCG,GAAG,CAACC,OAAO,EAAE;MACrG;MACA,MAAMD,GAAG;IACb;IACA,IAAIE,YAAY;IAChB,MAAMC,OAAO,GAAG,MAAMjB,QAAQ,CAACW,cAAc,EAAE;MAAEO,QAAQ,EAAE;IAAO,CAAC,CAAC;IACpE,IAAI,IAAI,CAACX,UAAU,KAAK,MAAM,EAAE;MAC5BS,YAAY,GAAGC,OAAO;IAC1B,CAAC,MACI,IAAI,IAAI,CAACV,UAAU,KAAK,MAAM,IAAI,IAAI,CAACC,qBAAqB,EAAE;MAC/D,MAAMW,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;MAChCD,YAAY,GAAGG,IAAI,CAAC,IAAI,CAACX,qBAAqB,CAAC;IACnD;IACA,IAAI,CAACQ,YAAY,EAAE;MACf,MAAM,IAAIH,KAAK,CAAC,mEAAmE,CAAC;IACxF;IACA,OAAOG,YAAY;EACvB;AACJ;AACAtB,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\n// Node has always utf-8\nconst utf8Decoder = new TextDecoder('utf-8');\nconst textDecoders = new Map([['utf-8', utf8Decoder], ['utf8', utf8Decoder]]);\nfunction getDecoder(charset) {\n  let lc;\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8;\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1;\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le;\n      case 'base64':\n        return decoders.base64;\n      default:\n        if (lc === undefined) {\n          lc = true;\n          charset = charset.toLowerCase();\n          continue;\n        }\n        return decoders.other.bind(charset);\n    }\n  }\n}\nconst decoders = {\n  utf8: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return '';\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding);\n    }\n    return data.utf8Slice(0, data.length);\n  },\n  latin1: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return '';\n    }\n    if (typeof data === 'string') {\n      return data;\n    }\n    return data.latin1Slice(0, data.length);\n  },\n  utf16le: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return '';\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding);\n    }\n    return data.ucs2Slice(0, data.length);\n  },\n  base64: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return '';\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding);\n    }\n    return data.base64Slice(0, data.length);\n  },\n  other: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return '';\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding);\n    }\n    if (textDecoders.has(this.toString())) {\n      try {\n        return textDecoders.get(this).decode(data);\n      } catch {}\n    }\n    return typeof data === 'string' ? data : data.toString();\n  }\n};\nfunction decodeText(text, sourceEncoding, destEncoding) {\n  if (text) {\n    return getDecoder(destEncoding)(text, sourceEncoding);\n  }\n  return text;\n}\nmodule.exports = decodeText;","map":{"version":3,"names":["utf8Decoder","TextDecoder","textDecoders","Map","getDecoder","charset","lc","decoders","utf8","latin1","utf16le","base64","undefined","toLowerCase","other","bind","data","sourceEncoding","length","Buffer","from","utf8Slice","latin1Slice","ucs2Slice","base64Slice","has","toString","get","decode","decodeText","text","destEncoding","module","exports"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@fastify/busboy/lib/utils/decodeText.js"],"sourcesContent":["'use strict'\n\n// Node has always utf-8\nconst utf8Decoder = new TextDecoder('utf-8')\nconst textDecoders = new Map([\n  ['utf-8', utf8Decoder],\n  ['utf8', utf8Decoder]\n])\n\nfunction getDecoder (charset) {\n  let lc\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le\n      case 'base64':\n        return decoders.base64\n      default:\n        if (lc === undefined) {\n          lc = true\n          charset = charset.toLowerCase()\n          continue\n        }\n        return decoders.other.bind(charset)\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.utf8Slice(0, data.length)\n  },\n\n  latin1: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      return data\n    }\n    return data.latin1Slice(0, data.length)\n  },\n\n  utf16le: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.ucs2Slice(0, data.length)\n  },\n\n  base64: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.base64Slice(0, data.length)\n  },\n\n  other: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n\n    if (textDecoders.has(this.toString())) {\n      try {\n        return textDecoders.get(this).decode(data)\n      } catch {}\n    }\n    return typeof data === 'string'\n      ? data\n      : data.toString()\n  }\n}\n\nfunction decodeText (text, sourceEncoding, destEncoding) {\n  if (text) {\n    return getDecoder(destEncoding)(text, sourceEncoding)\n  }\n  return text\n}\n\nmodule.exports = decodeText\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/*! firebase-admin v12.2.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nclass FirestoreService {\n  constructor(app) {\n    this.databases = new Map();\n    this.firestoreSettings = new Map();\n    this.appInternal = app;\n  }\n  initializeDatabase(databaseId, settings) {\n    const existingInstance = this.databases.get(databaseId);\n    if (existingInstance) {\n      const initialSettings = this.firestoreSettings.get(databaseId) ?? {};\n      if (this.checkIfSameSettings(settings, initialSettings)) {\n        return existingInstance;\n      }\n      throw new error_1.FirebaseFirestoreError({\n        code: 'failed-precondition',\n        message: 'initializeFirestore() has already been called with ' + 'different options. To avoid this error, call initializeFirestore() with the ' + 'same options as when it was originally called, or call getFirestore() to return the' + ' already initialized instance.'\n      });\n    }\n    const newInstance = initFirestore(this.app, databaseId, settings);\n    this.databases.set(databaseId, newInstance);\n    this.firestoreSettings.set(databaseId, settings);\n    return newInstance;\n  }\n  getDatabase(databaseId) {\n    let database = this.databases.get(databaseId);\n    if (database === undefined) {\n      database = initFirestore(this.app, databaseId, {});\n      this.databases.set(databaseId, database);\n      this.firestoreSettings.set(databaseId, {});\n    }\n    return database;\n  }\n  checkIfSameSettings(settingsA, settingsB) {\n    const a = settingsA ?? {};\n    const b = settingsB ?? {};\n    // If we start passing more settings to Firestore constructor,\n    // replace this with deep equality check.\n    return a.preferRest === b.preferRest;\n  }\n  /**\n   * Returns the app associated with this Storage instance.\n   *\n   * @returns The app associated with this Storage instance.\n   */\n  get app() {\n    return this.appInternal;\n  }\n}\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app, firestoreSettings) {\n  if (!validator.isNonNullObject(app) || !('options' in app)) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'invalid-argument',\n      message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.'\n    });\n  }\n  const projectId = utils.getExplicitProjectId(app);\n  const credential = app.options.credential;\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const {\n    version: firebaseVersion\n  } = require('../../package.json');\n  const preferRest = firestoreSettings?.preferRest;\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return {\n      credentials: {\n        private_key: credential.privateKey,\n        client_email: credential.clientEmail\n      },\n      // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n      // guaranteed to be available.\n      projectId: projectId,\n      firebaseVersion,\n      preferRest\n    };\n  } else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n    // Try to use the Google application default credentials.\n    // If an explicit project ID is not available, let Firestore client discover one from the\n    // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n    return validator.isNonEmptyString(projectId) ? {\n      projectId,\n      firebaseVersion,\n      preferRest\n    } : {\n      firebaseVersion,\n      preferRest\n    };\n  }\n  throw new error_1.FirebaseFirestoreError({\n    code: 'invalid-credential',\n    message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Firestore API.'\n  });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app, databaseId, firestoreSettings) {\n  const options = getFirestoreOptions(app, firestoreSettings);\n  options.databaseId = databaseId;\n  let firestoreDatabase;\n  try {\n    // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n    firestoreDatabase = require('@google-cloud/firestore').Firestore;\n  } catch (err) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'missing-dependencies',\n      message: 'Failed to import the Cloud Firestore client library for Node.js. ' + 'Make sure to install the \"@google-cloud/firestore\" npm package. ' + `Original error: ${err}`\n    });\n  }\n  return new firestoreDatabase(options);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getFirestoreOptions","FirestoreService","error_1","require","credential_internal_1","validator","utils","constructor","app","databases","Map","firestoreSettings","appInternal","initializeDatabase","databaseId","settings","existingInstance","get","initialSettings","checkIfSameSettings","FirebaseFirestoreError","code","message","newInstance","initFirestore","set","getDatabase","database","undefined","settingsA","settingsB","a","b","preferRest","isNonNullObject","projectId","getExplicitProjectId","credential","options","version","firebaseVersion","ServiceAccountCredential","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","isNonEmptyString","firestoreDatabase","Firestore","err"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/firebase-admin/lib/firestore/firestore-internal.js"],"sourcesContent":["/*! firebase-admin v12.2.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nclass FirestoreService {\n    constructor(app) {\n        this.databases = new Map();\n        this.firestoreSettings = new Map();\n        this.appInternal = app;\n    }\n    initializeDatabase(databaseId, settings) {\n        const existingInstance = this.databases.get(databaseId);\n        if (existingInstance) {\n            const initialSettings = this.firestoreSettings.get(databaseId) ?? {};\n            if (this.checkIfSameSettings(settings, initialSettings)) {\n                return existingInstance;\n            }\n            throw new error_1.FirebaseFirestoreError({\n                code: 'failed-precondition',\n                message: 'initializeFirestore() has already been called with ' +\n                    'different options. To avoid this error, call initializeFirestore() with the ' +\n                    'same options as when it was originally called, or call getFirestore() to return the' +\n                    ' already initialized instance.'\n            });\n        }\n        const newInstance = initFirestore(this.app, databaseId, settings);\n        this.databases.set(databaseId, newInstance);\n        this.firestoreSettings.set(databaseId, settings);\n        return newInstance;\n    }\n    getDatabase(databaseId) {\n        let database = this.databases.get(databaseId);\n        if (database === undefined) {\n            database = initFirestore(this.app, databaseId, {});\n            this.databases.set(databaseId, database);\n            this.firestoreSettings.set(databaseId, {});\n        }\n        return database;\n    }\n    checkIfSameSettings(settingsA, settingsB) {\n        const a = settingsA ?? {};\n        const b = settingsB ?? {};\n        // If we start passing more settings to Firestore constructor,\n        // replace this with deep equality check.\n        return (a.preferRest === b.preferRest);\n    }\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @returns The app associated with this Storage instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n}\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app, firestoreSettings) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'invalid-argument',\n            message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.',\n        });\n    }\n    const projectId = utils.getExplicitProjectId(app);\n    const credential = app.options.credential;\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { version: firebaseVersion } = require('../../package.json');\n    const preferRest = firestoreSettings?.preferRest;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return {\n            credentials: {\n                private_key: credential.privateKey,\n                client_email: credential.clientEmail,\n            },\n            // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n            // guaranteed to be available.\n            projectId: projectId,\n            firebaseVersion,\n            preferRest,\n        };\n    }\n    else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n        // Try to use the Google application default credentials.\n        // If an explicit project ID is not available, let Firestore client discover one from the\n        // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n        return validator.isNonEmptyString(projectId)\n            ? { projectId, firebaseVersion, preferRest }\n            : { firebaseVersion, preferRest };\n    }\n    throw new error_1.FirebaseFirestoreError({\n        code: 'invalid-credential',\n        message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' +\n            'Must initialize the SDK with a certificate credential or application default credentials ' +\n            'to use Cloud Firestore API.',\n    });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app, databaseId, firestoreSettings) {\n    const options = getFirestoreOptions(app, firestoreSettings);\n    options.databaseId = databaseId;\n    let firestoreDatabase;\n    try {\n        // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n        firestoreDatabase = require('@google-cloud/firestore').Firestore;\n    }\n    catch (err) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'missing-dependencies',\n            message: 'Failed to import the Cloud Firestore client library for Node.js. '\n                + 'Make sure to install the \"@google-cloud/firestore\" npm package. '\n                + `Original error: ${err}`,\n        });\n    }\n    return new firestoreDatabase(options);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
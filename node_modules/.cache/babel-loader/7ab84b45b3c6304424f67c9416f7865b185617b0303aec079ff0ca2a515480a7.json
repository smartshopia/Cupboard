{"ast":null,"code":"\"use strict\";\n\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n  keepCase: false\n};\nvar tokenize = require(\"./tokenize\"),\n  Root = require(\"./root\"),\n  Type = require(\"./type\"),\n  Field = require(\"./field\"),\n  MapField = require(\"./mapfield\"),\n  OneOf = require(\"./oneof\"),\n  Enum = require(\"./enum\"),\n  Service = require(\"./service\"),\n  Method = require(\"./method\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar base10Re = /^[1-9][0-9]*$/,\n  base10NegRe = /^-?[1-9][0-9]*$/,\n  base16Re = /^0[x][0-9a-fA-F]+$/,\n  base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n  base8Re = /^0[0-7]+$/,\n  base8NegRe = /^-?0[0-7]+$/,\n  numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n  nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n  typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n  fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\n\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\r\n */\n\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\n\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\nfunction parse(source, root, options) {\n  /* eslint-disable callback-return */\n  if (!(root instanceof Root)) {\n    options = root;\n    root = new Root();\n  }\n  if (!options) options = parse.defaults;\n  var preferTrailingComment = options.preferTrailingComment || false;\n  var tn = tokenize(source, options.alternateCommentMode || false),\n    next = tn.next,\n    push = tn.push,\n    peek = tn.peek,\n    skip = tn.skip,\n    cmnt = tn.cmnt;\n  var head = true,\n    pkg,\n    imports,\n    weakImports,\n    syntax,\n    isProto3 = false;\n  var ptr = root;\n  var applyCase = options.keepCase ? function (name) {\n    return name;\n  } : util.camelCase;\n\n  /* istanbul ignore next */\n  function illegal(token, name, insideTryCatch) {\n    var filename = parse.filename;\n    if (!insideTryCatch) parse.filename = null;\n    return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n  }\n  function readString() {\n    var values = [],\n      token;\n    do {\n      /* istanbul ignore if */\n      if ((token = next()) !== \"\\\"\" && token !== \"'\") throw illegal(token);\n      values.push(next());\n      skip(token);\n      token = peek();\n    } while (token === \"\\\"\" || token === \"'\");\n    return values.join(\"\");\n  }\n  function readValue(acceptTypeRef) {\n    var token = next();\n    switch (token) {\n      case \"'\":\n      case \"\\\"\":\n        push(token);\n        return readString();\n      case \"true\":\n      case \"TRUE\":\n        return true;\n      case \"false\":\n      case \"FALSE\":\n        return false;\n    }\n    try {\n      return parseNumber(token, /* insideTryCatch */true);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (acceptTypeRef && typeRefRe.test(token)) return token;\n\n      /* istanbul ignore next */\n      throw illegal(token, \"value\");\n    }\n  }\n  function readRanges(target, acceptStrings) {\n    var token, start;\n    do {\n      if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\")) target.push(readString());else target.push([start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start]);\n    } while (skip(\",\", true));\n    var dummy = {\n      options: undefined\n    };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseRange_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseRange_line() {\n      parseInlineOptions(dummy); // skip\n    });\n  }\n  function parseNumber(token, insideTryCatch) {\n    var sign = 1;\n    if (token.charAt(0) === \"-\") {\n      sign = -1;\n      token = token.substring(1);\n    }\n    switch (token) {\n      case \"inf\":\n      case \"INF\":\n      case \"Inf\":\n        return sign * Infinity;\n      case \"nan\":\n      case \"NAN\":\n      case \"Nan\":\n      case \"NaN\":\n        return NaN;\n      case \"0\":\n        return 0;\n    }\n    if (base10Re.test(token)) return sign * parseInt(token, 10);\n    if (base16Re.test(token)) return sign * parseInt(token, 16);\n    if (base8Re.test(token)) return sign * parseInt(token, 8);\n\n    /* istanbul ignore else */\n    if (numberRe.test(token)) return sign * parseFloat(token);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"number\", insideTryCatch);\n  }\n  function parseId(token, acceptNegative) {\n    switch (token) {\n      case \"max\":\n      case \"MAX\":\n      case \"Max\":\n        return 536870911;\n      case \"0\":\n        return 0;\n    }\n\n    /* istanbul ignore if */\n    if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n    if (base10NegRe.test(token)) return parseInt(token, 10);\n    if (base16NegRe.test(token)) return parseInt(token, 16);\n\n    /* istanbul ignore else */\n    if (base8NegRe.test(token)) return parseInt(token, 8);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"id\");\n  }\n  function parsePackage() {\n    /* istanbul ignore if */\n    if (pkg !== undefined) throw illegal(\"package\");\n    pkg = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n    ptr = ptr.define(pkg);\n    skip(\";\");\n  }\n  function parseImport() {\n    var token = peek();\n    var whichImports;\n    switch (token) {\n      case \"weak\":\n        whichImports = weakImports || (weakImports = []);\n        next();\n        break;\n      case \"public\":\n        next();\n      // eslint-disable-next-line no-fallthrough\n      default:\n        whichImports = imports || (imports = []);\n        break;\n    }\n    token = readString();\n    skip(\";\");\n    whichImports.push(token);\n  }\n  function parseSyntax() {\n    skip(\"=\");\n    syntax = readString();\n    isProto3 = syntax === \"proto3\";\n\n    /* istanbul ignore if */\n    if (!isProto3 && syntax !== \"proto2\") throw illegal(syntax, \"syntax\");\n    skip(\";\");\n  }\n  function parseCommon(parent, token) {\n    switch (token) {\n      case \"option\":\n        parseOption(parent, token);\n        skip(\";\");\n        return true;\n      case \"message\":\n        parseType(parent, token);\n        return true;\n      case \"enum\":\n        parseEnum(parent, token);\n        return true;\n      case \"service\":\n        parseService(parent, token);\n        return true;\n      case \"extend\":\n        parseExtension(parent, token);\n        return true;\n    }\n    return false;\n  }\n  function ifBlock(obj, fnIf, fnElse) {\n    var trailingLine = tn.line;\n    if (obj) {\n      if (typeof obj.comment !== \"string\") {\n        obj.comment = cmnt(); // try block-type comment\n      }\n      obj.filename = parse.filename;\n    }\n    if (skip(\"{\", true)) {\n      var token;\n      while ((token = next()) !== \"}\") fnIf(token);\n      skip(\";\", true);\n    } else {\n      if (fnElse) fnElse();\n      skip(\";\");\n      if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n    }\n  }\n  function parseType(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n    var type = new Type(token);\n    ifBlock(type, function parseType_block(token) {\n      if (parseCommon(type, token)) return;\n      switch (token) {\n        case \"map\":\n          parseMapField(type, token);\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"oneof\":\n          parseOneOf(type, token);\n          break;\n        case \"extensions\":\n          readRanges(type.extensions || (type.extensions = []));\n          break;\n        case \"reserved\":\n          readRanges(type.reserved || (type.reserved = []), true);\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(type, \"optional\");\n          break;\n      }\n    });\n    parent.add(type);\n  }\n  function parseField(parent, rule, extend) {\n    var type = next();\n    if (type === \"group\") {\n      parseGroup(parent, rule);\n      return;\n    }\n    // Type names can consume multiple tokens, in multiple variants:\n    //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    // Keep reading tokens until we get a type name with no period at the end,\n    // and the next token does not start with a period.\n    while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n      type += next();\n    }\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    name = applyCase(name);\n    skip(\"=\");\n    var field = new Field(name, parseId(next()), type, rule, extend);\n    ifBlock(field, function parseField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseField_line() {\n      parseInlineOptions(field);\n    });\n    if (rule === \"proto3_optional\") {\n      // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n      var oneof = new OneOf(\"_\" + name);\n      field.setOption(\"proto3_optional\", true);\n      oneof.add(field);\n      parent.add(oneof);\n    } else {\n      parent.add(field);\n    }\n\n    // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n    // parsing proto2 descriptors without the option, where applicable. This must be done for\n    // all known packable types and anything that could be an enum (= is not a basic type).\n    if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption(\"packed\", false, /* ifNotSet */true);\n  }\n  function parseGroup(parent, rule) {\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    var fieldName = util.lcFirst(name);\n    if (name === fieldName) name = util.ucFirst(name);\n    skip(\"=\");\n    var id = parseId(next());\n    var type = new Type(name);\n    type.group = true;\n    var field = new Field(fieldName, id, name, rule);\n    field.filename = parse.filename;\n    ifBlock(type, function parseGroup_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(type, token);\n          skip(\";\");\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"message\":\n          parseType(type, token);\n          break;\n        case \"enum\":\n          parseEnum(type, token);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw illegal(token);\n        // there are no groups with proto3 semantics\n      }\n    });\n    parent.add(type).add(field);\n  }\n  function parseMapField(parent) {\n    skip(\"<\");\n    var keyType = next();\n\n    /* istanbul ignore if */\n    if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n    skip(\",\");\n    var valueType = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n    skip(\">\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    skip(\"=\");\n    var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n    ifBlock(field, function parseMapField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseMapField_line() {\n      parseInlineOptions(field);\n    });\n    parent.add(field);\n  }\n  function parseOneOf(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var oneof = new OneOf(applyCase(token));\n    ifBlock(oneof, function parseOneOf_block(token) {\n      if (token === \"option\") {\n        parseOption(oneof, token);\n        skip(\";\");\n      } else {\n        push(token);\n        parseField(oneof, \"optional\");\n      }\n    });\n    parent.add(oneof);\n  }\n  function parseEnum(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var enm = new Enum(token);\n    ifBlock(enm, function parseEnum_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(enm, token);\n          skip(\";\");\n          break;\n        case \"reserved\":\n          readRanges(enm.reserved || (enm.reserved = []), true);\n          break;\n        default:\n          parseEnumValue(enm, token);\n      }\n    });\n    parent.add(enm);\n  }\n  function parseEnumValue(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token)) throw illegal(token, \"name\");\n    skip(\"=\");\n    var value = parseId(next(), true),\n      dummy = {\n        options: undefined\n      };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseEnumValue_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseEnumValue_line() {\n      parseInlineOptions(dummy); // skip\n    });\n    parent.add(token, value, dummy.comment, dummy.options);\n  }\n  function parseOption(parent, token) {\n    var isCustom = skip(\"(\", true);\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token;\n    var option = name;\n    var propName;\n    if (isCustom) {\n      skip(\")\");\n      name = \"(\" + name + \")\";\n      option = name;\n      token = peek();\n      if (fqTypeRefRe.test(token)) {\n        propName = token.slice(1); //remove '.' before property name\n        name += token;\n        next();\n      }\n    }\n    skip(\"=\");\n    var optionValue = parseOptionValue(parent, name);\n    setParsedOption(parent, option, optionValue, propName);\n  }\n  function parseOptionValue(parent, name) {\n    // { a: \"foo\" b { c: \"bar\" } }\n    if (skip(\"{\", true)) {\n      var objectResult = {};\n      while (!skip(\"}\", true)) {\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next())) {\n          throw illegal(token, \"name\");\n        }\n        if (token === null) {\n          throw illegal(token, \"end of input\");\n        }\n        var value;\n        var propName = token;\n        skip(\":\", true);\n        if (peek() === \"{\") value = parseOptionValue(parent, name + \".\" + token);else if (peek() === \"[\") {\n          // option (my_option) = {\n          //     repeated_value: [ \"foo\", \"bar\" ]\n          // };\n          value = [];\n          var lastValue;\n          if (skip(\"[\", true)) {\n            do {\n              lastValue = readValue(true);\n              value.push(lastValue);\n            } while (skip(\",\", true));\n            skip(\"]\");\n            if (typeof lastValue !== \"undefined\") {\n              setOption(parent, name + \".\" + token, lastValue);\n            }\n          }\n        } else {\n          value = readValue(true);\n          setOption(parent, name + \".\" + token, value);\n        }\n        var prevValue = objectResult[propName];\n        if (prevValue) value = [].concat(prevValue).concat(value);\n        objectResult[propName] = value;\n\n        // Semicolons and commas can be optional\n        skip(\",\", true);\n        skip(\";\", true);\n      }\n      return objectResult;\n    }\n    var simpleValue = readValue(true);\n    setOption(parent, name, simpleValue);\n    return simpleValue;\n    // Does not enforce a delimiter to be universal\n  }\n  function setOption(parent, name, value) {\n    if (parent.setOption) parent.setOption(name, value);\n  }\n  function setParsedOption(parent, name, value, propName) {\n    if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n  }\n  function parseInlineOptions(parent) {\n    if (skip(\"[\", true)) {\n      do {\n        parseOption(parent, \"option\");\n      } while (skip(\",\", true));\n      skip(\"]\");\n    }\n    return parent;\n  }\n  function parseService(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n    var service = new Service(token);\n    ifBlock(service, function parseService_block(token) {\n      if (parseCommon(service, token)) return;\n\n      /* istanbul ignore else */\n      if (token === \"rpc\") parseMethod(service, token);else throw illegal(token);\n    });\n    parent.add(service);\n  }\n  function parseMethod(parent, token) {\n    // Get the comment of the preceding line now (if one exists) in case the\n    // method is defined across multiple lines.\n    var commentText = cmnt();\n    var type = token;\n\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token,\n      requestType,\n      requestStream,\n      responseType,\n      responseStream;\n    skip(\"(\");\n    if (skip(\"stream\", true)) requestStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    requestType = token;\n    skip(\")\");\n    skip(\"returns\");\n    skip(\"(\");\n    if (skip(\"stream\", true)) responseStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    responseType = token;\n    skip(\")\");\n    var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n    method.comment = commentText;\n    ifBlock(method, function parseMethod_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(method, token);\n        skip(\";\");\n      } else throw illegal(token);\n    });\n    parent.add(method);\n  }\n  function parseExtension(parent, token) {\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n    var reference = token;\n    ifBlock(null, function parseExtension_block(token) {\n      switch (token) {\n        case \"required\":\n        case \"repeated\":\n          parseField(parent, token, reference);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(parent, \"proto3_optional\", reference);\n          } else {\n            parseField(parent, \"optional\", reference);\n          }\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(parent, \"optional\", reference);\n          break;\n      }\n    });\n  }\n  var token;\n  while ((token = next()) !== null) {\n    switch (token) {\n      case \"package\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parsePackage();\n        break;\n      case \"import\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseImport();\n        break;\n      case \"syntax\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseSyntax();\n        break;\n      case \"option\":\n        parseOption(ptr, token);\n        skip(\";\");\n        break;\n      default:\n        /* istanbul ignore else */\n        if (parseCommon(ptr, token)) {\n          head = false;\n          continue;\n        }\n\n        /* istanbul ignore next */\n        throw illegal(token);\n    }\n  }\n  parse.filename = null;\n  return {\n    \"package\": pkg,\n    \"imports\": imports,\n    weakImports: weakImports,\n    syntax: syntax,\n    root: root\n  };\n}\n\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */","map":{"version":3,"names":["module","exports","parse","filename","defaults","keepCase","tokenize","require","Root","Type","Field","MapField","OneOf","Enum","Service","Method","types","util","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","source","root","options","preferTrailingComment","tn","alternateCommentMode","next","push","peek","skip","cmnt","head","pkg","imports","weakImports","syntax","isProto3","ptr","applyCase","name","camelCase","illegal","token","insideTryCatch","Error","line","readString","values","join","readValue","acceptTypeRef","parseNumber","e","test","readRanges","target","acceptStrings","start","parseId","dummy","undefined","setOption","value","ifBlock","parseRange_block","parseOption","parseRange_line","parseInlineOptions","sign","charAt","substring","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","define","parseImport","whichImports","parseSyntax","parseCommon","parent","parseType","parseEnum","parseService","parseExtension","obj","fnIf","fnElse","trailingLine","comment","type","parseType_block","parseMapField","parseField","parseOneOf","extensions","reserved","add","rule","extend","parseGroup","endsWith","startsWith","field","parseField_block","parseField_line","oneof","repeated","packed","basic","fieldName","lcFirst","ucFirst","id","group","parseGroup_block","keyType","mapKey","valueType","parseMapField_block","parseMapField_line","parseOneOf_block","enm","parseEnum_block","parseEnumValue","parseEnumValue_block","parseEnumValue_line","isCustom","option","propName","slice","optionValue","parseOptionValue","setParsedOption","objectResult","lastValue","prevValue","concat","simpleValue","service","parseService_block","parseMethod","commentText","requestType","requestStream","responseType","responseStream","method","parseMethod_block","reference","parseExtension_block"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/protobufjs/src/parse.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(\"./tokenize\"),\r\n    Root      = require(\"./root\"),\r\n    Type      = require(\"./type\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Enum      = require(\"./enum\"),\r\n    Service   = require(\"./service\"),\r\n    Method    = require(\"./method\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var preferTrailingComment = options.preferTrailingComment || false;\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        var dummy = {options: undefined};\r\n        dummy.setOption = function(name, value) {\r\n          if (this.options === undefined) this.options = {};\r\n          this.options[name] = value;\r\n        };\r\n        ifBlock(\r\n            dummy,\r\n            function parseRange_block(token) {\r\n              /* istanbul ignore else */\r\n              if (token === \"option\") {\r\n                parseOption(dummy, token);  // skip\r\n                skip(\";\");\r\n              } else\r\n                throw illegal(token);\r\n            },\r\n            function parseRange_line() {\r\n              parseInlineOptions(dummy);  // skip\r\n            });\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-next-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            if(typeof obj.comment !== \"string\") {\r\n              obj.comment = cmnt(); // try block-type comment\r\n            }\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\r\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(type, \"proto3_optional\");\r\n                    } else {\r\n                        parseField(type, \"optional\");\r\n                    }\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        // Type names can consume multiple tokens, in multiple variants:\r\n        //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\r\n        //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\r\n        //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\r\n        //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\r\n        // Keep reading tokens until we get a type name with no period at the end,\r\n        // and the next token does not start with a period.\r\n        while (type.endsWith(\".\") || peek().startsWith(\".\")) {\r\n            type += next();\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n\r\n        if (rule === \"proto3_optional\") {\r\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\r\n            var oneof = new OneOf(\"_\" + name);\r\n            field.setOption(\"proto3_optional\", true);\r\n            oneof.add(field);\r\n            parent.add(oneof);\r\n        } else {\r\n            parent.add(field);\r\n        }\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(type, \"proto3_optional\");\r\n                    } else {\r\n                        parseField(type, \"optional\");\r\n                    }\r\n                    break;\r\n\r\n                case \"message\":\r\n                    parseType(type, token);\r\n                    break;\r\n\r\n                case \"enum\":\r\n                    parseEnum(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {\r\n                options: undefined\r\n            };\r\n        dummy.setOption = function(name, value) {\r\n            if (this.options === undefined)\r\n                this.options = {};\r\n            this.options[name] = value;\r\n        };\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment, dummy.options);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        var option = name;\r\n        var propName;\r\n\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            option = name;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                propName = token.slice(1); //remove '.' before property name\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        var optionValue = parseOptionValue(parent, name);\r\n        setParsedOption(parent, option, optionValue, propName);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        // { a: \"foo\" b { c: \"bar\" } }\r\n        if (skip(\"{\", true)) {\r\n            var objectResult = {};\r\n\r\n            while (!skip(\"}\", true)) {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next())) {\r\n                    throw illegal(token, \"name\");\r\n                }\r\n                if (token === null) {\r\n                  throw illegal(token, \"end of input\");\r\n                }\r\n\r\n                var value;\r\n                var propName = token;\r\n\r\n                skip(\":\", true);\r\n\r\n                if (peek() === \"{\")\r\n                    value = parseOptionValue(parent, name + \".\" + token);\r\n                else if (peek() === \"[\") {\r\n                    // option (my_option) = {\r\n                    //     repeated_value: [ \"foo\", \"bar\" ]\r\n                    // };\r\n                    value = [];\r\n                    var lastValue;\r\n                    if (skip(\"[\", true)) {\r\n                        do {\r\n                            lastValue = readValue(true);\r\n                            value.push(lastValue);\r\n                        } while (skip(\",\", true));\r\n                        skip(\"]\");\r\n                        if (typeof lastValue !== \"undefined\") {\r\n                            setOption(parent, name + \".\" + token, lastValue);\r\n                        }\r\n                    }\r\n                } else {\r\n                    value = readValue(true);\r\n                    setOption(parent, name + \".\" + token, value);\r\n                }\r\n\r\n                var prevValue = objectResult[propName];\r\n\r\n                if (prevValue)\r\n                    value = [].concat(prevValue).concat(value);\r\n\r\n                objectResult[propName] = value;\r\n\r\n                // Semicolons and commas can be optional\r\n                skip(\",\", true);\r\n                skip(\";\", true);\r\n            }\r\n\r\n            return objectResult;\r\n        }\r\n\r\n        var simpleValue = readValue(true);\r\n        setOption(parent, name, simpleValue);\r\n        return simpleValue;\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function setParsedOption(parent, name, value, propName) {\r\n        if (parent.setParsedOption)\r\n            parent.setParsedOption(name, value, propName);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        // Get the comment of the preceding line now (if one exists) in case the\r\n        // method is defined across multiple lines.\r\n        var commentText = cmnt();\r\n\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        method.comment = commentText;\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(parent, \"proto3_optional\", reference);\r\n                    } else {\r\n                        parseField(parent, \"optional\", reference);\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */\nconst STS_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The maximum number of access boundary rules a Credential Access Boundary\n * can contain.\n */\nexports.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * Defines a set of Google credentials that are downscoped from an existing set\n * of Google OAuth2 credentials. This is useful to restrict the Identity and\n * Access Management (IAM) permissions that a short-lived credential can use.\n * The common pattern of usage is to have a token broker with elevated access\n * generate these downscoped credentials from higher access source credentials\n * and pass the downscoped short-lived access tokens to a token consumer via\n * some secure authenticated channel for limited access to Google Cloud Storage\n * resources.\n */\nclass DownscopedClient extends authclient_1.AuthClient {\n  /**\n   * Instantiates a downscoped client object using the provided source\n   * AuthClient and credential access boundary rules.\n   * To downscope permissions of a source AuthClient, a Credential Access\n   * Boundary that specifies which resources the new credential can access, as\n   * well as an upper bound on the permissions that are available on each\n   * resource, has to be defined. A downscoped client can then be instantiated\n   * using the source AuthClient and the Credential Access Boundary.\n   * @param authClient The source AuthClient to be downscoped based on the\n   *   provided Credential Access Boundary rules.\n   * @param credentialAccessBoundary The Credential Access Boundary which\n   *   contains a list of access boundary rules. Each rule contains information\n   *   on the resource that the rule applies to, the upper bound of the\n   *   permissions that are available on that resource and an optional\n   *   condition to further restrict permissions.\n   * @param additionalOptions **DEPRECATED, set this in the provided `authClient`.**\n   *   Optional additional behavior customization options.\n   * @param quotaProjectId **DEPRECATED, set this in the provided `authClient`.**\n   *   Optional quota project id for setting up in the x-goog-user-project header.\n   */\n  constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {\n    super({\n      ...additionalOptions,\n      quotaProjectId\n    });\n    this.authClient = authClient;\n    this.credentialAccessBoundary = credentialAccessBoundary;\n    // Check 1-10 Access Boundary Rules are defined within Credential Access\n    // Boundary.\n    if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {\n      throw new Error('At least one access boundary rule needs to be defined.');\n    } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports.MAX_ACCESS_BOUNDARY_RULES_COUNT) {\n      throw new Error('The provided access boundary has more than ' + `${exports.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);\n    }\n    // Check at least one permission should be defined in each Access Boundary\n    // Rule.\n    for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules) {\n      if (rule.availablePermissions.length === 0) {\n        throw new Error('At least one permission should be defined in access boundary rules.');\n      }\n    }\n    this.stsCredential = new sts.StsCredentials(`https://sts.${this.universeDomain}/v1/token`);\n    this.cachedDownscopedAccessToken = null;\n  }\n  /**\n   * Provides a mechanism to inject Downscoped access tokens directly.\n   * The expiry_date field is required to facilitate determination of the token\n   * expiration which would make it easier for the token consumer to handle.\n   * @param credentials The Credentials object to set on the current client.\n   */\n  setCredentials(credentials) {\n    if (!credentials.expiry_date) {\n      throw new Error('The access token expiry_date field is missing in the provided ' + 'credentials.');\n    }\n    super.setCredentials(credentials);\n    this.cachedDownscopedAccessToken = credentials;\n  }\n  async getAccessToken() {\n    // If the cached access token is unavailable or expired, force refresh.\n    // The Downscoped access token will be returned in\n    // DownscopedAccessTokenResponse format.\n    if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    }\n    // Return Downscoped access token in DownscopedAccessTokenResponse format.\n    return {\n      token: this.cachedDownscopedAccessToken.access_token,\n      expirationTime: this.cachedDownscopedAccessToken.expiry_date,\n      res: this.cachedDownscopedAccessToken.res\n    };\n  }\n  /**\n   * The main authentication interface. It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * The result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   */\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure\n   * @return A promise that resolves with the successful response.\n   */\n  async requestAsync(opts, reAuthRetried = false) {\n    let response;\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * GCP access tokens are retrieved from authclient object/source credential.\n   * Then GCP access tokens are exchanged for downscoped access tokens via the\n   * token exchange endpoint.\n   * @return A promise that resolves with the fresh downscoped access token.\n   */\n  async refreshAccessTokenAsync() {\n    var _a;\n    // Retrieve GCP access token from source credential.\n    const subjectToken = (await this.authClient.getAccessToken()).token;\n    // Construct the STS credentials options.\n    const stsCredentialsOptions = {\n      grantType: STS_GRANT_TYPE,\n      requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n      subjectToken: subjectToken,\n      subjectTokenType: STS_SUBJECT_TOKEN_TYPE\n    };\n    // Exchange the source AuthClient access token for a Downscoped access\n    // token.\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n    /**\n     * The STS endpoint will only return the expiration time for the downscoped\n     * access token if the original access token represents a service account.\n     * The downscoped token's expiration time will always match the source\n     * credential expiration. When no expires_in is returned, we can copy the\n     * source credential's expiration time.\n     */\n    const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;\n    const expiryDate = stsResponse.expires_in ? new Date().getTime() + stsResponse.expires_in * 1000 : sourceCredExpireDate;\n    // Save response in cached access token.\n    this.cachedDownscopedAccessToken = {\n      access_token: stsResponse.access_token,\n      expiry_date: expiryDate,\n      res: stsResponse.res\n    };\n    // Save credentials.\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n    delete this.credentials.res;\n    // Trigger tokens event to notify external listeners.\n    this.emit('tokens', {\n      refresh_token: null,\n      expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n      access_token: this.cachedDownscopedAccessToken.access_token,\n      token_type: 'Bearer',\n      id_token: null\n    });\n    // Return the cached access token.\n    return this.cachedDownscopedAccessToken;\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param downscopedAccessToken The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(downscopedAccessToken) {\n    const now = new Date().getTime();\n    return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n}\nexports.DownscopedClient = DownscopedClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","DownscopedClient","EXPIRATION_TIME_OFFSET","MAX_ACCESS_BOUNDARY_RULES_COUNT","stream","require","authclient_1","sts","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","STS_SUBJECT_TOKEN_TYPE","AuthClient","constructor","authClient","credentialAccessBoundary","additionalOptions","quotaProjectId","accessBoundary","accessBoundaryRules","length","Error","rule","availablePermissions","stsCredential","StsCredentials","universeDomain","cachedDownscopedAccessToken","setCredentials","credentials","expiry_date","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","expirationTime","res","getRequestHeaders","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","request","opts","callback","requestAsync","then","r","e","response","reAuthRetried","requestHeaders","transporter","statusCode","status","isReadableStream","config","data","Readable","isAuthErr","forceRefreshOnFailure","_a","subjectToken","stsCredentialsOptions","grantType","requestedTokenType","subjectTokenType","stsResponse","exchangeToken","undefined","sourceCredExpireDate","expiryDate","expires_in","Date","getTime","assign","emit","refresh_token","token_type","id_token","downscopedAccessToken","now","eagerRefreshThresholdMillis"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/downscopedclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */\nconst STS_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The maximum number of access boundary rules a Credential Access Boundary\n * can contain.\n */\nexports.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * Defines a set of Google credentials that are downscoped from an existing set\n * of Google OAuth2 credentials. This is useful to restrict the Identity and\n * Access Management (IAM) permissions that a short-lived credential can use.\n * The common pattern of usage is to have a token broker with elevated access\n * generate these downscoped credentials from higher access source credentials\n * and pass the downscoped short-lived access tokens to a token consumer via\n * some secure authenticated channel for limited access to Google Cloud Storage\n * resources.\n */\nclass DownscopedClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates a downscoped client object using the provided source\n     * AuthClient and credential access boundary rules.\n     * To downscope permissions of a source AuthClient, a Credential Access\n     * Boundary that specifies which resources the new credential can access, as\n     * well as an upper bound on the permissions that are available on each\n     * resource, has to be defined. A downscoped client can then be instantiated\n     * using the source AuthClient and the Credential Access Boundary.\n     * @param authClient The source AuthClient to be downscoped based on the\n     *   provided Credential Access Boundary rules.\n     * @param credentialAccessBoundary The Credential Access Boundary which\n     *   contains a list of access boundary rules. Each rule contains information\n     *   on the resource that the rule applies to, the upper bound of the\n     *   permissions that are available on that resource and an optional\n     *   condition to further restrict permissions.\n     * @param additionalOptions **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional additional behavior customization options.\n     * @param quotaProjectId **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional quota project id for setting up in the x-goog-user-project header.\n     */\n    constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {\n        super({ ...additionalOptions, quotaProjectId });\n        this.authClient = authClient;\n        this.credentialAccessBoundary = credentialAccessBoundary;\n        // Check 1-10 Access Boundary Rules are defined within Credential Access\n        // Boundary.\n        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {\n            throw new Error('At least one access boundary rule needs to be defined.');\n        }\n        else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length >\n            exports.MAX_ACCESS_BOUNDARY_RULES_COUNT) {\n            throw new Error('The provided access boundary has more than ' +\n                `${exports.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);\n        }\n        // Check at least one permission should be defined in each Access Boundary\n        // Rule.\n        for (const rule of credentialAccessBoundary.accessBoundary\n            .accessBoundaryRules) {\n            if (rule.availablePermissions.length === 0) {\n                throw new Error('At least one permission should be defined in access boundary rules.');\n            }\n        }\n        this.stsCredential = new sts.StsCredentials(`https://sts.${this.universeDomain}/v1/token`);\n        this.cachedDownscopedAccessToken = null;\n    }\n    /**\n     * Provides a mechanism to inject Downscoped access tokens directly.\n     * The expiry_date field is required to facilitate determination of the token\n     * expiration which would make it easier for the token consumer to handle.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        if (!credentials.expiry_date) {\n            throw new Error('The access token expiry_date field is missing in the provided ' +\n                'credentials.');\n        }\n        super.setCredentials(credentials);\n        this.cachedDownscopedAccessToken = credentials;\n    }\n    async getAccessToken() {\n        // If the cached access token is unavailable or expired, force refresh.\n        // The Downscoped access token will be returned in\n        // DownscopedAccessTokenResponse format.\n        if (!this.cachedDownscopedAccessToken ||\n            this.isExpired(this.cachedDownscopedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return Downscoped access token in DownscopedAccessTokenResponse format.\n        return {\n            token: this.cachedDownscopedAccessToken.access_token,\n            expirationTime: this.cachedDownscopedAccessToken.expiry_date,\n            res: this.cachedDownscopedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * GCP access tokens are retrieved from authclient object/source credential.\n     * Then GCP access tokens are exchanged for downscoped access tokens via the\n     * token exchange endpoint.\n     * @return A promise that resolves with the fresh downscoped access token.\n     */\n    async refreshAccessTokenAsync() {\n        var _a;\n        // Retrieve GCP access token from source credential.\n        const subjectToken = (await this.authClient.getAccessToken()).token;\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken: subjectToken,\n            subjectTokenType: STS_SUBJECT_TOKEN_TYPE,\n        };\n        // Exchange the source AuthClient access token for a Downscoped access\n        // token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n        /**\n         * The STS endpoint will only return the expiration time for the downscoped\n         * access token if the original access token represents a service account.\n         * The downscoped token's expiration time will always match the source\n         * credential expiration. When no expires_in is returned, we can copy the\n         * source credential's expiration time.\n         */\n        const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;\n        const expiryDate = stsResponse.expires_in\n            ? new Date().getTime() + stsResponse.expires_in * 1000\n            : sourceCredExpireDate;\n        // Save response in cached access token.\n        this.cachedDownscopedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: expiryDate,\n            res: stsResponse.res,\n        };\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n            access_token: this.cachedDownscopedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedDownscopedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param downscopedAccessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(downscopedAccessToken) {\n        const now = new Date().getTime();\n        return downscopedAccessToken.expiry_date\n            ? now >=\n                downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.DownscopedClient = DownscopedClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = require(\"./enum\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\n\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n  /**\r\n   * Field rule, if any.\r\n   * @type {string|undefined}\r\n   */\n  if (rule === \"proto3_optional\") {\n    rule = \"optional\";\n  }\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\r\n   * Field type.\r\n   * @type {string}\r\n   */\n  this.type = type; // toJSON\n\n  /**\r\n   * Unique field id.\r\n   * @type {number}\r\n   */\n  this.id = id; // toJSON, marker\n\n  /**\r\n   * Extended type if different from parent.\r\n   * @type {string|undefined}\r\n   */\n  this.extend = extend || undefined; // toJSON\n\n  /**\r\n   * Whether this field is required.\r\n   * @type {boolean}\r\n   */\n  this.required = rule === \"required\";\n\n  /**\r\n   * Whether this field is optional.\r\n   * @type {boolean}\r\n   */\n  this.optional = !this.required;\n\n  /**\r\n   * Whether this field is repeated.\r\n   * @type {boolean}\r\n   */\n  this.repeated = rule === \"repeated\";\n\n  /**\r\n   * Whether this field is a map or not.\r\n   * @type {boolean}\r\n   */\n  this.map = false;\n\n  /**\r\n   * Message this field belongs to.\r\n   * @type {Type|null}\r\n   */\n  this.message = null;\n\n  /**\r\n   * OneOf this field belongs to, if any,\r\n   * @type {OneOf|null}\r\n   */\n  this.partOf = null;\n\n  /**\r\n   * The field type's default value.\r\n   * @type {*}\r\n   */\n  this.typeDefault = null;\n\n  /**\r\n   * The field's default value on prototypes.\r\n   * @type {*}\r\n   */\n  this.defaultValue = null;\n\n  /**\r\n   * Whether this field's value should be treated as a long.\r\n   * @type {boolean}\r\n   */\n  this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n  /**\r\n   * Whether this field's value is a buffer.\r\n   * @type {boolean}\r\n   */\n  this.bytes = type === \"bytes\";\n\n  /**\r\n   * Resolved type if not a basic type.\r\n   * @type {Type|Enum|null}\r\n   */\n  this.resolvedType = null;\n\n  /**\r\n   * Sister-field within the extended type if a declaring extension field.\r\n   * @type {Field|null}\r\n   */\n  this.extensionField = null;\n\n  /**\r\n   * Sister-field within the declaring namespace if an extended field.\r\n   * @type {Field|null}\r\n   */\n  this.declaringField = null;\n\n  /**\r\n   * Internally remembers whether this field is packed.\r\n   * @type {boolean|null}\r\n   * @private\r\n   */\n  this._packed = null;\n\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n  this.comment = comment;\n}\n\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n\n/**\r\n * @override\r\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\")\n    // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\n\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else\n      // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } else if (this.options && this.options.proto3_optional) {\n    // proto3 scalar value marked optional; should default to null\n    this.typeDefault = null;\n  }\n\n  // use explicitly set default value if present\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  }\n\n  // remove unnecessary options\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  }\n\n  // convert to internal data type if necesssary\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n    /* istanbul ignore else */\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  }\n\n  // take special care of maps and repeated fields\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n  // ensure proper value on prototype\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n  // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n  Type = Type_;\n};","map":{"version":3,"names":["module","exports","Field","ReflectionObject","require","prototype","Object","create","constructor","className","Enum","types","util","Type","ruleRe","fromJSON","name","json","id","type","rule","extend","options","comment","isObject","undefined","call","isInteger","TypeError","isString","test","toString","toLowerCase","required","optional","repeated","map","message","partOf","typeDefault","defaultValue","long","Long","bytes","resolvedType","extensionField","declaringField","_packed","defineProperty","get","getOption","setOption","value","ifNotSet","toJSON","toJSONOptions","keepComments","Boolean","toObject","resolve","resolved","defaults","parent","lookupTypeOrEnum","values","keys","proto3_optional","packed","length","fromNumber","charAt","freeze","buf","base64","decode","newBuffer","utf8","write","emptyObject","emptyArray","ctor","d","decorateField","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldDecorator","fieldName","add","_configure","configure","Type_"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/protobufjs/src/field.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    if (rule === \"proto3_optional\") {\r\n        rule = \"optional\";\r\n    }\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    } else if (this.options && this.options.proto3_optional) {\r\n        // proto3 scalar value marked optional; should default to null\r\n        this.typeDefault = null;\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DocumentChange = void 0;\n/**\n * A DocumentChange represents a change to the documents matching a query.\n * It contains the document affected and the type of change that occurred.\n *\n * @class DocumentChange\n */\nclass DocumentChange {\n  /**\n   * @private\n   *\n   * @param {string} type 'added' | 'removed' | 'modified'.\n   * @param {QueryDocumentSnapshot} document The document.\n   * @param {number} oldIndex The index in the documents array prior to this\n   * change.\n   * @param {number} newIndex The index in the documents array after this\n   * change.\n   */\n  constructor(type, document, oldIndex, newIndex) {\n    this._type = type;\n    this._document = document;\n    this._oldIndex = oldIndex;\n    this._newIndex = newIndex;\n  }\n  /**\n   * The type of change ('added', 'modified', or 'removed').\n   *\n   * @type {string}\n   * @name DocumentChange#type\n   * @readonly\n   *\n   * @example\n   * ```\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   * let docsArray = [];\n   *\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\n   *   for (let change of querySnapshot.docChanges) {\n   *     console.log(`Type of change is ${change.type}`);\n   *   }\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   * ```\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * The document affected by this change.\n   *\n   * @type {QueryDocumentSnapshot}\n   * @name DocumentChange#doc\n   * @readonly\n   *\n   * @example\n   * ```\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\n   *   for (let change of querySnapshot.docChanges) {\n   *     console.log(change.doc.data());\n   *   }\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   * ```\n   */\n  get doc() {\n    return this._document;\n  }\n  /**\n   * The index of the changed document in the result set immediately prior to\n   * this DocumentChange (i.e. supposing that all prior DocumentChange objects\n   * have been applied). Is -1 for 'added' events.\n   *\n   * @type {number}\n   * @name DocumentChange#oldIndex\n   * @readonly\n   *\n   * @example\n   * ```\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   * let docsArray = [];\n   *\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\n   *   for (let change of querySnapshot.docChanges) {\n   *     if (change.oldIndex !== -1) {\n   *       docsArray.splice(change.oldIndex, 1);\n   *     }\n   *     if (change.newIndex !== -1) {\n   *       docsArray.splice(change.newIndex, 0, change.doc);\n   *     }\n   *   }\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   * ```\n   */\n  get oldIndex() {\n    return this._oldIndex;\n  }\n  /**\n   * The index of the changed document in the result set immediately after\n   * this DocumentChange (i.e. supposing that all prior DocumentChange\n   * objects and the current DocumentChange object have been applied).\n   * Is -1 for 'removed' events.\n   *\n   * @type {number}\n   * @name DocumentChange#newIndex\n   * @readonly\n   *\n   * @example\n   * ```\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   * let docsArray = [];\n   *\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\n   *   for (let change of querySnapshot.docChanges) {\n   *     if (change.oldIndex !== -1) {\n   *       docsArray.splice(change.oldIndex, 1);\n   *     }\n   *     if (change.newIndex !== -1) {\n   *       docsArray.splice(change.newIndex, 0, change.doc);\n   *     }\n   *   }\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   * ```\n   */\n  get newIndex() {\n    return this._newIndex;\n  }\n  /**\n   * Returns true if the data in this `DocumentChange` is equal to the provided\n   * value.\n   *\n   * @param {*} other The value to compare against.\n   * @return true if this `DocumentChange` is equal to the provided value.\n   */\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n    return other instanceof DocumentChange && this._type === other._type && this._oldIndex === other._oldIndex && this._newIndex === other._newIndex && this._document.isEqual(other._document);\n  }\n}\nexports.DocumentChange = DocumentChange;","map":{"version":3,"names":["Object","defineProperty","exports","value","DocumentChange","constructor","type","document","oldIndex","newIndex","_type","_document","_oldIndex","_newIndex","doc","isEqual","other"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/document-change.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentChange = void 0;\n/**\n * A DocumentChange represents a change to the documents matching a query.\n * It contains the document affected and the type of change that occurred.\n *\n * @class DocumentChange\n */\nclass DocumentChange {\n    /**\n     * @private\n     *\n     * @param {string} type 'added' | 'removed' | 'modified'.\n     * @param {QueryDocumentSnapshot} document The document.\n     * @param {number} oldIndex The index in the documents array prior to this\n     * change.\n     * @param {number} newIndex The index in the documents array after this\n     * change.\n     */\n    constructor(type, document, oldIndex, newIndex) {\n        this._type = type;\n        this._document = document;\n        this._oldIndex = oldIndex;\n        this._newIndex = newIndex;\n    }\n    /**\n     * The type of change ('added', 'modified', or 'removed').\n     *\n     * @type {string}\n     * @name DocumentChange#type\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(`Type of change is ${change.type}`);\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * The document affected by this change.\n     *\n     * @type {QueryDocumentSnapshot}\n     * @name DocumentChange#doc\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(change.doc.data());\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get doc() {\n        return this._document;\n    }\n    /**\n     * The index of the changed document in the result set immediately prior to\n     * this DocumentChange (i.e. supposing that all prior DocumentChange objects\n     * have been applied). Is -1 for 'added' events.\n     *\n     * @type {number}\n     * @name DocumentChange#oldIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get oldIndex() {\n        return this._oldIndex;\n    }\n    /**\n     * The index of the changed document in the result set immediately after\n     * this DocumentChange (i.e. supposing that all prior DocumentChange\n     * objects and the current DocumentChange object have been applied).\n     * Is -1 for 'removed' events.\n     *\n     * @type {number}\n     * @name DocumentChange#newIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get newIndex() {\n        return this._newIndex;\n    }\n    /**\n     * Returns true if the data in this `DocumentChange` is equal to the provided\n     * value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `DocumentChange` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof DocumentChange &&\n            this._type === other._type &&\n            this._oldIndex === other._oldIndex &&\n            this._newIndex === other._newIndex &&\n            this._document.isEqual(other._document));\n    }\n}\nexports.DocumentChange = DocumentChange;\n//# sourceMappingURL=document-change.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,CAAC;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IAC5C,IAAI,CAACC,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,SAAS,GAAGJ,QAAQ;IACzB,IAAI,CAACK,SAAS,GAAGJ,QAAQ;IACzB,IAAI,CAACK,SAAS,GAAGJ,QAAQ;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIH,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACI,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAII,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAACH,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIH,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACI,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIH,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACI,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,OAAOA,CAACC,KAAK,EAAE;IACX,IAAI,IAAI,KAAKA,KAAK,EAAE;MAChB,OAAO,IAAI;IACf;IACA,OAAQA,KAAK,YAAYZ,cAAc,IACnC,IAAI,CAACM,KAAK,KAAKM,KAAK,CAACN,KAAK,IAC1B,IAAI,CAACE,SAAS,KAAKI,KAAK,CAACJ,SAAS,IAClC,IAAI,CAACC,SAAS,KAAKG,KAAK,CAACH,SAAS,IAClC,IAAI,CAACF,SAAS,CAACI,OAAO,CAACC,KAAK,CAACL,SAAS,CAAC;EAC/C;AACJ;AACAT,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
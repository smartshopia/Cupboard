{"ast":null,"code":"import { au as debugAssert, av as _isIOS, aw as _isAndroid, ax as _fail, ay as _getRedirectUrl, az as _getProjectConfig, aA as _isIOS7Or8, aB as _createError, aC as _assert, aD as AuthEventManager, aE as _getInstance, b as browserLocalPersistence, aF as _persistenceKeyName, a as browserSessionPersistence, aG as _getRedirectResult, aH as _overrideRedirectResult, aI as _clearRedirectOutcomes, aJ as _castAuth } from './index-54738136.js';\nexport { A as ActionCodeOperation, ai as ActionCodeURL, L as AuthCredential, I as AuthErrorCodes, aL as AuthImpl, aO as AuthPopup, M as EmailAuthCredential, V as EmailAuthProvider, W as FacebookAuthProvider, F as FactorId, aP as FetchProvider, Y as GithubAuthProvider, X as GoogleAuthProvider, N as OAuthCredential, Z as OAuthProvider, O as OperationType, Q as PhoneAuthCredential, P as PhoneAuthProvider, m as PhoneMultiFactorGenerator, p as ProviderId, R as RecaptchaVerifier, aQ as SAMLAuthCredential, _ as SAMLAuthProvider, S as SignInMethod, T as TotpMultiFactorGenerator, n as TotpSecret, $ as TwitterAuthProvider, aK as UserImpl, aC as _assert, aJ as _castAuth, ax as _fail, aN as _generateEventId, aM as _getClientVersion, aE as _getInstance, aG as _getRedirectResult, aH as _overrideRedirectResult, aF as _persistenceKeyName, a7 as applyActionCode, x as beforeAuthStateChanged, b as browserLocalPersistence, k as browserPopupRedirectResolver, a as browserSessionPersistence, a8 as checkActionCode, a6 as confirmPasswordReset, K as connectAuthEmulator, aa as createUserWithEmailAndPassword, G as debugErrorMap, E as deleteUser, af as fetchSignInMethodsForEmail, aq as getAdditionalUserInfo, o as getAuth, an as getIdToken, ao as getIdTokenResult, as as getMultiFactorResolver, j as getRedirectResult, U as inMemoryPersistence, i as indexedDBLocalPersistence, J as initializeAuth, t as initializeRecaptchaConfig, ad as isSignInWithEmailLink, a2 as linkWithCredential, l as linkWithPhoneNumber, d as linkWithPopup, g as linkWithRedirect, at as multiFactor, y as onAuthStateChanged, w as onIdTokenChanged, aj as parseActionCodeURL, H as prodErrorMap, a3 as reauthenticateWithCredential, r as reauthenticateWithPhoneNumber, e as reauthenticateWithPopup, h as reauthenticateWithRedirect, ar as reload, D as revokeAccessToken, ag as sendEmailVerification, a5 as sendPasswordResetEmail, ac as sendSignInLinkToEmail, q as setPersistence, a0 as signInAnonymously, a1 as signInWithCredential, a4 as signInWithCustomToken, ab as signInWithEmailAndPassword, ae as signInWithEmailLink, s as signInWithPhoneNumber, c as signInWithPopup, f as signInWithRedirect, C as signOut, ap as unlink, B as updateCurrentUser, al as updateEmail, am as updatePassword, u as updatePhoneNumber, ak as updateProfile, z as useDeviceLanguage, v as validatePassword, ah as verifyBeforeUpdateEmail, a9 as verifyPasswordResetCode } from './index-54738136.js';\nimport { querystringDecode } from '@firebase/util';\nimport '@firebase/app';\nimport '@firebase/logger';\nimport 'tslib';\nimport '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _cordovaWindow() {\n  return window;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * How long to wait after the app comes back into focus before concluding that\r\n * the user closed the sign in tab.\r\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n/**\r\n * Generates the URL for the OAuth handler.\r\n */\nasync function _generateHandlerUrl(auth, event, provider) {\n  var _a;\n  // Get the cordova plugins\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n  const additionalParams = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  }\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);\n}\n/**\r\n * Validates that this app is valid for this project configuration\r\n */\nasync function _validateOrigin(auth) {\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n  const request = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  }\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\nfunction _performRedirect(handlerUrl) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(handlerUrl, _isIOS7Or8() ? '_blank' : '_system', 'location=yes');\n      }\n      resolve(iabRef);\n    });\n  });\n}\n/**\r\n * This function waits for app activity to be seen before resolving. It does\r\n * this by attaching listeners to various dom events. Once the app is determined\r\n * to be visible, this promise resolves. AFTER that resolution, the listeners\r\n * are detached and any browser tabs left open will be closed.\r\n */\nasync function _waitForAppResume(auth, eventListener, iabRef) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n  let cleanup = () => {};\n  try {\n    await new Promise((resolve, reject) => {\n      let onCloseTimer = null;\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen() {\n        var _a;\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === 'function') {\n          iabRef.close();\n        }\n      }\n      function resumed() {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, \"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n      function visibilityChanged() {\n        if ((document === null || document === void 0 ? void 0 : document.visibilityState) === 'visible') {\n          resumed();\n        }\n      }\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener('visibilitychange', visibilityChanged, false);\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n/**\r\n * Checks the configuration of the Cordova environment. This has no side effect\r\n * if the configuration is correct; otherwise it throws an error with the\r\n * missing plugin.\r\n */\nfunction _checkCordovaConfiguration(auth) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === 'function', auth, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, {\n    missingPlugin: 'cordova-universal-links-plugin-fix'\n  });\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== 'undefined', auth, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, {\n    missingPlugin: 'cordova-plugin-buildInfo'\n  });\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === 'function', auth, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, {\n    missingPlugin: 'cordova-plugin-browsertab'\n  });\n  _assert(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === 'function', auth, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, {\n    missingPlugin: 'cordova-plugin-browsertab'\n  });\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === 'function', auth, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, {\n    missingPlugin: 'cordova-plugin-inappbrowser'\n  });\n}\n/**\r\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\r\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\r\n * protocol).\r\n */\nasync function computeSha256(sessionId) {\n  const bytes = stringToArrayBuffer(sessionId);\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\nfunction stringToArrayBuffer(str) {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(/[0-9a-zA-Z]+/.test(str), 'Can only convert alpha-numeric strings');\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SESSION_ID_LENGTH = 20;\n/** Custom AuthEventManager that adds passive listeners to events */\nclass CordovaAuthEventManager extends AuthEventManager {\n  constructor() {\n    super(...arguments);\n    this.passiveListeners = new Set();\n    this.initPromise = new Promise(resolve => {\n      this.resolveInialized = resolve;\n    });\n  }\n  addPassiveListener(cb) {\n    this.passiveListeners.add(cb);\n  }\n  removePassiveListener(cb) {\n    this.passiveListeners.delete(cb);\n  }\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect() {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n  /** Override the onEvent method */\n  onEvent(event) {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n  async initialized() {\n    await this.initPromise;\n  }\n}\n/**\r\n * Generates a (partial) {@link AuthEvent}.\r\n */\nfunction _generateNewEvent(auth, type, eventId = null) {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, \"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */)\n  };\n}\nfunction _savePartialEvent(auth, event) {\n  return storage()._set(persistenceKey(auth), event);\n}\nasync function _getAndRemoveEvent(auth) {\n  const event = await storage()._get(persistenceKey(auth));\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\nfunction _eventFromPartialAndUrl(partialEvent, url) {\n  var _a, _b;\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError'] ? parseJsonOrNull(decodeURIComponent(params['firebaseError'])) : null;\n    const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject['code']) === null || _a === void 0 ? void 0 : _a.split('auth/')) === null || _b === void 0 ? void 0 : _b[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n  return null;\n}\nfunction generateSessionId() {\n  const chars = [];\n  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\nfunction storage() {\n  return _getInstance(browserLocalPersistence);\n}\nfunction persistenceKey(auth) {\n  return _persistenceKeyName(\"authEvent\" /* KeyName.AUTH_EVENT */, auth.config.apiKey, auth.name);\n}\nfunction parseJsonOrNull(json) {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n// Exported for testing\nfunction _getDeepLinkFromCallback(url) {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id'] ? decodeURIComponent(params['deep_link_id']) : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * Optimistically tries to get search params from a string, or else returns an\r\n * empty search params object.\r\n */\nfunction searchParamsOrEmpty(url) {\n  if (!(url === null || url === void 0 ? void 0 : url.includes('?'))) {\n    return {};\n  }\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?'));\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * How long to wait for the initial auth event before concluding no\r\n * redirect pending\r\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\nclass CordovaPopupRedirectResolver {\n  constructor() {\n    this._redirectPersistence = browserSessionPersistence;\n    this._shouldInitProactively = true; // This is lightweight for Cordova\n    this.eventManagers = new Map();\n    this.originValidationPromises = {};\n    this._completeRedirectFn = _getRedirectResult;\n    this._overrideRedirectResult = _overrideRedirectResult;\n  }\n  async _initialize(auth) {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n  _openPopup(auth) {\n    _fail(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n    await this._originValidation(auth);\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n  _isIframeWebStorageSupported(_auth, _cb) {\n    throw new Error('Method not implemented.');\n  }\n  _originValidation(auth) {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n    return this.originValidationPromises[key];\n  }\n  attachCallbackListeners(auth, manager) {\n    // Get the global plugins\n    const {\n      universalLinks,\n      handleOpenURL,\n      BuildInfo\n    } = _cordovaWindow();\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n    const universalLinksCb = async eventData => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent = null;\n      if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData['url'])) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (typeof universalLinks !== 'undefined' && typeof universalLinks.subscribe === 'function') {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({\n          url\n        });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\r\n * based applications.\r\n *\r\n * @public\r\n */\nconst cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;\nfunction generateNoEvent() {\n  return {\n    type: \"unknown\" /* AuthEventType.UNKNOWN */,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */)\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nfunction addFrameworkForLogging(auth, framework) {\n  _castAuth(auth)._logFramework(framework);\n}\nexport { addFrameworkForLogging, cordovaPopupRedirectResolver };","map":{"version":3,"names":["_cordovaWindow","window","REDIRECT_TIMEOUT_MS","_generateHandlerUrl","auth","event","provider","BuildInfo","debugAssert","sessionId","sessionDigest","computeSha256","additionalParams","_isIOS","packageName","_isAndroid","_fail","displayName","_getRedirectUrl","type","undefined","_a","eventId","_validateOrigin","request","iosBundleId","androidPackageName","_getProjectConfig","_performRedirect","handlerUrl","cordova","Promise","resolve","plugins","browsertab","isAvailable","browserTabIsAvailable","iabRef","openUrl","InAppBrowser","open","_isIOS7Or8","_waitForAppResume","eventListener","cleanup","reject","onCloseTimer","authEventSeen","closeBrowserTab","close","resumed","setTimeout","_createError","visibilityChanged","document","visibilityState","addPassiveListener","addEventListener","removePassiveListener","removeEventListener","clearTimeout","_checkCordovaConfiguration","win","_assert","universalLinks","subscribe","missingPlugin","_b","_e","_d","_c","_h","_g","_f","_k","_j","bytes","stringToArrayBuffer","buf","crypto","subtle","digest","arr","Array","from","Uint8Array","map","num","toString","padStart","join","str","test","TextEncoder","encode","buff","ArrayBuffer","length","view","i","charCodeAt","SESSION_ID_LENGTH","CordovaAuthEventManager","AuthEventManager","constructor","passiveListeners","Set","initPromise","resolveInialized","cb","add","delete","resetRedirect","queuedRedirectEvent","hasHandledPotentialRedirect","onEvent","forEach","initialized","_generateNewEvent","urlResponse","generateSessionId","postBody","tenantId","error","_savePartialEvent","storage","_set","persistenceKey","_getAndRemoveEvent","_get","_remove","_eventFromPartialAndUrl","partialEvent","url","callbackUrl","_getDeepLinkFromCallback","includes","params","searchParamsOrEmpty","errorObject","parseJsonOrNull","decodeURIComponent","code","split","chars","allowedChars","idx","Math","floor","random","push","charAt","_getInstance","browserLocalPersistence","_persistenceKeyName","config","apiKey","name","json","JSON","parse","e","link","doubleDeepLink","iOSDeepLink","iOSDoubleDeepLink","_","rest","querystringDecode","INITIAL_EVENT_TIMEOUT_MS","CordovaPopupRedirectResolver","_redirectPersistence","browserSessionPersistence","_shouldInitProactively","eventManagers","Map","originValidationPromises","_completeRedirectFn","_getRedirectResult","_overrideRedirectResult","_initialize","key","_key","manager","get","set","attachCallbackListeners","_openPopup","_openRedirect","authType","_clearRedirectOutcomes","_originValidation","_isIframeWebStorageSupported","_auth","_cb","Error","handleOpenURL","noEventTimeout","generateNoEvent","universalLinksCb","eventData","finalEvent","existingHandleOpenURL","packagePrefix","toLowerCase","startsWith","console","cordovaPopupRedirectResolver","addFrameworkForLogging","framework","_castAuth","_logFramework"],"sources":["C:\\Users\\ATTA UR REHMAN\\Music\\Fida\\Cupboard\\node_modules\\@firebase\\auth-compat\\node_modules\\@firebase\\auth\\src\\platform_cordova\\plugins.ts","C:\\Users\\ATTA UR REHMAN\\Music\\Fida\\Cupboard\\node_modules\\@firebase\\auth-compat\\node_modules\\@firebase\\auth\\src\\platform_cordova\\popup_redirect\\utils.ts","C:\\Users\\ATTA UR REHMAN\\Music\\Fida\\Cupboard\\node_modules\\@firebase\\auth-compat\\node_modules\\@firebase\\auth\\src\\platform_cordova\\popup_redirect\\events.ts","C:\\Users\\ATTA UR REHMAN\\Music\\Fida\\Cupboard\\node_modules\\@firebase\\auth-compat\\node_modules\\@firebase\\auth\\src\\platform_cordova\\popup_redirect\\popup_redirect.ts","C:\\Users\\ATTA UR REHMAN\\Music\\Fida\\Cupboard\\node_modules\\@firebase\\auth-compat\\node_modules\\@firebase\\auth\\internal\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return window as unknown as CordovaWindow;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(persistenceKey(auth), event as object as PersistedBlob);\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport {\n  _clearRedirectOutcomes,\n  _overrideRedirectResult\n} from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n  _overrideRedirectResult = _overrideRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _castAuth } from '../src/core/auth/auth_impl';\nimport { Auth } from '../src/model/public_types';\n\n/**\n * This interface is intended only for use by @firebase/auth-compat, do not use directly\n */\nexport * from '../index';\n\nexport { SignInWithIdpResponse } from '../src/api/authentication/idp';\nexport { AuthErrorCode } from '../src/core/errors';\nexport { PersistenceInternal } from '../src/core/persistence';\nexport { _persistenceKeyName } from '../src/core/persistence/persistence_user_manager';\nexport { UserImpl } from '../src/core/user/user_impl';\nexport { _getInstance } from '../src/core/util/instantiator';\nexport {\n  PopupRedirectResolverInternal,\n  EventManager,\n  AuthEventType\n} from '../src/model/popup_redirect';\nexport { UserCredentialInternal, UserParameters } from '../src/model/user';\nexport { AuthInternal, ConfigInternal } from '../src/model/auth';\nexport { DefaultConfig, AuthImpl, _castAuth } from '../src/core/auth/auth_impl';\n\nexport { ClientPlatform, _getClientVersion } from '../src/core/util/version';\n\nexport { _generateEventId } from '../src/core/util/event_id';\nexport { TaggedWithTokenResponse } from '../src/model/id_token';\nexport { _fail, _assert } from '../src/core/util/assert';\nexport { AuthPopup } from '../src/platform_browser/util/popup';\nexport { _getRedirectResult } from '../src/platform_browser/strategies/redirect';\nexport { _overrideRedirectResult } from '../src/core/strategies/redirect';\nexport { cordovaPopupRedirectResolver } from '../src/platform_cordova/popup_redirect/popup_redirect';\nexport { FetchProvider } from '../src/core/util/fetch_provider';\nexport { SAMLAuthCredential } from '../src/core/credentials/saml';\n\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nexport function addFrameworkForLogging(auth: Auth, framework: string): void {\n  _castAuth(auth)._logFramework(framework);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
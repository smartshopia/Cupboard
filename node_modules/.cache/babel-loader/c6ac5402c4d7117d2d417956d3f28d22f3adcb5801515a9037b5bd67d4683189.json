{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IamClient = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\nconst fallback = require(\"./fallback\");\nlet version = require('../../package.json').version;\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {}\n    };\n    this.innerApiCalls = {};\n    this.gaxGrpc = gaxGrpc;\n    // Ensure that options include the service address and port.\n    const opts = Object.assign({\n      servicePath: options.servicePath,\n      port: options.port,\n      clientConfig: options.clientConfig,\n      apiEndpoint: options.apiEndpoint,\n      fallback: options.fallback\n    }, options);\n    version = opts.fallback ? fallback.version : version;\n    opts.scopes = this.constructor.scopes;\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = gaxGrpc.auth;\n    // Determine the client header string.\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n    // Put together the default options sent with requests.\n    this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.iamPolicyStub) {\n      return this.iamPolicyStub;\n    }\n    // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n    this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.iam.v1.IAMPolicy') : this._protos.google.iam.v1.IAMPolicy, this._opts);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const iamPolicyStubMethods = ['getIamPolicy', 'setIamPolicy', 'testIamPermissions'];\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n    }\n    return this.iamPolicyStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n  static get servicePath() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n  static get apiEndpoint() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloudkms'];\n  }\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n  getIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.getIamPolicy(request, options, callback);\n  }\n  setIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.setIamPolicy(request, options, callback);\n  }\n  testIamPermissions(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.testIamPermissions(request, options, callback);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n  close() {\n    this.initialize();\n    if (!this._terminated) {\n      return this.iamPolicyStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.IamClient = IamClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","IamClient","createApiCall_1","require","routingHeader","gapicConfig","fallback","version","jsonProtos","constructor","gaxGrpc","options","_terminated","descriptors","page","stream","longrunning","innerApiCalls","opts","assign","servicePath","port","clientConfig","apiEndpoint","scopes","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","_defaults","constructSettings","join","initialize","iamPolicyStub","createStub","lookupService","google","iam","v1","IAMPolicy","iamPolicyStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","func","apply","err","createApiCall","getProjectId","callback","Error","getIamPolicy","request","optionsOrCallback","Function","undefined","otherArgs","headers","fromParams","resource","setIamPolicy","testIamPermissions","close","resolve"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/iamService.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IamClient = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\nconst fallback = require(\"./fallback\");\nlet version = require('../../package.json').version;\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        this._terminated = false;\n        this.descriptors = { page: {}, stream: {}, longrunning: {} };\n        this.innerApiCalls = {};\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback,\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            'getIamPolicy',\n            'setIamPolicy',\n            'testIamPermissions',\n        ];\n        for (const methodName of iamPolicyStubMethods) {\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloudkms',\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.iamPolicyStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient;\n//# sourceMappingURL=iamService.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
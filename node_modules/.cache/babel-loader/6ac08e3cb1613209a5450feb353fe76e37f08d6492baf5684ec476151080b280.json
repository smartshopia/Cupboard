{"ast":null,"code":"\"use strict\";\n\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst executable_response_1 = require(\"./executable-response\");\nconst pluggable_auth_handler_1 = require(\"./pluggable-auth-handler\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\nclass ExecutableError extends Error {\n  constructor(message, code) {\n    super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n    this.code = code;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\nconst DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\nconst MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\nconst MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\nconst GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\nconst MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\nclass PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates a PluggableAuthClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid pluggable auth credential.\n   * @param options The external account options object typically loaded from\n   *   the external account JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    if (!options.credential_source.executable) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    }\n    this.command = options.credential_source.executable.command;\n    if (!this.command) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    }\n    // Check if the provided timeout exists and if it is valid.\n    if (options.credential_source.executable.timeout_millis === undefined) {\n      this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n    } else {\n      this.timeoutMillis = options.credential_source.executable.timeout_millis;\n      if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n        throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` + `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n      }\n    }\n    this.outputFile = options.credential_source.executable.output_file;\n    this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n      command: this.command,\n      timeoutMillis: this.timeoutMillis,\n      outputFile: this.outputFile\n    });\n    this.credentialSourceType = 'executable';\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this calls a user provided executable which returns the subject token.\n   * The logic is summarized as:\n   * 1. Validated that the executable is allowed to run. The\n   *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n   *    1 for security reasons.\n   * 2. If an output file is specified by the user, check the file location\n   *    for a response. If the file exists and contains a valid response,\n   *    return the subject token from the file.\n   * 3. Call the provided executable and return response.\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    // Check if the executable is allowed to run.\n    if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1') {\n      throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' + 'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' + 'Variable to 1.');\n    }\n    let executableResponse = undefined;\n    // Try to get cached executable response from output file.\n    if (this.outputFile) {\n      executableResponse = await this.handler.retrieveCachedResponse();\n    }\n    // If no response from output file, call the executable.\n    if (!executableResponse) {\n      // Set up environment map with required values for the executable.\n      const envMap = new Map();\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType);\n      // Always set to 0 because interactive mode is not supported.\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n      if (this.outputFile) {\n        envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n      }\n      const serviceAccountEmail = this.getServiceAccountEmail();\n      if (serviceAccountEmail) {\n        envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n      }\n      executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);\n    }\n    if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n      throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n    }\n    // Check that response was successful.\n    if (!executableResponse.success) {\n      throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n    }\n    // Check that response contains expiration time if output file was specified.\n    if (this.outputFile) {\n      if (!executableResponse.expirationTime) {\n        throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n      }\n    }\n    // Check that response is not expired.\n    if (executableResponse.isExpired()) {\n      throw new Error('Executable response is expired.');\n    }\n    // Return subject token from response.\n    return executableResponse.subjectToken;\n  }\n}\nexports.PluggableAuthClient = PluggableAuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","PluggableAuthClient","ExecutableError","baseexternalclient_1","require","executable_response_1","pluggable_auth_handler_1","Error","constructor","message","code","setPrototypeOf","new","target","prototype","DEFAULT_EXECUTABLE_TIMEOUT_MILLIS","MINIMUM_EXECUTABLE_TIMEOUT_MILLIS","MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS","GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES","MAXIMUM_EXECUTABLE_VERSION","BaseExternalAccountClient","options","additionalOptions","credential_source","executable","command","timeout_millis","undefined","timeoutMillis","outputFile","output_file","handler","PluggableAuthHandler","credentialSourceType","retrieveSubjectToken","process","env","executableResponse","retrieveCachedResponse","envMap","Map","set","audience","subjectTokenType","serviceAccountEmail","getServiceAccountEmail","retrieveResponseFromExecutable","version","success","errorMessage","errorCode","expirationTime","InvalidExpirationTimeFieldError","isExpired","subjectToken"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst executable_response_1 = require(\"./executable-response\");\nconst pluggable_auth_handler_1 = require(\"./pluggable-auth-handler\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\nclass ExecutableError extends Error {\n    constructor(message, code) {\n        super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\nconst DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\nconst MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\nconst MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\nconst GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\nconst MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\nclass PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates a PluggableAuthClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid pluggable auth credential.\n     * @param options The external account options object typically loaded from\n     *   the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        if (!options.credential_source.executable) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        this.command = options.credential_source.executable.command;\n        if (!this.command) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        // Check if the provided timeout exists and if it is valid.\n        if (options.credential_source.executable.timeout_millis === undefined) {\n            this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n        }\n        else {\n            this.timeoutMillis = options.credential_source.executable.timeout_millis;\n            if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS ||\n                this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n                throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` +\n                    `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n            }\n        }\n        this.outputFile = options.credential_source.executable.output_file;\n        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n            command: this.command,\n            timeoutMillis: this.timeoutMillis,\n            outputFile: this.outputFile,\n        });\n        this.credentialSourceType = 'executable';\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this calls a user provided executable which returns the subject token.\n     * The logic is summarized as:\n     * 1. Validated that the executable is allowed to run. The\n     *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n     *    1 for security reasons.\n     * 2. If an output file is specified by the user, check the file location\n     *    for a response. If the file exists and contains a valid response,\n     *    return the subject token from the file.\n     * 3. Call the provided executable and return response.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Check if the executable is allowed to run.\n        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1') {\n            throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' +\n                'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' +\n                'Variable to 1.');\n        }\n        let executableResponse = undefined;\n        // Try to get cached executable response from output file.\n        if (this.outputFile) {\n            executableResponse = await this.handler.retrieveCachedResponse();\n        }\n        // If no response from output file, call the executable.\n        if (!executableResponse) {\n            // Set up environment map with required values for the executable.\n            const envMap = new Map();\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType);\n            // Always set to 0 because interactive mode is not supported.\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n            if (this.outputFile) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n            }\n            const serviceAccountEmail = this.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n            }\n            executableResponse =\n                await this.handler.retrieveResponseFromExecutable(envMap);\n        }\n        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n            throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n        }\n        // Check that response was successful.\n        if (!executableResponse.success) {\n            throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n        }\n        // Check that response contains expiration time if output file was specified.\n        if (this.outputFile) {\n            if (!executableResponse.expirationTime) {\n                throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n            }\n        }\n        // Check that response is not expired.\n        if (executableResponse.isExpired()) {\n            throw new Error('Executable response is expired.');\n        }\n        // Return subject token from response.\n        return executableResponse.subjectToken;\n    }\n}\nexports.PluggableAuthClient = PluggableAuthClient;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,eAAe,GAAG,KAAK,CAAC;AAC9D,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC5D,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC9D,MAAME,wBAAwB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpE;AACA;AACA;AACA,MAAMF,eAAe,SAASK,KAAK,CAAC;EAChCC,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;IACvB,KAAK,CAAC,yCAAyCA,IAAI,uBAAuBD,OAAO,GAAG,CAAC;IACrF,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChBb,MAAM,CAACc,cAAc,CAAC,IAAI,EAAEC,GAAG,CAACC,MAAM,CAACC,SAAS,CAAC;EACrD;AACJ;AACAf,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC;AACA;AACA;AACA,MAAMa,iCAAiC,GAAG,EAAE,GAAG,IAAI;AACnD;AACA;AACA;AACA,MAAMC,iCAAiC,GAAG,CAAC,GAAG,IAAI;AAClD;AACA;AACA;AACA,MAAMC,iCAAiC,GAAG,GAAG,GAAG,IAAI;AACpD;AACA;AACA;AACA;AACA,MAAMC,yCAAyC,GAAG,2CAA2C;AAC7F;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMlB,mBAAmB,SA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriter = exports.BulkWriterError = exports.DEFAULT_JITTER_FACTOR = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = exports.RETRY_MAX_BATCH_SIZE = void 0;\nconst assert = require(\"assert\");\nconst backoff_1 = require(\"./backoff\");\nconst rate_limiter_1 = require(\"./rate-limiter\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst write_batch_1 = require(\"./write-batch\");\nconst validate_1 = require(\"./validate\");\nconst logger_1 = require(\"./logger\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The maximum number of writes can be can in a single batch that is being retried.\n */\nexports.RETRY_MAX_BATCH_SIZE = 10;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n * @internal\n */\nclass BulkWriterOperation {\n  /**\n   * @param ref The document reference being written to.\n   * @param type The type of operation that created this write.\n   * @param sendFn A callback to invoke when the operation should be sent.\n   * @param errorFn The user provided global error callback.\n   * @param successFn The user provided global success callback.\n   */\n  constructor(ref, type, sendFn, errorFn, successFn) {\n    this.ref = ref;\n    this.type = type;\n    this.sendFn = sendFn;\n    this.errorFn = errorFn;\n    this.successFn = successFn;\n    this.deferred = new util_1.Deferred();\n    this.failedAttempts = 0;\n    this._backoffDuration = 0;\n    /** Whether flush() was called when this was the last enqueued operation. */\n    this._flushed = false;\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  get backoffDuration() {\n    return this._backoffDuration;\n  }\n  markFlushed() {\n    this._flushed = true;\n  }\n  get flushed() {\n    return this._flushed;\n  }\n  onError(error) {\n    ++this.failedAttempts;\n    try {\n      const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n      const shouldRetry = this.errorFn(bulkWriterError);\n      (0, logger_1.logger)('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n      if (shouldRetry) {\n        this.lastStatus = error.code;\n        this.updateBackoffDuration();\n        this.sendFn(this);\n      } else {\n        this.deferred.reject(bulkWriterError);\n      }\n    } catch (userCallbackError) {\n      this.deferred.reject(userCallbackError);\n    }\n  }\n  updateBackoffDuration() {\n    if (this.lastStatus === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n      this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n    } else if (this._backoffDuration === 0) {\n      this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    } else {\n      this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n    }\n  }\n  onSuccess(result) {\n    try {\n      this.successFn(this.ref, result);\n      this.deferred.resolve(result);\n    } catch (userCallbackError) {\n      this.deferred.reject(userCallbackError);\n    }\n  }\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n * @internal\n */\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n  constructor(firestore, maxBatchSize) {\n    super(firestore);\n    // The set of document reference paths present in the WriteBatch.\n    this.docPaths = new Set();\n    // An array of pending write operations. Only contains writes that have not\n    // been resolved.\n    this.pendingOps = [];\n    this._maxBatchSize = maxBatchSize;\n  }\n  get maxBatchSize() {\n    return this._maxBatchSize;\n  }\n  setMaxBatchSize(size) {\n    assert(this.pendingOps.length <= size, 'New batch size cannot be less than the number of enqueued writes');\n    this._maxBatchSize = size;\n  }\n  has(documentRef) {\n    return this.docPaths.has(documentRef.path);\n  }\n  async bulkCommit(options = {}) {\n    var _a;\n    const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n    // Capture the error stack to preserve stack tracing across async calls.\n    const stack = Error().stack;\n    let response;\n    try {\n      (0, logger_1.logger)('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n      const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n      response = await this._commit({\n        retryCodes,\n        methodName: 'batchWrite',\n        requestTag: tag\n      });\n    } catch (err) {\n      // Map the failure to each individual write's result.\n      const ops = Array.from({\n        length: this.pendingOps.length\n      });\n      response = {\n        writeResults: ops.map(() => {\n          return {};\n        }),\n        status: ops.map(() => err)\n      };\n    }\n    for (let i = 0; i < (response.writeResults || []).length; ++i) {\n      // Since delete operations currently do not have write times, use a\n      // sentinel Timestamp value.\n      // TODO(b/158502664): Use actual delete timestamp.\n      const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n      const status = (response.status || [])[i];\n      if (status.code === 0 /* StatusCode.OK */) {\n        const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n        this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n      } else {\n        const error = new (require('google-gax/build/src/fallback').GoogleError)(status.message || undefined);\n        error.code = status.code;\n        this.pendingOps[i].onError((0, util_1.wrapError)(error, stack));\n      }\n    }\n  }\n  /**\n   * Helper to update data structures associated with the operation and returns\n   * the result.\n   */\n  processLastOperation(op) {\n    assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n    this.docPaths.add(op.ref.path);\n    this.pendingOps.push(op);\n  }\n}\n/**\n * Used to represent a buffered BulkWriterOperation.\n *\n * @private\n * @internal\n */\nclass BufferedOperation {\n  constructor(operation, sendFn) {\n    this.operation = operation;\n    this.sendFn = sendFn;\n  }\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\nclass BulkWriterError extends Error {\n  /**\n   * @private\n   * @internal\n   */\n  constructor( /** The status code of the error. */\n  code, /** The error message of the error. */\n  message, /** The document reference the operation was performed on. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  documentRef, /** The type of operation performed. */\n  operationType, /** How many times this operation has been attempted unsuccessfully. */\n  failedAttempts) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.documentRef = documentRef;\n    this.operationType = operationType;\n    this.failedAttempts = failedAttempts;\n  }\n}\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\nclass BulkWriter {\n  // Visible for testing.\n  /**\n   * @private\n   * @internal\n   */\n  _getBufferedOperationsCount() {\n    return this._bufferedOperations.length;\n  }\n  // Visible for testing.\n  /**\n   * @private\n   * @internal\n   */\n  _setMaxBatchSize(size) {\n    assert(this._bulkCommitBatch.pendingOps.length === 0, 'BulkCommitBatch should be empty');\n    this._maxBatchSize = size;\n    this._bulkCommitBatch = new BulkCommitBatch(this.firestore, size);\n  }\n  // Visible for testing.\n  /**\n   * @private\n   * @internal\n   */\n  _setMaxPendingOpCount(newMax) {\n    this._maxPendingOpCount = newMax;\n  }\n  /** @private */\n  constructor(firestore, options) {\n    var _a, _b;\n    this.firestore = firestore;\n    /**\n     * The maximum number of writes that can be in a single batch.\n     * Visible for testing.\n     * @private\n     * @internal\n     */\n    this._maxBatchSize = MAX_BATCH_SIZE;\n    /**\n     * The batch that is currently used to schedule operations. Once this batch\n     * reaches maximum capacity, a new batch is created.\n     * @private\n     * @internal\n     */\n    this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n    /**\n     * A pointer to the tail of all active BulkWriter operations. This pointer\n     * is advanced every time a new write is enqueued.\n     * @private\n     * @internal\n     */\n    this._lastOp = Promise.resolve();\n    /**\n     * Whether this BulkWriter instance has started to close. Afterwards, no\n     * new operations can be enqueued, except for retry operations scheduled by\n     * the error handler.\n     * @private\n     * @internal\n     */\n    this._closing = false;\n    /**\n     * The number of pending operations enqueued on this BulkWriter instance.\n     * An operation is considered pending if BulkWriter has sent it via RPC and\n     * is awaiting the result.\n     * @private\n     * @internal\n     */\n    this._pendingOpsCount = 0;\n    /**\n     * An array containing buffered BulkWriter operations after the maximum number\n     * of pending operations has been enqueued.\n     * @private\n     * @internal\n     */\n    this._bufferedOperations = [];\n    /**\n     * Whether a custom error handler has been set. BulkWriter only swallows\n     * errors if an error handler is set. Otherwise, an UnhandledPromiseRejection\n     * is thrown by Node if an operation promise is rejected without being\n     * handled.\n     * @private\n     * @internal\n     */\n    this._errorHandlerSet = false;\n    /**\n     * The maximum number of pending operations that can be enqueued onto this\n     * BulkWriter instance. Once the this number of writes have been enqueued,\n     * subsequent writes are buffered.\n     * @private\n     * @internal\n     */\n    this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n    /**\n     * The user-provided callback to be run every time a BulkWriter operation\n     * successfully completes.\n     * @private\n     * @internal\n     */\n    this._successFn = () => {};\n    /**\n     * The user-provided callback to be run every time a BulkWriter operation\n     * fails.\n     * @private\n     * @internal\n     */\n    this._errorFn = error => {\n      const isRetryableDeleteError = error.operationType === 'delete' && error.code === 13 /* StatusCode.INTERNAL */;\n      const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n      return (retryCodes.includes(error.code) || isRetryableDeleteError) && error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS;\n    };\n    this.firestore._incrementBulkWritersCount();\n    validateBulkWriterOptions(options);\n    if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n      this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n    } else {\n      let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n      let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n      if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n        if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n          maxRate = options.throttling.maxOpsPerSecond;\n        }\n        if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n          startingRate = options.throttling.initialOpsPerSecond;\n        }\n        // The initial validation step ensures that the maxOpsPerSecond is\n        // greater than initialOpsPerSecond. If this inequality is true, that\n        // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n        // than the default starting rate.\n        if (maxRate < startingRate) {\n          startingRate = maxRate;\n        }\n        // Ensure that the batch size is not larger than the number of allowed\n        // operations per second.\n        if (startingRate < this._maxBatchSize) {\n          this._maxBatchSize = startingRate;\n        }\n      }\n      this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n    }\n  }\n  /**\n   * Create a document with the provided data. This single operation will fail\n   * if a document exists at its location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {T} data The object to serialize as the document.\n   * @throws {Error} If the provided input is not a valid Firestore document.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * bulkWriter\n   *  .create(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   * ```\n   */\n  create(documentRef, data) {\n    this._verifyNotClosed();\n    return this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n  }\n  /**\n   * Delete a document from the database.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the batch if the\n   * document doesn't exist or was last updated at a different time.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the delete. If the delete fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * bulkWriter\n   *  .delete(documentRef)\n   *  .then(result => {\n   *    console.log('Successfully deleted document');\n   *  })\n   *  .catch(err => {\n   *    console.log('Delete failed with: ', err);\n   *  });\n   * });\n   * ```\n   */\n  delete(documentRef, precondition) {\n    this._verifyNotClosed();\n    return this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n  }\n  /**\n   * Write to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document does not\n   * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n   * the provided data can be merged into the existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {T} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @throws {Error} If the provided input is not a valid Firestore document.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call remain\n   * untouched. If your input sets any field to an empty map, all nested fields\n   * are overwritten.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n   * only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched. If your input sets any field to\n   * an empty map, all nested fields are overwritten.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * bulkWriter\n   *  .set(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   * ```\n   */\n  set(documentRef, data, options) {\n    this._verifyNotClosed();\n    return this._enqueue(documentRef, 'set', bulkCommitBatch => {\n      if (options) {\n        return bulkCommitBatch.set(documentRef, data, options);\n      } else {\n        return bulkCommitBatch.set(documentRef, data);\n      }\n    });\n  }\n  /**\n   * Update fields of the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n   * exist, the update fails and the entire batch will be rejected.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n   * fields and values with which to update the document or the path of the\n   * first field to update.\n   * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n   * alternating list of field paths and values to update or a Precondition to\n   * restrict this update\n   * @throws {Error} If the provided input is not valid Firestore data.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * bulkWriter\n   *  .update(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   * ```\n   */\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    this._verifyNotClosed();\n    return this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n  }\n  /**\n   * Callback function set by {@link BulkWriter#onWriteResult} that is run\n   * every time a {@link BulkWriter} operation successfully completes.\n   *\n   * @callback BulkWriter~successCallback\n   * @param {DocumentReference} documentRef The document reference the\n   * operation was performed on\n   * @param {WriteResult} result The server write time of the operation.\n   */\n  /**\n   * Attaches a listener that is run every time a BulkWriter operation\n   * successfully completes.\n   *\n   * @param {BulkWriter~successCallback} successCallback A callback to be\n   * called every time a BulkWriter operation successfully completes.\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter\n   *   .onWriteResult((documentRef, result) => {\n   *     console.log(\n   *       'Successfully executed write on document: ',\n   *       documentRef,\n   *       ' at: ',\n   *       result\n   *     );\n   *   });\n   * ```\n   */\n  onWriteResult(successCallback) {\n    this._successFn = successCallback;\n  }\n  /**\n   * Callback function set by {@link BulkWriter#onWriteError} that is run when\n   * a write fails in order to determine whether {@link BulkWriter} should\n   * retry the operation.\n   *\n   * @callback BulkWriter~shouldRetryCallback\n   * @param {BulkWriterError} error The error object with information about the\n   * operation and error.\n   * @returns {boolean} Whether or not to retry the failed operation. Returning\n   * `true` retries the operation. Returning `false` will stop the retry loop.\n   */\n  /**\n   * Attaches an error handler listener that is run every time a BulkWriter\n   * operation fails.\n   *\n   * BulkWriter has a default error handler that retries UNAVAILABLE and\n   * ABORTED errors up to a maximum of 10 failed attempts. When an error\n   * handler is specified, the default error handler will be overwritten.\n   *\n   * @param shouldRetryCallback {BulkWriter~shouldRetryCallback} A callback to\n   * be called every time a BulkWriter operation fails. Returning `true` will\n   * retry the operation. Returning `false` will stop the retry loop.\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter\n   *   .onWriteError((error) => {\n   *     if (\n   *       error.code === GrpcStatus.UNAVAILABLE &&\n   *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n   *     ) {\n   *       return true;\n   *     } else {\n   *       console.log('Failed write at document: ', error.documentRef);\n   *       return false;\n   *     }\n   *   });\n   * ```\n   */\n  onWriteError(shouldRetryCallback) {\n    this._errorHandlerSet = true;\n    this._errorFn = shouldRetryCallback;\n  }\n  /**\n   * Commits all writes that have been enqueued up to this point in parallel.\n   *\n   * Returns a Promise that resolves when all currently queued operations have\n   * been committed. The Promise will never be rejected since the results for\n   * each individual operation are conveyed via their individual Promises.\n   *\n   * The Promise resolves immediately if there are no pending writes. Otherwise,\n   * the Promise waits for all previously issued writes, but it does not wait\n   * for writes that were added after the method is called. If you want to wait\n   * for additional writes, call `flush()` again.\n   *\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\n   * up to this point have been committed.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter.create(documentRef, {foo: 'bar'});\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\n   * bulkWriter.delete(documentRef3);\n   * await flush().then(() => {\n   *   console.log('Executed all writes');\n   * });\n   * ```\n   */\n  flush() {\n    this._verifyNotClosed();\n    this._scheduleCurrentBatch( /* flush= */true);\n    // Mark the most recent operation as flushed to ensure that the batch\n    // containing it will be sent once it's popped from the buffer.\n    if (this._bufferedOperations.length > 0) {\n      this._bufferedOperations[this._bufferedOperations.length - 1].operation.markFlushed();\n    }\n    return this._lastOp;\n  }\n  /**\n   * Commits all enqueued writes and marks the BulkWriter instance as closed.\n   *\n   * After calling `close()`, calling any method will throw an error. Any\n   * retries scheduled as part of an `onWriteError()` handler will be run\n   * before the `close()` promise resolves.\n   *\n   * Returns a Promise that resolves when there are no more pending writes. The\n   * Promise will never be rejected. Calling this method will send all requests.\n   * The promise resolves immediately if there are no pending writes.\n   *\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\n   * up to this point have been committed.\n   *\n   * @example\n   * ```\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter.create(documentRef, {foo: 'bar'});\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\n   * bulkWriter.delete(documentRef3);\n   * await close().then(() => {\n   *   console.log('Executed all writes');\n   * });\n   * ```\n   */\n  close() {\n    this._verifyNotClosed();\n    this.firestore._decrementBulkWritersCount();\n    const flushPromise = this.flush();\n    this._closing = true;\n    return flushPromise;\n  }\n  /**\n   * Throws an error if the BulkWriter instance has been closed.\n   * @private\n   * @internal\n   */\n  _verifyNotClosed() {\n    if (this._closing) {\n      throw new Error('BulkWriter has already been closed.');\n    }\n  }\n  /**\n   * Sends the current batch and resets `this._bulkCommitBatch`.\n   *\n   * @param flush If provided, keeps re-sending operations until no more\n   * operations are enqueued. This allows retries to resolve as part of a\n   * `flush()` or `close()` call.\n   * @private\n   * @internal\n   */\n  _scheduleCurrentBatch(flush = false) {\n    if (this._bulkCommitBatch._opCount === 0) return;\n    const pendingBatch = this._bulkCommitBatch;\n    this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n    // Use the write with the longest backoff duration when determining backoff.\n    const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => prev.backoffDuration > cur.backoffDuration ? prev : cur).backoffDuration;\n    const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n    const delayedExecution = new util_1.Deferred();\n    if (backoffMsWithJitter > 0) {\n      (0, backoff_1.delayExecution)(() => delayedExecution.resolve(), backoffMsWithJitter);\n    } else {\n      delayedExecution.resolve();\n    }\n    delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n  }\n  /**\n   * Sends the provided batch once the rate limiter does not require any delay.\n   * @private\n   * @internal\n   */\n  async _sendBatch(batch, flush = false) {\n    const tag = (0, util_1.requestTag)();\n    // Send the batch if it is does not require any delay, or schedule another\n    // attempt after the appropriate timeout.\n    const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n    if (underRateLimit) {\n      await batch.bulkCommit({\n        requestTag: tag\n      });\n      if (flush) this._scheduleCurrentBatch(flush);\n    } else {\n      const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n      (0, logger_1.logger)('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n      (0, backoff_1.delayExecution)(() => this._sendBatch(batch, flush), delayMs);\n    }\n  }\n  /**\n   * Adds a 30% jitter to the provided backoff.\n   *\n   * @private\n   * @internal\n   */\n  static _applyJitter(backoffMs) {\n    if (backoffMs === 0) return 0;\n    // Random value in [-0.3, 0.3].\n    const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n    return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n  }\n  /**\n   * Schedules and runs the provided operation on the next available batch.\n   * @private\n   * @internal\n   */\n  _enqueue(ref, type, enqueueOnBatchCallback) {\n    const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));\n    // Swallow the error if the developer has set an error listener. This\n    // prevents UnhandledPromiseRejections from being thrown if a floating\n    // BulkWriter operation promise fails when an error handler is specified.\n    //\n    // This is done here in order to chain the caught promise onto `lastOp`,\n    // which ensures that flush() resolves after the operation promise.\n    const userPromise = bulkWriterOp.promise.catch(err => {\n      if (!this._errorHandlerSet) {\n        throw err;\n      } else {\n        return bulkWriterOp.promise;\n      }\n    });\n    // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n    // when both the previous and the current write resolve.\n    this._lastOp = this._lastOp.then(() => (0, util_1.silencePromise)(userPromise));\n    // Schedule the operation if the BulkWriter has fewer than the maximum\n    // number of allowed pending operations, or add the operation to the\n    // buffer.\n    if (this._pendingOpsCount < this._maxPendingOpCount) {\n      this._pendingOpsCount++;\n      this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n    } else {\n      this._bufferedOperations.push(new BufferedOperation(bulkWriterOp, () => {\n        this._pendingOpsCount++;\n        this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n      }));\n    }\n    // Chain the BulkWriter operation promise with the buffer processing logic\n    // in order to ensure that it runs and that subsequent operations are\n    // enqueued before the next batch is scheduled in `_sendBatch()`.\n    return userPromise.then(res => {\n      this._pendingOpsCount--;\n      this._processBufferedOps();\n      return res;\n    }).catch(err => {\n      this._pendingOpsCount--;\n      this._processBufferedOps();\n      throw err;\n    });\n  }\n  /**\n   * Manages the pending operation counter and schedules the next BulkWriter\n   * operation if we're under the maximum limit.\n   * @private\n   * @internal\n   */\n  _processBufferedOps() {\n    if (this._pendingOpsCount < this._maxPendingOpCount && this._bufferedOperations.length > 0) {\n      const nextOp = this._bufferedOperations.shift();\n      nextOp.sendFn();\n    }\n  }\n  /**\n   * Schedules the provided operations on current BulkCommitBatch.\n   * Sends the BulkCommitBatch if it reaches maximum capacity.\n   *\n   * @private\n   * @internal\n   */\n  _sendFn(enqueueOnBatchCallback, op) {\n    // A backoff duration greater than 0 implies that this batch is a retry.\n    // Retried writes are sent with a batch size of 10 in order to guarantee\n    // that the batch is under the 10MiB limit.\n    if (op.backoffDuration > 0) {\n      if (this._bulkCommitBatch.pendingOps.length >= exports.RETRY_MAX_BATCH_SIZE) {\n        this._scheduleCurrentBatch( /* flush= */false);\n      }\n      this._bulkCommitBatch.setMaxBatchSize(exports.RETRY_MAX_BATCH_SIZE);\n    }\n    if (this._bulkCommitBatch.has(op.ref)) {\n      // Create a new batch since the backend doesn't support batches with two\n      // writes to the same document.\n      this._scheduleCurrentBatch();\n    }\n    enqueueOnBatchCallback(this._bulkCommitBatch);\n    this._bulkCommitBatch.processLastOperation(op);\n    if (this._bulkCommitBatch._opCount === this._bulkCommitBatch.maxBatchSize) {\n      this._scheduleCurrentBatch();\n    } else if (op.flushed) {\n      // If flush() was called before this operation was enqueued into a batch,\n      // we still need to schedule it.\n      this._scheduleCurrentBatch( /* flush= */true);\n    }\n  }\n}\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @internal\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\nfunction validateBulkWriterOptions(value) {\n  if ((0, validate_1.validateOptional)(value, {\n    optional: true\n  })) {\n    return;\n  }\n  const argName = 'options';\n  if (!(0, util_1.isObject)(value)) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} Input is not an object.`);\n  }\n  const options = value;\n  if (options.throttling === undefined || typeof options.throttling === 'boolean') {\n    return;\n  }\n  if (options.throttling.initialOpsPerSecond !== undefined) {\n    (0, validate_1.validateInteger)('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n      minValue: 1\n    });\n  }\n  if (options.throttling.maxOpsPerSecond !== undefined) {\n    (0, validate_1.validateInteger)('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n      minValue: 1\n    });\n    if (options.throttling.initialOpsPerSecond !== undefined && options.throttling.initialOpsPerSecond > options.throttling.maxOpsPerSecond) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","BulkWriter","BulkWriterError","DEFAULT_JITTER_FACTOR","DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT","DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT","RETRY_MAX_BATCH_SIZE","assert","require","backoff_1","rate_limiter_1","timestamp_1","util_1","write_batch_1","validate_1","logger_1","MAX_BATCH_SIZE","RATE_LIMITER_MULTIPLIER","RATE_LIMITER_MULTIPLIER_MILLIS","DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT","BulkWriterOperation","constructor","ref","type","sendFn","errorFn","successFn","deferred","Deferred","failedAttempts","_backoffDuration","_flushed","promise","backoffDuration","markFlushed","flushed","onError","error","bulkWriterError","code","message","shouldRetry","logger","path","lastStatus","updateBackoffDuration","reject","userCallbackError","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_FACTOR","onSuccess","result","resolve","BulkCommitBatch","WriteBatch","firestore","maxBatchSize","docPaths","Set","pendingOps","_maxBatchSize","setMaxBatchSize","size","length","has","documentRef","bulkCommit","options","_a","tag","requestTag","stack","Error","response","_opCount","retryCodes","getRetryCodes","_commit","methodName","err","ops","Array","from","writeResults","map","status","i","DELETE_TIMESTAMP_SENTINEL","Timestamp","fromMillis","updateTime","fromProto","WriteResult","GoogleError","undefined","wrapError","processLastOperation","op","add","push","BufferedOperation","operation","operationType","_getBufferedOperationsCount","_bufferedOperations","_setMaxBatchSize","_bulkCommitBatch","_setMaxPendingOpCount","newMax","_maxPendingOpCount","_b","_lastOp","Promise","_closing","_pendingOpsCount","_errorHandlerSet","_successFn","_errorFn","isRetryableDeleteError","includes","MAX_RETRY_ATTEMPTS","_incrementBulkWritersCount","validateBulkWriterOptions","throttling","_rateLimiter","RateLimiter","Number","POSITIVE_INFINITY","startingRate","maxRate","maxOpsPerSecond","initialOpsPerSecond","create","data","_verifyNotClosed","_enqueue","bulkCommitBatch","delete","precondition","set","update","dataOrField","preconditionOrValues","onWriteResult","successCallback","onWriteError","shouldRetryCallback","flush","_scheduleCurrentBatch","close","_decrementBulkWritersCount","flushPromise","pendingBatch","highestBackoffDuration","reduce","prev","cur","backoffMsWithJitter","_applyJitter","delayedExecution","delayExecution","then","_sendBatch","batch","underRateLimit","tryMakeRequest","delayMs","getNextRequestDelayMs","backoffMs","jitter","Math","random","min","enqueueOnBatchCallback","bulkWriterOp","_sendFn","bind","userPromise","catch","silencePromise","res","_processBufferedOps","nextOp","shift","validateOptional","optional","argName","isObject","invalidArgumentMessage","validateInteger","minValue"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/bulk-writer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkWriter = exports.BulkWriterError = exports.DEFAULT_JITTER_FACTOR = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = exports.RETRY_MAX_BATCH_SIZE = void 0;\nconst assert = require(\"assert\");\nconst backoff_1 = require(\"./backoff\");\nconst rate_limiter_1 = require(\"./rate-limiter\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst write_batch_1 = require(\"./write-batch\");\nconst validate_1 = require(\"./validate\");\nconst logger_1 = require(\"./logger\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The maximum number of writes can be can in a single batch that is being retried.\n */\nexports.RETRY_MAX_BATCH_SIZE = 10;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n * @internal\n */\nclass BulkWriterOperation {\n    /**\n     * @param ref The document reference being written to.\n     * @param type The type of operation that created this write.\n     * @param sendFn A callback to invoke when the operation should be sent.\n     * @param errorFn The user provided global error callback.\n     * @param successFn The user provided global success callback.\n     */\n    constructor(ref, type, sendFn, errorFn, successFn) {\n        this.ref = ref;\n        this.type = type;\n        this.sendFn = sendFn;\n        this.errorFn = errorFn;\n        this.successFn = successFn;\n        this.deferred = new util_1.Deferred();\n        this.failedAttempts = 0;\n        this._backoffDuration = 0;\n        /** Whether flush() was called when this was the last enqueued operation. */\n        this._flushed = false;\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    get backoffDuration() {\n        return this._backoffDuration;\n    }\n    markFlushed() {\n        this._flushed = true;\n    }\n    get flushed() {\n        return this._flushed;\n    }\n    onError(error) {\n        ++this.failedAttempts;\n        try {\n            const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n            const shouldRetry = this.errorFn(bulkWriterError);\n            (0, logger_1.logger)('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n            if (shouldRetry) {\n                this.lastStatus = error.code;\n                this.updateBackoffDuration();\n                this.sendFn(this);\n            }\n            else {\n                this.deferred.reject(bulkWriterError);\n            }\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n    updateBackoffDuration() {\n        if (this.lastStatus === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        }\n        else if (this._backoffDuration === 0) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        }\n        else {\n            this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n        }\n    }\n    onSuccess(result) {\n        try {\n            this.successFn(this.ref, result);\n            this.deferred.resolve(result);\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n * @internal\n */\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n    constructor(firestore, maxBatchSize) {\n        super(firestore);\n        // The set of document reference paths present in the WriteBatch.\n        this.docPaths = new Set();\n        // An array of pending write operations. Only contains writes that have not\n        // been resolved.\n        this.pendingOps = [];\n        this._maxBatchSize = maxBatchSize;\n    }\n    get maxBatchSize() {\n        return this._maxBatchSize;\n    }\n    setMaxBatchSize(size) {\n        assert(this.pendingOps.length <= size, 'New batch size cannot be less than the number of enqueued writes');\n        this._maxBatchSize = size;\n    }\n    has(documentRef) {\n        return this.docPaths.has(documentRef.path);\n    }\n    async bulkCommit(options = {}) {\n        var _a;\n        const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        let response;\n        try {\n            (0, logger_1.logger)('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n            const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n            response = await this._commit({ retryCodes, methodName: 'batchWrite', requestTag: tag });\n        }\n        catch (err) {\n            // Map the failure to each individual write's result.\n            const ops = Array.from({ length: this.pendingOps.length });\n            response = {\n                writeResults: ops.map(() => {\n                    return {};\n                }),\n                status: ops.map(() => err),\n            };\n        }\n        for (let i = 0; i < (response.writeResults || []).length; ++i) {\n            // Since delete operations currently do not have write times, use a\n            // sentinel Timestamp value.\n            // TODO(b/158502664): Use actual delete timestamp.\n            const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n            const status = (response.status || [])[i];\n            if (status.code === 0 /* StatusCode.OK */) {\n                const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n                this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n            }\n            else {\n                const error = new (require('google-gax/build/src/fallback').GoogleError)(status.message || undefined);\n                error.code = status.code;\n                this.pendingOps[i].onError((0, util_1.wrapError)(error, stack));\n            }\n        }\n    }\n    /**\n     * Helper to update data structures associated with the operation and returns\n     * the result.\n     */\n    processLastOperation(op) {\n        assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n        this.docPaths.add(op.ref.path);\n        this.pendingOps.push(op);\n    }\n}\n/**\n * Used to represent a buffered BulkWriterOperation.\n *\n * @private\n * @internal\n */\nclass BufferedOperation {\n    constructor(operation, sendFn) {\n        this.operation = operation;\n        this.sendFn = sendFn;\n    }\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\nclass BulkWriterError extends Error {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(\n    /** The status code of the error. */\n    code, \n    /** The error message of the error. */\n    message, \n    /** The document reference the operation was performed on. */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, \n    /** The type of operation performed. */\n    operationType, \n    /** How many times this operation has been attempted unsuccessfully. */\n    failedAttempts) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.documentRef = documentRef;\n        this.operationType = operationType;\n        this.failedAttempts = failedAttempts;\n    }\n}\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\nclass BulkWriter {\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _getBufferedOperationsCount() {\n        return this._bufferedOperations.length;\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxBatchSize(size) {\n        assert(this._bulkCommitBatch.pendingOps.length === 0, 'BulkCommitBatch should be empty');\n        this._maxBatchSize = size;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, size);\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxPendingOpCount(newMax) {\n        this._maxPendingOpCount = newMax;\n    }\n    /** @private */\n    constructor(firestore, options) {\n        var _a, _b;\n        this.firestore = firestore;\n        /**\n         * The maximum number of writes that can be in a single batch.\n         * Visible for testing.\n         * @private\n         * @internal\n         */\n        this._maxBatchSize = MAX_BATCH_SIZE;\n        /**\n         * The batch that is currently used to schedule operations. Once this batch\n         * reaches maximum capacity, a new batch is created.\n         * @private\n         * @internal\n         */\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        /**\n         * A pointer to the tail of all active BulkWriter operations. This pointer\n         * is advanced every time a new write is enqueued.\n         * @private\n         * @internal\n         */\n        this._lastOp = Promise.resolve();\n        /**\n         * Whether this BulkWriter instance has started to close. Afterwards, no\n         * new operations can be enqueued, except for retry operations scheduled by\n         * the error handler.\n         * @private\n         * @internal\n         */\n        this._closing = false;\n        /**\n         * The number of pending operations enqueued on this BulkWriter instance.\n         * An operation is considered pending if BulkWriter has sent it via RPC and\n         * is awaiting the result.\n         * @private\n         * @internal\n         */\n        this._pendingOpsCount = 0;\n        /**\n         * An array containing buffered BulkWriter operations after the maximum number\n         * of pending operations has been enqueued.\n         * @private\n         * @internal\n         */\n        this._bufferedOperations = [];\n        /**\n         * Whether a custom error handler has been set. BulkWriter only swallows\n         * errors if an error handler is set. Otherwise, an UnhandledPromiseRejection\n         * is thrown by Node if an operation promise is rejected without being\n         * handled.\n         * @private\n         * @internal\n         */\n        this._errorHandlerSet = false;\n        /**\n         * The maximum number of pending operations that can be enqueued onto this\n         * BulkWriter instance. Once the this number of writes have been enqueued,\n         * subsequent writes are buffered.\n         * @private\n         * @internal\n         */\n        this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * successfully completes.\n         * @private\n         * @internal\n         */\n        this._successFn = () => { };\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * fails.\n         * @private\n         * @internal\n         */\n        this._errorFn = error => {\n            const isRetryableDeleteError = error.operationType === 'delete' &&\n                error.code === 13 /* StatusCode.INTERNAL */;\n            const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n            return ((retryCodes.includes(error.code) || isRetryableDeleteError) &&\n                error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS);\n        };\n        this.firestore._incrementBulkWritersCount();\n        validateBulkWriterOptions(options);\n        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n            this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        }\n        else {\n            let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n            let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n            if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n                if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n                    maxRate = options.throttling.maxOpsPerSecond;\n                }\n                if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n                    startingRate = options.throttling.initialOpsPerSecond;\n                }\n                // The initial validation step ensures that the maxOpsPerSecond is\n                // greater than initialOpsPerSecond. If this inequality is true, that\n                // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n                // than the default starting rate.\n                if (maxRate < startingRate) {\n                    startingRate = maxRate;\n                }\n                // Ensure that the batch size is not larger than the number of allowed\n                // operations per second.\n                if (startingRate < this._maxBatchSize) {\n                    this._maxBatchSize = startingRate;\n                }\n            }\n            this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n        }\n    }\n    /**\n     * Create a document with the provided data. This single operation will fail\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .create(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n    }\n    /**\n     * Delete a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the delete. If the delete fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .delete(documentRef)\n     *  .then(result => {\n     *    console.log('Successfully deleted document');\n     *  })\n     *  .catch(err => {\n     *    console.log('Delete failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    delete(documentRef, precondition) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n     * only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .set(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'set', bulkCommitBatch => {\n            if (options) {\n                return bulkCommitBatch.set(documentRef, data, options);\n            }\n            else {\n                return bulkCommitBatch.set(documentRef, data);\n            }\n        });\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n     * exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n     * alternating list of field paths and values to update or a Precondition to\n     * restrict this update\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .update(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteResult} that is run\n     * every time a {@link BulkWriter} operation successfully completes.\n     *\n     * @callback BulkWriter~successCallback\n     * @param {DocumentReference} documentRef The document reference the\n     * operation was performed on\n     * @param {WriteResult} result The server write time of the operation.\n     */\n    /**\n     * Attaches a listener that is run every time a BulkWriter operation\n     * successfully completes.\n     *\n     * @param {BulkWriter~successCallback} successCallback A callback to be\n     * called every time a BulkWriter operation successfully completes.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteResult((documentRef, result) => {\n     *     console.log(\n     *       'Successfully executed write on document: ',\n     *       documentRef,\n     *       ' at: ',\n     *       result\n     *     );\n     *   });\n     * ```\n     */\n    onWriteResult(successCallback) {\n        this._successFn = successCallback;\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteError} that is run when\n     * a write fails in order to determine whether {@link BulkWriter} should\n     * retry the operation.\n     *\n     * @callback BulkWriter~shouldRetryCallback\n     * @param {BulkWriterError} error The error object with information about the\n     * operation and error.\n     * @returns {boolean} Whether or not to retry the failed operation. Returning\n     * `true` retries the operation. Returning `false` will stop the retry loop.\n     */\n    /**\n     * Attaches an error handler listener that is run every time a BulkWriter\n     * operation fails.\n     *\n     * BulkWriter has a default error handler that retries UNAVAILABLE and\n     * ABORTED errors up to a maximum of 10 failed attempts. When an error\n     * handler is specified, the default error handler will be overwritten.\n     *\n     * @param shouldRetryCallback {BulkWriter~shouldRetryCallback} A callback to\n     * be called every time a BulkWriter operation fails. Returning `true` will\n     * retry the operation. Returning `false` will stop the retry loop.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.code === GrpcStatus.UNAVAILABLE &&\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef);\n     *       return false;\n     *     }\n     *   });\n     * ```\n     */\n    onWriteError(shouldRetryCallback) {\n        this._errorHandlerSet = true;\n        this._errorFn = shouldRetryCallback;\n    }\n    /**\n     * Commits all writes that have been enqueued up to this point in parallel.\n     *\n     * Returns a Promise that resolves when all currently queued operations have\n     * been committed. The Promise will never be rejected since the results for\n     * each individual operation are conveyed via their individual Promises.\n     *\n     * The Promise resolves immediately if there are no pending writes. Otherwise,\n     * the Promise waits for all previously issued writes, but it does not wait\n     * for writes that were added after the method is called. If you want to wait\n     * for additional writes, call `flush()` again.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await flush().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    flush() {\n        this._verifyNotClosed();\n        this._scheduleCurrentBatch(/* flush= */ true);\n        // Mark the most recent operation as flushed to ensure that the batch\n        // containing it will be sent once it's popped from the buffer.\n        if (this._bufferedOperations.length > 0) {\n            this._bufferedOperations[this._bufferedOperations.length - 1].operation.markFlushed();\n        }\n        return this._lastOp;\n    }\n    /**\n     * Commits all enqueued writes and marks the BulkWriter instance as closed.\n     *\n     * After calling `close()`, calling any method will throw an error. Any\n     * retries scheduled as part of an `onWriteError()` handler will be run\n     * before the `close()` promise resolves.\n     *\n     * Returns a Promise that resolves when there are no more pending writes. The\n     * Promise will never be rejected. Calling this method will send all requests.\n     * The promise resolves immediately if there are no pending writes.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    close() {\n        this._verifyNotClosed();\n        this.firestore._decrementBulkWritersCount();\n        const flushPromise = this.flush();\n        this._closing = true;\n        return flushPromise;\n    }\n    /**\n     * Throws an error if the BulkWriter instance has been closed.\n     * @private\n     * @internal\n     */\n    _verifyNotClosed() {\n        if (this._closing) {\n            throw new Error('BulkWriter has already been closed.');\n        }\n    }\n    /**\n     * Sends the current batch and resets `this._bulkCommitBatch`.\n     *\n     * @param flush If provided, keeps re-sending operations until no more\n     * operations are enqueued. This allows retries to resolve as part of a\n     * `flush()` or `close()` call.\n     * @private\n     * @internal\n     */\n    _scheduleCurrentBatch(flush = false) {\n        if (this._bulkCommitBatch._opCount === 0)\n            return;\n        const pendingBatch = this._bulkCommitBatch;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        // Use the write with the longest backoff duration when determining backoff.\n        const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => (prev.backoffDuration > cur.backoffDuration ? prev : cur)).backoffDuration;\n        const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n        const delayedExecution = new util_1.Deferred();\n        if (backoffMsWithJitter > 0) {\n            (0, backoff_1.delayExecution)(() => delayedExecution.resolve(), backoffMsWithJitter);\n        }\n        else {\n            delayedExecution.resolve();\n        }\n        delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n    }\n    /**\n     * Sends the provided batch once the rate limiter does not require any delay.\n     * @private\n     * @internal\n     */\n    async _sendBatch(batch, flush = false) {\n        const tag = (0, util_1.requestTag)();\n        // Send the batch if it is does not require any delay, or schedule another\n        // attempt after the appropriate timeout.\n        const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n        if (underRateLimit) {\n            await batch.bulkCommit({ requestTag: tag });\n            if (flush)\n                this._scheduleCurrentBatch(flush);\n        }\n        else {\n            const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n            (0, logger_1.logger)('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n            (0, backoff_1.delayExecution)(() => this._sendBatch(batch, flush), delayMs);\n        }\n    }\n    /**\n     * Adds a 30% jitter to the provided backoff.\n     *\n     * @private\n     * @internal\n     */\n    static _applyJitter(backoffMs) {\n        if (backoffMs === 0)\n            return 0;\n        // Random value in [-0.3, 0.3].\n        const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n        return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n    }\n    /**\n     * Schedules and runs the provided operation on the next available batch.\n     * @private\n     * @internal\n     */\n    _enqueue(ref, type, enqueueOnBatchCallback) {\n        const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));\n        // Swallow the error if the developer has set an error listener. This\n        // prevents UnhandledPromiseRejections from being thrown if a floating\n        // BulkWriter operation promise fails when an error handler is specified.\n        //\n        // This is done here in order to chain the caught promise onto `lastOp`,\n        // which ensures that flush() resolves after the operation promise.\n        const userPromise = bulkWriterOp.promise.catch(err => {\n            if (!this._errorHandlerSet) {\n                throw err;\n            }\n            else {\n                return bulkWriterOp.promise;\n            }\n        });\n        // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n        // when both the previous and the current write resolve.\n        this._lastOp = this._lastOp.then(() => (0, util_1.silencePromise)(userPromise));\n        // Schedule the operation if the BulkWriter has fewer than the maximum\n        // number of allowed pending operations, or add the operation to the\n        // buffer.\n        if (this._pendingOpsCount < this._maxPendingOpCount) {\n            this._pendingOpsCount++;\n            this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n        }\n        else {\n            this._bufferedOperations.push(new BufferedOperation(bulkWriterOp, () => {\n                this._pendingOpsCount++;\n                this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n            }));\n        }\n        // Chain the BulkWriter operation promise with the buffer processing logic\n        // in order to ensure that it runs and that subsequent operations are\n        // enqueued before the next batch is scheduled in `_sendBatch()`.\n        return userPromise\n            .then(res => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            return res;\n        })\n            .catch(err => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            throw err;\n        });\n    }\n    /**\n     * Manages the pending operation counter and schedules the next BulkWriter\n     * operation if we're under the maximum limit.\n     * @private\n     * @internal\n     */\n    _processBufferedOps() {\n        if (this._pendingOpsCount < this._maxPendingOpCount &&\n            this._bufferedOperations.length > 0) {\n            const nextOp = this._bufferedOperations.shift();\n            nextOp.sendFn();\n        }\n    }\n    /**\n     * Schedules the provided operations on current BulkCommitBatch.\n     * Sends the BulkCommitBatch if it reaches maximum capacity.\n     *\n     * @private\n     * @internal\n     */\n    _sendFn(enqueueOnBatchCallback, op) {\n        // A backoff duration greater than 0 implies that this batch is a retry.\n        // Retried writes are sent with a batch size of 10 in order to guarantee\n        // that the batch is under the 10MiB limit.\n        if (op.backoffDuration > 0) {\n            if (this._bulkCommitBatch.pendingOps.length >= exports.RETRY_MAX_BATCH_SIZE) {\n                this._scheduleCurrentBatch(/* flush= */ false);\n            }\n            this._bulkCommitBatch.setMaxBatchSize(exports.RETRY_MAX_BATCH_SIZE);\n        }\n        if (this._bulkCommitBatch.has(op.ref)) {\n            // Create a new batch since the backend doesn't support batches with two\n            // writes to the same document.\n            this._scheduleCurrentBatch();\n        }\n        enqueueOnBatchCallback(this._bulkCommitBatch);\n        this._bulkCommitBatch.processLastOperation(op);\n        if (this._bulkCommitBatch._opCount === this._bulkCommitBatch.maxBatchSize) {\n            this._scheduleCurrentBatch();\n        }\n        else if (op.flushed) {\n            // If flush() was called before this operation was enqueued into a batch,\n            // we still need to schedule it.\n            this._scheduleCurrentBatch(/* flush= */ true);\n        }\n    }\n}\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @internal\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\nfunction validateBulkWriterOptions(value) {\n    if ((0, validate_1.validateOptional)(value, { optional: true })) {\n        return;\n    }\n    const argName = 'options';\n    if (!(0, util_1.isObject)(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} Input is not an object.`);\n    }\n    const options = value;\n    if (options.throttling === undefined ||\n        typeof options.throttling === 'boolean') {\n        return;\n    }\n    if (options.throttling.initialOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n            minValue: 1,\n        });\n    }\n    if (options.throttling.maxOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n            minValue: 1,\n        });\n        if (options.throttling.initialOpsPerSecond !== undefined &&\n            options.throttling.initialOpsPerSecond >\n                options.throttling.maxOpsPerSecond) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n        }\n    }\n}\n//# sourceMappingURL=bulk-writer.js.map"],"mappings":"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,CAAC,CAAC;IACvB,OAAO,IAAI,CAACC,QAAQ,CAACtE,WAAW,EAAE,QAAQ,EAAEuE,eAAe,IAAIA,eAAe,CAACJ,MAAM,CAACnE,WAAW,EAAEoE,IAAI,CAAC,CAAC;EAC7G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,MAAMA,CAACxE,WAAW,EAAEyE,YAAY,EAAE;IAC9B,IAAI,CAACJ,gBAAgB,CAAC,CAAC;IACvB,OAAO,IAAI,CAACC,QAAQ,CAACtE,WAAW,EAAE,QAAQ,EAAEuE,eAAe,IAAIA,eAAe,CAACC,MAAM,CAACxE,WAAW,EAAEyE,YAAY,CAAC,CAAC;EACrH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAAC1E,WAAW,EAAEoE,IAAI,EAAElE,OAAO,EAAE;IAC5B,IAAI,CAACmE,gBAAgB,CAAC,CAAC;IACvB,OAAO,IAAI,CAACC,QAAQ,CAACtE,WAAW,EAAE,KAAK,EAAEuE,eAAe,IAAI;MACxD,IAAIrE,OAAO,EAAE;QACT,OAAOqE,eAAe,CAACG,GAAG,CAAC1E,WAAW,EAAEoE,IAAI,EAAElE,OAAO,CAAC;MAC1D,CAAC,MACI;QACD,OAAOqE,eAAe,CAACG,GAAG,CAAC1E,WAAW,EAAEoE,IAAI,CAAC;MACjD;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,MAAMA,CAAC3E,WAAW,EAAE4E,WAAW,EAAE,GAAGC,oBAAoB,EAAE;IACtD,IAAI,CAACR,gBAAgB,CAAC,CAAC;IACvB,OAAO,IAAI,CAACC,QAAQ,CAACtE,WAAW,EAAE,QAAQ,EAAEuE,eAAe,IAAIA,eAAe,CAACI,MAAM,CAAC3E,WAAW,EAAE4E,WAAW,EAAE,GAAGC,oBAAoB,CAAC,CAAC;EAC7I;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAACC,eAAe,EAAE;IAC3B,IAAI,CAAC5B,UAAU,GAAG4B,eAAe;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACC,mBAAmB,EAAE;IAC9B,IAAI,CAAC/B,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACE,QAAQ,GAAG6B,mBAAmB;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACb,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACc,qBAAqB,EAAC,YAAa,IAAI,CAAC;IAC7C;IACA;IACA,IAAI,IAAI,CAAC5C,mBAAmB,CAACzC,MAAM,GAAG,CAAC,EAAE;MACrC,IAAI,CAACyC,mBAAmB,CAAC,IAAI,CAACA,mBAAmB,CAACzC,MAAM,GAAG,CAAC,CAAC,CAACsC,SAAS,CAACp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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
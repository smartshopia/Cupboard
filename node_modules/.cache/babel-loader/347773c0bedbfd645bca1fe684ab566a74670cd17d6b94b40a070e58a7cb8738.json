{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nvar util = require(\"./util\");\nvar Root; // cyclic\n\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n\n  /**\r\n   * Options.\r\n   * @type {Object.<string,*>|undefined}\r\n   */\n  this.options = options; // toJSON\n\n  /**\r\n   * Parsed Options.\r\n   * @type {Array.<Object.<string,*>>|undefined}\r\n   */\n  this.parsedOptions = null;\n\n  /**\r\n   * Unique name within its namespace.\r\n   * @type {string}\r\n   */\n  this.name = name;\n\n  /**\r\n   * Parent namespace.\r\n   * @type {Namespace|null}\r\n   */\n  this.parent = null;\n\n  /**\r\n   * Whether already resolved or not.\r\n   * @type {boolean}\r\n   */\n  this.resolved = false;\n\n  /**\r\n   * Comment text, if any.\r\n   * @type {string|null}\r\n   */\n  this.comment = null;\n\n  /**\r\n   * Defining file name.\r\n   * @type {string|null}\r\n   */\n  this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\r\n   * Reference to the root namespace.\r\n   * @name ReflectionObject#root\r\n   * @type {Root}\r\n   * @readonly\r\n   */\n  root: {\n    get: function () {\n      var ptr = this;\n      while (ptr.parent !== null) ptr = ptr.parent;\n      return ptr;\n    }\n  },\n  /**\r\n   * Full name including leading dot.\r\n   * @name ReflectionObject#fullName\r\n   * @type {string}\r\n   * @readonly\r\n   */\n  fullName: {\n    get: function () {\n      var path = [this.name],\n        ptr = this.parent;\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n      return path.join(\".\");\n    }\n  }\n});\n\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */function toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n  return this;\n};\n\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n  if (!this.parsedOptions) {\n    this.parsedOptions = [];\n  }\n  var parsedOptions = this.parsedOptions;\n  if (propName) {\n    // If setting a sub property of an option then try to merge it\n    // with an existing option\n    var opt = parsedOptions.find(function (opt) {\n      return Object.prototype.hasOwnProperty.call(opt, name);\n    });\n    if (opt) {\n      // If we found an existing option - just merge the property value\n      var newValue = opt[name];\n      util.setProperty(newValue, propName, value);\n    } else {\n      // otherwise, create a new option, set it's property and add it to the list\n      opt = {};\n      opt[name] = util.setProperty({}, propName, value);\n      parsedOptions.push(opt);\n    }\n  } else {\n    // Always create a new option when setting the value of the option itself\n    var newOpt = {};\n    newOpt[name] = value;\n    parsedOptions.push(newOpt);\n  }\n  return this;\n};\n\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);\n  return this;\n};\n\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n    fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};","map":{"version":3,"names":["module","exports","ReflectionObject","className","util","require","Root","name","options","isString","TypeError","isObject","parsedOptions","parent","resolved","comment","filename","Object","defineProperties","prototype","root","get","ptr","fullName","path","unshift","join","toJSON","Error","onAdd","remove","_handleAdd","onRemove","_handleRemove","resolve","getOption","undefined","setOption","value","ifNotSet","setParsedOption","propName","opt","find","hasOwnProperty","call","newValue","setProperty","push","newOpt","setOptions","keys","i","length","toString","constructor","_configure","Root_"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/protobufjs/src/object.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Parsed Options.\r\n     * @type {Array.<Object.<string,*>>|undefined}\r\n     */\r\n    this.parsedOptions = null;\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\r\n    if (!this.parsedOptions) {\r\n        this.parsedOptions = [];\r\n    }\r\n    var parsedOptions = this.parsedOptions;\r\n    if (propName) {\r\n        // If setting a sub property of an option then try to merge it\r\n        // with an existing option\r\n        var opt = parsedOptions.find(function (opt) {\r\n            return Object.prototype.hasOwnProperty.call(opt, name);\r\n        });\r\n        if (opt) {\r\n            // If we found an existing option - just merge the property value\r\n            var newValue = opt[name];\r\n            util.setProperty(newValue, propName, value);\r\n        } else {\r\n            // otherwise, create a new option, set it's property and add it to the list\r\n            opt = {};\r\n            opt[name] = util.setProperty({}, propName, value);\r\n            parsedOptions.push(opt);\r\n        }\r\n    } else {\r\n        // Always create a new option when setting the value of the option itself\r\n        var newOpt = {};\r\n        newOpt[name] = value;\r\n        parsedOptions.push(newOpt);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryOptions = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst path_1 = require(\"../path\");\nconst types_1 = require(\"../types\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\nclass QueryOptions {\n  constructor(parentPath, collectionId, converter, allDescendants, filters, fieldOrders, startAt, endAt, limit, limitType, offset, projection,\n  // Whether to select all documents under `parentPath`. By default, only\n  // collections that match `collectionId` are selected.\n  kindless = false,\n  // Whether to require consistent documents when restarting the query. By\n  // default, restarting the query uses the readTime offset of the original\n  // query to provide consistent results.\n  requireConsistency = true) {\n    this.parentPath = parentPath;\n    this.collectionId = collectionId;\n    this.converter = converter;\n    this.allDescendants = allDescendants;\n    this.filters = filters;\n    this.fieldOrders = fieldOrders;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.offset = offset;\n    this.projection = projection;\n    this.kindless = kindless;\n    this.requireConsistency = requireConsistency;\n  }\n  /**\n   * Returns query options for a collection group query.\n   * @private\n   * @internal\n   */\n  static forCollectionGroupQuery(collectionId, converter = (0, types_1.defaultConverter)()) {\n    return new QueryOptions( /*parentPath=*/path_1.ResourcePath.EMPTY, collectionId, converter, /*allDescendants=*/true, /*fieldFilters=*/[], /*fieldOrders=*/[]);\n  }\n  /**\n   * Returns query options for a single-collection query.\n   * @private\n   * @internal\n   */\n  static forCollectionQuery(collectionRef, converter = (0, types_1.defaultConverter)()) {\n    return new QueryOptions(collectionRef.parent(), collectionRef.id, converter, /*allDescendants=*/false, /*fieldFilters=*/[], /*fieldOrders=*/[]);\n  }\n  /**\n   * Returns query options for a query that fetches all descendants under the\n   * specified reference.\n   *\n   * @private\n   * @internal\n   */\n  static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n    let options = new QueryOptions(parent, id, (0, types_1.defaultConverter)(), /*allDescendants=*/true, /*fieldFilters=*/[], /*fieldOrders=*/[]);\n    options = options.with({\n      kindless: true,\n      requireConsistency\n    });\n    return options;\n  }\n  /**\n   * Returns the union of the current and the provided options.\n   * @private\n   * @internal\n   */\n  with(settings) {\n    return new QueryOptions((0, helpers_1.coalesce)(settings.parentPath, this.parentPath), (0, helpers_1.coalesce)(settings.collectionId, this.collectionId), this.converter, (0, helpers_1.coalesce)(settings.allDescendants, this.allDescendants), (0, helpers_1.coalesce)(settings.filters, this.filters), (0, helpers_1.coalesce)(settings.fieldOrders, this.fieldOrders), (0, helpers_1.coalesce)(settings.startAt, this.startAt), (0, helpers_1.coalesce)(settings.endAt, this.endAt), (0, helpers_1.coalesce)(settings.limit, this.limit), (0, helpers_1.coalesce)(settings.limitType, this.limitType), (0, helpers_1.coalesce)(settings.offset, this.offset), (0, helpers_1.coalesce)(settings.projection, this.projection), (0, helpers_1.coalesce)(settings.kindless, this.kindless), (0, helpers_1.coalesce)(settings.requireConsistency, this.requireConsistency));\n  }\n  withConverter(converter) {\n    return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.filters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n  }\n  hasFieldOrders() {\n    return this.fieldOrders.length > 0;\n  }\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n    return other instanceof QueryOptions && this.parentPath.isEqual(other.parentPath) && this.filtersEqual(other.filters) && this.collectionId === other.collectionId && this.converter === other.converter && this.allDescendants === other.allDescendants && this.limit === other.limit && this.offset === other.offset && deepEqual(this.fieldOrders, other.fieldOrders) && deepEqual(this.startAt, other.startAt) && deepEqual(this.endAt, other.endAt) && deepEqual(this.projection, other.projection) && this.kindless === other.kindless && this.requireConsistency === other.requireConsistency;\n  }\n  filtersEqual(other) {\n    if (this.filters.length !== other.length) {\n      return false;\n    }\n    for (let i = 0; i < other.length; i++) {\n      if (!this.filters[i].isEqual(other[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nexports.QueryOptions = QueryOptions;","map":{"version":3,"names":["Object","defineProperty","exports","value","QueryOptions","deepEqual","require","path_1","types_1","helpers_1","constructor","parentPath","collectionId","converter","allDescendants","filters","fieldOrders","startAt","endAt","limit","limitType","offset","projection","kindless","requireConsistency","forCollectionGroupQuery","defaultConverter","ResourcePath","EMPTY","forCollectionQuery","collectionRef","parent","id","forKindlessAllDescendants","options","with","settings","coalesce","withConverter","hasFieldOrders","length","isEqual","other","filtersEqual","i"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/@google-cloud/firestore/build/src/reference/query-options.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryOptions = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst path_1 = require(\"../path\");\nconst types_1 = require(\"../types\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\nclass QueryOptions {\n    constructor(parentPath, collectionId, converter, allDescendants, filters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, \n    // Whether to select all documents under `parentPath`. By default, only\n    // collections that match `collectionId` are selected.\n    kindless = false, \n    // Whether to require consistent documents when restarting the query. By\n    // default, restarting the query uses the readTime offset of the original\n    // query to provide consistent results.\n    requireConsistency = true) {\n        this.parentPath = parentPath;\n        this.collectionId = collectionId;\n        this.converter = converter;\n        this.allDescendants = allDescendants;\n        this.filters = filters;\n        this.fieldOrders = fieldOrders;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.limit = limit;\n        this.limitType = limitType;\n        this.offset = offset;\n        this.projection = projection;\n        this.kindless = kindless;\n        this.requireConsistency = requireConsistency;\n    }\n    /**\n     * Returns query options for a collection group query.\n     * @private\n     * @internal\n     */\n    static forCollectionGroupQuery(collectionId, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(\n        /*parentPath=*/ path_1.ResourcePath.EMPTY, collectionId, converter, \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a single-collection query.\n     * @private\n     * @internal\n     */\n    static forCollectionQuery(collectionRef, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(collectionRef.parent(), collectionRef.id, converter, \n        /*allDescendants=*/ false, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a query that fetches all descendants under the\n     * specified reference.\n     *\n     * @private\n     * @internal\n     */\n    static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n        let options = new QueryOptions(parent, id, (0, types_1.defaultConverter)(), \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n        options = options.with({\n            kindless: true,\n            requireConsistency,\n        });\n        return options;\n    }\n    /**\n     * Returns the union of the current and the provided options.\n     * @private\n     * @internal\n     */\n    with(settings) {\n        return new QueryOptions((0, helpers_1.coalesce)(settings.parentPath, this.parentPath), (0, helpers_1.coalesce)(settings.collectionId, this.collectionId), this.converter, (0, helpers_1.coalesce)(settings.allDescendants, this.allDescendants), (0, helpers_1.coalesce)(settings.filters, this.filters), (0, helpers_1.coalesce)(settings.fieldOrders, this.fieldOrders), (0, helpers_1.coalesce)(settings.startAt, this.startAt), (0, helpers_1.coalesce)(settings.endAt, this.endAt), (0, helpers_1.coalesce)(settings.limit, this.limit), (0, helpers_1.coalesce)(settings.limitType, this.limitType), (0, helpers_1.coalesce)(settings.offset, this.offset), (0, helpers_1.coalesce)(settings.projection, this.projection), (0, helpers_1.coalesce)(settings.kindless, this.kindless), (0, helpers_1.coalesce)(settings.requireConsistency, this.requireConsistency));\n    }\n    withConverter(converter) {\n        return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.filters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n    }\n    hasFieldOrders() {\n        return this.fieldOrders.length > 0;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof QueryOptions &&\n            this.parentPath.isEqual(other.parentPath) &&\n            this.filtersEqual(other.filters) &&\n            this.collectionId === other.collectionId &&\n            this.converter === other.converter &&\n            this.allDescendants === other.allDescendants &&\n            this.limit === other.limit &&\n            this.offset === other.offset &&\n            deepEqual(this.fieldOrders, other.fieldOrders) &&\n            deepEqual(this.startAt, other.startAt) &&\n            deepEqual(this.endAt, other.endAt) &&\n            deepEqual(this.projection, other.projection) &&\n            this.kindless === other.kindless &&\n            this.requireConsistency === other.requireConsistency);\n    }\n    filtersEqual(other) {\n        if (this.filters.length !== other.length) {\n            return false;\n        }\n        for (let i = 0; i < other.length; i++) {\n            if (!this.filters[i].isEqual(other[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.QueryOptions = QueryOptions;\n//# sourceMappingURL=query-options.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
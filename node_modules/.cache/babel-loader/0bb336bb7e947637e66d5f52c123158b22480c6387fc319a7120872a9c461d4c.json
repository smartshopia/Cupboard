{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Task = void 0;\nexports.deepCopyForResponse = deepCopyForResponse;\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let result;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return obj.slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\nclass Task {\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i < this._data.length; ++i) {\n      count += this._data[i].elements.length;\n    }\n    return count;\n  }\n  /**\n   * Returns the total byte size of the elements in a task.\n   * @return {number} The byte size.\n   */\n  getRequestByteSize() {\n    let size = 0;\n    for (let i = 0; i < this._data.length; ++i) {\n      size += this._data[i].bytes;\n    }\n    return size;\n  }\n  /**\n   * Invokes the actual API call with current elements.\n   * @return {string[]} - the list of ids for invocations to be run.\n   */\n  run() {\n    if (this._data.length === 0) {\n      return [];\n    }\n    const request = this._request;\n    const elements = [];\n    const ids = [];\n    for (let i = 0; i < this._data.length; ++i) {\n      elements.push(...this._data[i].elements);\n      ids.push(this._data[i].callback.id);\n    }\n    request[this._bundledField] = elements;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    this.callCanceller = this._apiCall(request, (err, response) => {\n      const responses = [];\n      if (err) {\n        self._data.forEach(() => {\n          responses.push(undefined);\n        });\n      } else {\n        let subresponseInfo = null;\n        if (self._subresponseField) {\n          subresponseInfo = {\n            field: self._subresponseField,\n            start: 0\n          };\n        }\n        self._data.forEach(data => {\n          if (subresponseInfo) {\n            subresponseInfo.end = subresponseInfo.start + data.elements.length;\n          }\n          responses.push(deepCopyForResponse(response, subresponseInfo));\n          if (subresponseInfo) {\n            subresponseInfo.start = subresponseInfo.end;\n          }\n        });\n      }\n      for (let i = 0; i < self._data.length; ++i) {\n        if (self._data[i].cancelled) {\n          const error = new googleError_1.GoogleError('cancelled');\n          error.code = status_1.Status.CANCELLED;\n          self._data[i].callback(error);\n        } else {\n          self._data[i].callback(err, responses[i]);\n        }\n      }\n    });\n    return ids;\n  }\n  /**\n   * Appends the list of elements into the task.\n   * @param {Object[]} elements - the new list of elements.\n   * @param {number} bytes - the byte size required to encode elements in the API.\n   * @param {APICallback} callback - the callback of the method call.\n   */\n  extend(elements, bytes, callback) {\n    this._data.push({\n      elements,\n      bytes,\n      callback\n    });\n  }\n  /**\n   * Cancels a part of elements.\n   * @param {string} id - The identifier of the part of elements.\n   * @return {boolean} Whether the entire task will be canceled or not.\n   */\n  cancel(id) {\n    if (this.callCanceller) {\n      let allCancelled = true;\n      this._data.forEach(d => {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i < this._data.length; ++i) {\n      if (this._data[i].callback.id === id) {\n        const error = new googleError_1.GoogleError('cancelled');\n        error.code = status_1.Status.CANCELLED;\n        this._data[i].callback(error);\n        this._data.splice(i, 1);\n        break;\n      }\n    }\n    return this._data.length === 0;\n  }\n}\nexports.Task = Task;","map":{"version":3,"names":["Object","defineProperty","exports","value","Task","deepCopyForResponse","status_1","require","googleError_1","obj","subresponseInfo","result","undefined","Array","isArray","forEach","element","push","copy","ArrayBuffer","slice","keys","key","field","start","end","constructor","apiCall","bundlingRequest","bundledField","subresponseField","_apiCall","_request","_bundledField","_subresponseField","_data","getElementCount","count","i","length","elements","getRequestByteSize","size","bytes","run","request","ids","callback","id","self","callCanceller","err","response","responses","data","cancelled","error","GoogleError","code","Status","CANCELLED","extend","cancel","allCancelled","d","splice"],"sources":["C:/Users/ATTA UR REHMAN/Music/Fida/Cupboard/node_modules/google-gax/build/src/bundlingCalls/task.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Task = void 0;\nexports.deepCopyForResponse = deepCopyForResponse;\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach(element => {\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === 'object') {\n        result = {};\n        Object.keys(obj).forEach(key => {\n            if (subresponseInfo &&\n                key === subresponseInfo.field &&\n                Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            }\n            else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nclass Task {\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */\n    getElementCount() {\n        let count = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */\n    getRequestByteSize() {\n        let size = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */\n    run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for (let i = 0; i < this._data.length; ++i) {\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response) => {\n            const responses = [];\n            if (err) {\n                self._data.forEach(() => {\n                    responses.push(undefined);\n                });\n            }\n            else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0,\n                    };\n                }\n                self._data.forEach(data => {\n                    if (subresponseInfo) {\n                        subresponseInfo.end =\n                            subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for (let i = 0; i < self._data.length; ++i) {\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError('cancelled');\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                }\n                else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */\n    extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback,\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */\n    cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach(d => {\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for (let i = 0; i < this._data.length; ++i) {\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError('cancelled');\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task;\n//# sourceMappingURL=task.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}